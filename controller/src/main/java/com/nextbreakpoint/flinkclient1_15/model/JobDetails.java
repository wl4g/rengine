/*
 * Flink JobManager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1/1.15-SNAPSHOT
 * Contact: user@flink.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.nextbreakpoint.flinkclient1_15.model;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * JobDetails
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
        date = "2023-04-02T23:14:46.617621+08:00[Asia/Shanghai]")
public class JobDetails {
    @SerializedName("jobId")
    private String jobId = null;

    @SerializedName("jobName")
    private String jobName = null;

    @SerializedName("startTime")
    private Long startTime = null;

    @SerializedName("endTime")
    private Long endTime = null;

    @SerializedName("duration")
    private Long duration = null;

    /**
     * Gets or Sets status
     */
    @JsonAdapter(StatusEnum.Adapter.class)
    public enum StatusEnum {
        INITIALIZING("INITIALIZING"), CREATED("CREATED"), RUNNING("RUNNING"), FAILING("FAILING"), FAILED("FAILED"), CANCELLING(
                "CANCELLING"), CANCELED("CANCELED"), FINISHED(
                        "FINISHED"), RESTARTING("RESTARTING"), SUSPENDED("SUSPENDED"), RECONCILING("RECONCILING");

        private String value;

        StatusEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static StatusEnum fromValue(String text) {
            for (StatusEnum b : StatusEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<StatusEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public StatusEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return StatusEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("status")
    private StatusEnum status = null;

    @SerializedName("lastUpdateTime")
    private Long lastUpdateTime = null;

    @SerializedName("tasksPerState")
    private List<Integer> tasksPerState = null;

    @SerializedName("numTasks")
    private Integer numTasks = null;

    public JobDetails jobId(String jobId) {
        this.jobId = jobId;
        return this;
    }

    /**
     * Get jobId
     * 
     * @return jobId
     **/
    @Schema(description = "")
    public String getJobId() {
        return jobId;
    }

    public void setJobId(String jobId) {
        this.jobId = jobId;
    }

    public JobDetails jobName(String jobName) {
        this.jobName = jobName;
        return this;
    }

    /**
     * Get jobName
     * 
     * @return jobName
     **/
    @Schema(description = "")
    public String getJobName() {
        return jobName;
    }

    public void setJobName(String jobName) {
        this.jobName = jobName;
    }

    public JobDetails startTime(Long startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get startTime
     * 
     * @return startTime
     **/
    @Schema(description = "")
    public Long getStartTime() {
        return startTime;
    }

    public void setStartTime(Long startTime) {
        this.startTime = startTime;
    }

    public JobDetails endTime(Long endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get endTime
     * 
     * @return endTime
     **/
    @Schema(description = "")
    public Long getEndTime() {
        return endTime;
    }

    public void setEndTime(Long endTime) {
        this.endTime = endTime;
    }

    public JobDetails duration(Long duration) {
        this.duration = duration;
        return this;
    }

    /**
     * Get duration
     * 
     * @return duration
     **/
    @Schema(description = "")
    public Long getDuration() {
        return duration;
    }

    public void setDuration(Long duration) {
        this.duration = duration;
    }

    public JobDetails status(StatusEnum status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     * 
     * @return status
     **/
    @Schema(description = "")
    public StatusEnum getStatus() {
        return status;
    }

    public void setStatus(StatusEnum status) {
        this.status = status;
    }

    public JobDetails lastUpdateTime(Long lastUpdateTime) {
        this.lastUpdateTime = lastUpdateTime;
        return this;
    }

    /**
     * Get lastUpdateTime
     * 
     * @return lastUpdateTime
     **/
    @Schema(description = "")
    public Long getLastUpdateTime() {
        return lastUpdateTime;
    }

    public void setLastUpdateTime(Long lastUpdateTime) {
        this.lastUpdateTime = lastUpdateTime;
    }

    public JobDetails tasksPerState(List<Integer> tasksPerState) {
        this.tasksPerState = tasksPerState;
        return this;
    }

    public JobDetails addTasksPerStateItem(Integer tasksPerStateItem) {
        if (this.tasksPerState == null) {
            this.tasksPerState = new ArrayList<Integer>();
        }
        this.tasksPerState.add(tasksPerStateItem);
        return this;
    }

    /**
     * Get tasksPerState
     * 
     * @return tasksPerState
     **/
    @Schema(description = "")
    public List<Integer> getTasksPerState() {
        return tasksPerState;
    }

    public void setTasksPerState(List<Integer> tasksPerState) {
        this.tasksPerState = tasksPerState;
    }

    public JobDetails numTasks(Integer numTasks) {
        this.numTasks = numTasks;
        return this;
    }

    /**
     * Get numTasks
     * 
     * @return numTasks
     **/
    @Schema(description = "")
    public Integer getNumTasks() {
        return numTasks;
    }

    public void setNumTasks(Integer numTasks) {
        this.numTasks = numTasks;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JobDetails jobDetails = (JobDetails) o;
        return Objects.equals(this.jobId, jobDetails.jobId) && Objects.equals(this.jobName, jobDetails.jobName)
                && Objects.equals(this.startTime, jobDetails.startTime) && Objects.equals(this.endTime, jobDetails.endTime)
                && Objects.equals(this.duration, jobDetails.duration) && Objects.equals(this.status, jobDetails.status)
                && Objects.equals(this.lastUpdateTime, jobDetails.lastUpdateTime)
                && Objects.equals(this.tasksPerState, jobDetails.tasksPerState)
                && Objects.equals(this.numTasks, jobDetails.numTasks);
    }

    @Override
    public int hashCode() {
        return Objects.hash(jobId, jobName, startTime, endTime, duration, status, lastUpdateTime, tasksPerState, numTasks);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class JobDetails {\n");

        sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
        sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
        sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
        sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
        sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    lastUpdateTime: ").append(toIndentedString(lastUpdateTime)).append("\n");
        sb.append("    tasksPerState: ").append(toIndentedString(tasksPerState)).append("\n");
        sb.append("    numTasks: ").append(toIndentedString(numTasks)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
