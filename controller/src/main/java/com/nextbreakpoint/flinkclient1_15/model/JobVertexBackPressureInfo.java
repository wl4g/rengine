/*
 * Flink JobManager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1/1.15-SNAPSHOT
 * Contact: user@flink.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.nextbreakpoint.flinkclient1_15.model;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * JobVertexBackPressureInfo
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
        date = "2023-04-02T23:14:46.617621+08:00[Asia/Shanghai]")
public class JobVertexBackPressureInfo {
    /**
     * Gets or Sets status
     */
    @JsonAdapter(StatusEnum.Adapter.class)
    public enum StatusEnum {
        DEPRECATED("deprecated"), OK("ok");

        private String value;

        StatusEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static StatusEnum fromValue(String text) {
            for (StatusEnum b : StatusEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<StatusEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public StatusEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return StatusEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("status")
    private StatusEnum status = null;

    /**
     * Gets or Sets backpressureLevel
     */
    @JsonAdapter(BackpressureLevelEnum.Adapter.class)
    public enum BackpressureLevelEnum {
        OK("ok"), LOW("low"), HIGH("high");

        private String value;

        BackpressureLevelEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static BackpressureLevelEnum fromValue(String text) {
            for (BackpressureLevelEnum b : BackpressureLevelEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<BackpressureLevelEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final BackpressureLevelEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public BackpressureLevelEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return BackpressureLevelEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("backpressureLevel")
    private BackpressureLevelEnum backpressureLevel = null;

    @SerializedName("end-timestamp")
    private Long endTimestamp = null;

    @SerializedName("subtasks")
    private List<SubtaskBackPressureInfo> subtasks = null;

    public JobVertexBackPressureInfo status(StatusEnum status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     * 
     * @return status
     **/
    @Schema(description = "")
    public StatusEnum getStatus() {
        return status;
    }

    public void setStatus(StatusEnum status) {
        this.status = status;
    }

    public JobVertexBackPressureInfo backpressureLevel(BackpressureLevelEnum backpressureLevel) {
        this.backpressureLevel = backpressureLevel;
        return this;
    }

    /**
     * Get backpressureLevel
     * 
     * @return backpressureLevel
     **/
    @Schema(description = "")
    public BackpressureLevelEnum getBackpressureLevel() {
        return backpressureLevel;
    }

    public void setBackpressureLevel(BackpressureLevelEnum backpressureLevel) {
        this.backpressureLevel = backpressureLevel;
    }

    public JobVertexBackPressureInfo endTimestamp(Long endTimestamp) {
        this.endTimestamp = endTimestamp;
        return this;
    }

    /**
     * Get endTimestamp
     * 
     * @return endTimestamp
     **/
    @Schema(description = "")
    public Long getEndTimestamp() {
        return endTimestamp;
    }

    public void setEndTimestamp(Long endTimestamp) {
        this.endTimestamp = endTimestamp;
    }

    public JobVertexBackPressureInfo subtasks(List<SubtaskBackPressureInfo> subtasks) {
        this.subtasks = subtasks;
        return this;
    }

    public JobVertexBackPressureInfo addSubtasksItem(SubtaskBackPressureInfo subtasksItem) {
        if (this.subtasks == null) {
            this.subtasks = new ArrayList<SubtaskBackPressureInfo>();
        }
        this.subtasks.add(subtasksItem);
        return this;
    }

    /**
     * Get subtasks
     * 
     * @return subtasks
     **/
    @Schema(description = "")
    public List<SubtaskBackPressureInfo> getSubtasks() {
        return subtasks;
    }

    public void setSubtasks(List<SubtaskBackPressureInfo> subtasks) {
        this.subtasks = subtasks;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JobVertexBackPressureInfo jobVertexBackPressureInfo = (JobVertexBackPressureInfo) o;
        return Objects.equals(this.status, jobVertexBackPressureInfo.status)
                && Objects.equals(this.backpressureLevel, jobVertexBackPressureInfo.backpressureLevel)
                && Objects.equals(this.endTimestamp, jobVertexBackPressureInfo.endTimestamp)
                && Objects.equals(this.subtasks, jobVertexBackPressureInfo.subtasks);
    }

    @Override
    public int hashCode() {
        return Objects.hash(status, backpressureLevel, endTimestamp, subtasks);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class JobVertexBackPressureInfo {\n");

        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    backpressureLevel: ").append(toIndentedString(backpressureLevel)).append("\n");
        sb.append("    endTimestamp: ").append(toIndentedString(endTimestamp)).append("\n");
        sb.append("    subtasks: ").append(toIndentedString(subtasks)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
