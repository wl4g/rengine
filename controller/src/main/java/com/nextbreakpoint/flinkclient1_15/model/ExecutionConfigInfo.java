/*
 * Flink JobManager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1/1.15-SNAPSHOT
 * Contact: user@flink.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.nextbreakpoint.flinkclient1_15.model;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import com.google.gson.annotations.SerializedName;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * ExecutionConfigInfo
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
        date = "2023-04-02T23:14:46.617621+08:00[Asia/Shanghai]")
public class ExecutionConfigInfo {
    @SerializedName("execution-mode")
    private String executionMode = null;

    @SerializedName("restart-strategy")
    private String restartStrategy = null;

    @SerializedName("job-parallelism")
    private Integer jobParallelism = null;

    @SerializedName("object-reuse-mode")
    private Boolean objectReuseMode = null;

    @SerializedName("user-config")
    private Map<String, String> userConfig = null;

    public ExecutionConfigInfo executionMode(String executionMode) {
        this.executionMode = executionMode;
        return this;
    }

    /**
     * Get executionMode
     * 
     * @return executionMode
     **/
    @Schema(description = "")
    public String getExecutionMode() {
        return executionMode;
    }

    public void setExecutionMode(String executionMode) {
        this.executionMode = executionMode;
    }

    public ExecutionConfigInfo restartStrategy(String restartStrategy) {
        this.restartStrategy = restartStrategy;
        return this;
    }

    /**
     * Get restartStrategy
     * 
     * @return restartStrategy
     **/
    @Schema(description = "")
    public String getRestartStrategy() {
        return restartStrategy;
    }

    public void setRestartStrategy(String restartStrategy) {
        this.restartStrategy = restartStrategy;
    }

    public ExecutionConfigInfo jobParallelism(Integer jobParallelism) {
        this.jobParallelism = jobParallelism;
        return this;
    }

    /**
     * Get jobParallelism
     * 
     * @return jobParallelism
     **/
    @Schema(description = "")
    public Integer getJobParallelism() {
        return jobParallelism;
    }

    public void setJobParallelism(Integer jobParallelism) {
        this.jobParallelism = jobParallelism;
    }

    public ExecutionConfigInfo objectReuseMode(Boolean objectReuseMode) {
        this.objectReuseMode = objectReuseMode;
        return this;
    }

    /**
     * Get objectReuseMode
     * 
     * @return objectReuseMode
     **/
    @Schema(description = "")
    public Boolean isObjectReuseMode() {
        return objectReuseMode;
    }

    public void setObjectReuseMode(Boolean objectReuseMode) {
        this.objectReuseMode = objectReuseMode;
    }

    public ExecutionConfigInfo userConfig(Map<String, String> userConfig) {
        this.userConfig = userConfig;
        return this;
    }

    public ExecutionConfigInfo putUserConfigItem(String key, String userConfigItem) {
        if (this.userConfig == null) {
            this.userConfig = new HashMap<String, String>();
        }
        this.userConfig.put(key, userConfigItem);
        return this;
    }

    /**
     * Get userConfig
     * 
     * @return userConfig
     **/
    @Schema(description = "")
    public Map<String, String> getUserConfig() {
        return userConfig;
    }

    public void setUserConfig(Map<String, String> userConfig) {
        this.userConfig = userConfig;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExecutionConfigInfo executionConfigInfo = (ExecutionConfigInfo) o;
        return Objects.equals(this.executionMode, executionConfigInfo.executionMode)
                && Objects.equals(this.restartStrategy, executionConfigInfo.restartStrategy)
                && Objects.equals(this.jobParallelism, executionConfigInfo.jobParallelism)
                && Objects.equals(this.objectReuseMode, executionConfigInfo.objectReuseMode)
                && Objects.equals(this.userConfig, executionConfigInfo.userConfig);
    }

    @Override
    public int hashCode() {
        return Objects.hash(executionMode, restartStrategy, jobParallelism, objectReuseMode, userConfig);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ExecutionConfigInfo {\n");

        sb.append("    executionMode: ").append(toIndentedString(executionMode)).append("\n");
        sb.append("    restartStrategy: ").append(toIndentedString(restartStrategy)).append("\n");
        sb.append("    jobParallelism: ").append(toIndentedString(jobParallelism)).append("\n");
        sb.append("    objectReuseMode: ").append(toIndentedString(objectReuseMode)).append("\n");
        sb.append("    userConfig: ").append(toIndentedString(userConfig)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
