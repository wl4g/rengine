/*
 * Flink JobManager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1/1.15-SNAPSHOT
 * Contact: user@flink.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.nextbreakpoint.flinkclient1_15.model;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import com.google.gson.annotations.SerializedName;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * ResourceProfileInfo
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
        date = "2023-04-02T23:14:46.617621+08:00[Asia/Shanghai]")
public class ResourceProfileInfo {
    @SerializedName("cpuCores")
    private Double cpuCores = null;

    @SerializedName("taskHeapMemory")
    private Integer taskHeapMemory = null;

    @SerializedName("taskOffHeapMemory")
    private Integer taskOffHeapMemory = null;

    @SerializedName("managedMemory")
    private Integer managedMemory = null;

    @SerializedName("networkMemory")
    private Integer networkMemory = null;

    @SerializedName("extendedResources")
    private Map<String, Double> extendedResources = null;

    public ResourceProfileInfo cpuCores(Double cpuCores) {
        this.cpuCores = cpuCores;
        return this;
    }

    /**
     * Get cpuCores
     * 
     * @return cpuCores
     **/
    @Schema(description = "")
    public Double getCpuCores() {
        return cpuCores;
    }

    public void setCpuCores(Double cpuCores) {
        this.cpuCores = cpuCores;
    }

    public ResourceProfileInfo taskHeapMemory(Integer taskHeapMemory) {
        this.taskHeapMemory = taskHeapMemory;
        return this;
    }

    /**
     * Get taskHeapMemory
     * 
     * @return taskHeapMemory
     **/
    @Schema(description = "")
    public Integer getTaskHeapMemory() {
        return taskHeapMemory;
    }

    public void setTaskHeapMemory(Integer taskHeapMemory) {
        this.taskHeapMemory = taskHeapMemory;
    }

    public ResourceProfileInfo taskOffHeapMemory(Integer taskOffHeapMemory) {
        this.taskOffHeapMemory = taskOffHeapMemory;
        return this;
    }

    /**
     * Get taskOffHeapMemory
     * 
     * @return taskOffHeapMemory
     **/
    @Schema(description = "")
    public Integer getTaskOffHeapMemory() {
        return taskOffHeapMemory;
    }

    public void setTaskOffHeapMemory(Integer taskOffHeapMemory) {
        this.taskOffHeapMemory = taskOffHeapMemory;
    }

    public ResourceProfileInfo managedMemory(Integer managedMemory) {
        this.managedMemory = managedMemory;
        return this;
    }

    /**
     * Get managedMemory
     * 
     * @return managedMemory
     **/
    @Schema(description = "")
    public Integer getManagedMemory() {
        return managedMemory;
    }

    public void setManagedMemory(Integer managedMemory) {
        this.managedMemory = managedMemory;
    }

    public ResourceProfileInfo networkMemory(Integer networkMemory) {
        this.networkMemory = networkMemory;
        return this;
    }

    /**
     * Get networkMemory
     * 
     * @return networkMemory
     **/
    @Schema(description = "")
    public Integer getNetworkMemory() {
        return networkMemory;
    }

    public void setNetworkMemory(Integer networkMemory) {
        this.networkMemory = networkMemory;
    }

    public ResourceProfileInfo extendedResources(Map<String, Double> extendedResources) {
        this.extendedResources = extendedResources;
        return this;
    }

    public ResourceProfileInfo putExtendedResourcesItem(String key, Double extendedResourcesItem) {
        if (this.extendedResources == null) {
            this.extendedResources = new HashMap<String, Double>();
        }
        this.extendedResources.put(key, extendedResourcesItem);
        return this;
    }

    /**
     * Get extendedResources
     * 
     * @return extendedResources
     **/
    @Schema(description = "")
    public Map<String, Double> getExtendedResources() {
        return extendedResources;
    }

    public void setExtendedResources(Map<String, Double> extendedResources) {
        this.extendedResources = extendedResources;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ResourceProfileInfo resourceProfileInfo = (ResourceProfileInfo) o;
        return Objects.equals(this.cpuCores, resourceProfileInfo.cpuCores)
                && Objects.equals(this.taskHeapMemory, resourceProfileInfo.taskHeapMemory)
                && Objects.equals(this.taskOffHeapMemory, resourceProfileInfo.taskOffHeapMemory)
                && Objects.equals(this.managedMemory, resourceProfileInfo.managedMemory)
                && Objects.equals(this.networkMemory, resourceProfileInfo.networkMemory)
                && Objects.equals(this.extendedResources, resourceProfileInfo.extendedResources);
    }

    @Override
    public int hashCode() {
        return Objects.hash(cpuCores, taskHeapMemory, taskOffHeapMemory, managedMemory, networkMemory, extendedResources);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ResourceProfileInfo {\n");

        sb.append("    cpuCores: ").append(toIndentedString(cpuCores)).append("\n");
        sb.append("    taskHeapMemory: ").append(toIndentedString(taskHeapMemory)).append("\n");
        sb.append("    taskOffHeapMemory: ").append(toIndentedString(taskOffHeapMemory)).append("\n");
        sb.append("    managedMemory: ").append(toIndentedString(managedMemory)).append("\n");
        sb.append("    networkMemory: ").append(toIndentedString(networkMemory)).append("\n");
        sb.append("    extendedResources: ").append(toIndentedString(extendedResources)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
