/*
 * Flink JobManager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1/1.15-SNAPSHOT
 * Contact: user@flink.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.nextbreakpoint.flinkclient1_15.model;

import java.io.IOException;
import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * CheckpointConfigInfo
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
        date = "2023-04-02T23:14:46.617621+08:00[Asia/Shanghai]")
public class CheckpointConfigInfo {
    /**
     * Gets or Sets mode
     */
    @JsonAdapter(ModeEnum.Adapter.class)
    public enum ModeEnum {
        AT_LEAST_ONCE("AT_LEAST_ONCE"), EXACTLY_ONCE("EXACTLY_ONCE");

        private String value;

        ModeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static ModeEnum fromValue(String text) {
            for (ModeEnum b : ModeEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<ModeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public ModeEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return ModeEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("mode")
    private ModeEnum mode = null;

    @SerializedName("interval")
    private Long interval = null;

    @SerializedName("timeout")
    private Long timeout = null;

    @SerializedName("min_pause")
    private Long minPause = null;

    @SerializedName("max_concurrent")
    private Long maxConcurrent = null;

    @SerializedName("externalization")
    private ExternalizedCheckpointInfo externalization = null;

    @SerializedName("state_backend")
    private String stateBackend = null;

    @SerializedName("checkpoint_storage")
    private String checkpointStorage = null;

    @SerializedName("unaligned_checkpoints")
    private Boolean unalignedCheckpoints = null;

    @SerializedName("tolerable_failed_checkpoints")
    private Integer tolerableFailedCheckpoints = null;

    @SerializedName("aligned_checkpoint_timeout")
    private Long alignedCheckpointTimeout = null;

    @SerializedName("checkpoints_after_tasks_finish")
    private Boolean checkpointsAfterTasksFinish = null;

    public CheckpointConfigInfo mode(ModeEnum mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get mode
     * 
     * @return mode
     **/
    @Schema(description = "")
    public ModeEnum getMode() {
        return mode;
    }

    public void setMode(ModeEnum mode) {
        this.mode = mode;
    }

    public CheckpointConfigInfo interval(Long interval) {
        this.interval = interval;
        return this;
    }

    /**
     * Get interval
     * 
     * @return interval
     **/
    @Schema(description = "")
    public Long getInterval() {
        return interval;
    }

    public void setInterval(Long interval) {
        this.interval = interval;
    }

    public CheckpointConfigInfo timeout(Long timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Get timeout
     * 
     * @return timeout
     **/
    @Schema(description = "")
    public Long getTimeout() {
        return timeout;
    }

    public void setTimeout(Long timeout) {
        this.timeout = timeout;
    }

    public CheckpointConfigInfo minPause(Long minPause) {
        this.minPause = minPause;
        return this;
    }

    /**
     * Get minPause
     * 
     * @return minPause
     **/
    @Schema(description = "")
    public Long getMinPause() {
        return minPause;
    }

    public void setMinPause(Long minPause) {
        this.minPause = minPause;
    }

    public CheckpointConfigInfo maxConcurrent(Long maxConcurrent) {
        this.maxConcurrent = maxConcurrent;
        return this;
    }

    /**
     * Get maxConcurrent
     * 
     * @return maxConcurrent
     **/
    @Schema(description = "")
    public Long getMaxConcurrent() {
        return maxConcurrent;
    }

    public void setMaxConcurrent(Long maxConcurrent) {
        this.maxConcurrent = maxConcurrent;
    }

    public CheckpointConfigInfo externalization(ExternalizedCheckpointInfo externalization) {
        this.externalization = externalization;
        return this;
    }

    /**
     * Get externalization
     * 
     * @return externalization
     **/
    @Schema(description = "")
    public ExternalizedCheckpointInfo getExternalization() {
        return externalization;
    }

    public void setExternalization(ExternalizedCheckpointInfo externalization) {
        this.externalization = externalization;
    }

    public CheckpointConfigInfo stateBackend(String stateBackend) {
        this.stateBackend = stateBackend;
        return this;
    }

    /**
     * Get stateBackend
     * 
     * @return stateBackend
     **/
    @Schema(description = "")
    public String getStateBackend() {
        return stateBackend;
    }

    public void setStateBackend(String stateBackend) {
        this.stateBackend = stateBackend;
    }

    public CheckpointConfigInfo checkpointStorage(String checkpointStorage) {
        this.checkpointStorage = checkpointStorage;
        return this;
    }

    /**
     * Get checkpointStorage
     * 
     * @return checkpointStorage
     **/
    @Schema(description = "")
    public String getCheckpointStorage() {
        return checkpointStorage;
    }

    public void setCheckpointStorage(String checkpointStorage) {
        this.checkpointStorage = checkpointStorage;
    }

    public CheckpointConfigInfo unalignedCheckpoints(Boolean unalignedCheckpoints) {
        this.unalignedCheckpoints = unalignedCheckpoints;
        return this;
    }

    /**
     * Get unalignedCheckpoints
     * 
     * @return unalignedCheckpoints
     **/
    @Schema(description = "")
    public Boolean isUnalignedCheckpoints() {
        return unalignedCheckpoints;
    }

    public void setUnalignedCheckpoints(Boolean unalignedCheckpoints) {
        this.unalignedCheckpoints = unalignedCheckpoints;
    }

    public CheckpointConfigInfo tolerableFailedCheckpoints(Integer tolerableFailedCheckpoints) {
        this.tolerableFailedCheckpoints = tolerableFailedCheckpoints;
        return this;
    }

    /**
     * Get tolerableFailedCheckpoints
     * 
     * @return tolerableFailedCheckpoints
     **/
    @Schema(description = "")
    public Integer getTolerableFailedCheckpoints() {
        return tolerableFailedCheckpoints;
    }

    public void setTolerableFailedCheckpoints(Integer tolerableFailedCheckpoints) {
        this.tolerableFailedCheckpoints = tolerableFailedCheckpoints;
    }

    public CheckpointConfigInfo alignedCheckpointTimeout(Long alignedCheckpointTimeout) {
        this.alignedCheckpointTimeout = alignedCheckpointTimeout;
        return this;
    }

    /**
     * Get alignedCheckpointTimeout
     * 
     * @return alignedCheckpointTimeout
     **/
    @Schema(description = "")
    public Long getAlignedCheckpointTimeout() {
        return alignedCheckpointTimeout;
    }

    public void setAlignedCheckpointTimeout(Long alignedCheckpointTimeout) {
        this.alignedCheckpointTimeout = alignedCheckpointTimeout;
    }

    public CheckpointConfigInfo checkpointsAfterTasksFinish(Boolean checkpointsAfterTasksFinish) {
        this.checkpointsAfterTasksFinish = checkpointsAfterTasksFinish;
        return this;
    }

    /**
     * Get checkpointsAfterTasksFinish
     * 
     * @return checkpointsAfterTasksFinish
     **/
    @Schema(description = "")
    public Boolean isCheckpointsAfterTasksFinish() {
        return checkpointsAfterTasksFinish;
    }

    public void setCheckpointsAfterTasksFinish(Boolean checkpointsAfterTasksFinish) {
        this.checkpointsAfterTasksFinish = checkpointsAfterTasksFinish;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CheckpointConfigInfo checkpointConfigInfo = (CheckpointConfigInfo) o;
        return Objects.equals(this.mode, checkpointConfigInfo.mode)
                && Objects.equals(this.interval, checkpointConfigInfo.interval)
                && Objects.equals(this.timeout, checkpointConfigInfo.timeout)
                && Objects.equals(this.minPause, checkpointConfigInfo.minPause)
                && Objects.equals(this.maxConcurrent, checkpointConfigInfo.maxConcurrent)
                && Objects.equals(this.externalization, checkpointConfigInfo.externalization)
                && Objects.equals(this.stateBackend, checkpointConfigInfo.stateBackend)
                && Objects.equals(this.checkpointStorage, checkpointConfigInfo.checkpointStorage)
                && Objects.equals(this.unalignedCheckpoints, checkpointConfigInfo.unalignedCheckpoints)
                && Objects.equals(this.tolerableFailedCheckpoints, checkpointConfigInfo.tolerableFailedCheckpoints)
                && Objects.equals(this.alignedCheckpointTimeout, checkpointConfigInfo.alignedCheckpointTimeout)
                && Objects.equals(this.checkpointsAfterTasksFinish, checkpointConfigInfo.checkpointsAfterTasksFinish);
    }

    @Override
    public int hashCode() {
        return Objects.hash(mode, interval, timeout, minPause, maxConcurrent, externalization, stateBackend, checkpointStorage,
                unalignedCheckpoints, tolerableFailedCheckpoints, alignedCheckpointTimeout, checkpointsAfterTasksFinish);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CheckpointConfigInfo {\n");

        sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
        sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
        sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
        sb.append("    minPause: ").append(toIndentedString(minPause)).append("\n");
        sb.append("    maxConcurrent: ").append(toIndentedString(maxConcurrent)).append("\n");
        sb.append("    externalization: ").append(toIndentedString(externalization)).append("\n");
        sb.append("    stateBackend: ").append(toIndentedString(stateBackend)).append("\n");
        sb.append("    checkpointStorage: ").append(toIndentedString(checkpointStorage)).append("\n");
        sb.append("    unalignedCheckpoints: ").append(toIndentedString(unalignedCheckpoints)).append("\n");
        sb.append("    tolerableFailedCheckpoints: ").append(toIndentedString(tolerableFailedCheckpoints)).append("\n");
        sb.append("    alignedCheckpointTimeout: ").append(toIndentedString(alignedCheckpointTimeout)).append("\n");
        sb.append("    checkpointsAfterTasksFinish: ").append(toIndentedString(checkpointsAfterTasksFinish)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
