/*
 * Flink JobManager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1/1.15-SNAPSHOT
 * Contact: user@flink.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.nextbreakpoint.flinkclient1_15.api;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;
import com.nextbreakpoint.flinkclient1_15.model.AggregatedMetricsResponseBody;
import com.nextbreakpoint.flinkclient1_15.model.AsynchronousOperationResult;
import com.nextbreakpoint.flinkclient1_15.model.CheckpointConfigInfo;
import com.nextbreakpoint.flinkclient1_15.model.CheckpointStatistics;
import com.nextbreakpoint.flinkclient1_15.model.CheckpointingStatistics;
import com.nextbreakpoint.flinkclient1_15.model.ClusterConfigurationInfoEntry;
import com.nextbreakpoint.flinkclient1_15.model.ClusterDataSetListResponseBody;
import com.nextbreakpoint.flinkclient1_15.model.ClusterOverviewWithVersion;
import com.nextbreakpoint.flinkclient1_15.model.DashboardConfiguration;
import com.nextbreakpoint.flinkclient1_15.model.JarListInfo;
import com.nextbreakpoint.flinkclient1_15.model.JarPlanRequestBody;
import com.nextbreakpoint.flinkclient1_15.model.JarRunRequestBody;
import com.nextbreakpoint.flinkclient1_15.model.JarRunResponseBody;
import com.nextbreakpoint.flinkclient1_15.model.JarUploadResponseBody;
import com.nextbreakpoint.flinkclient1_15.model.JobAccumulatorsInfo;
import com.nextbreakpoint.flinkclient1_15.model.JobConfigInfo;
import com.nextbreakpoint.flinkclient1_15.model.JobDetailsInfo;
import com.nextbreakpoint.flinkclient1_15.model.JobExceptionsInfoWithHistory;
import com.nextbreakpoint.flinkclient1_15.model.JobExecutionResultResponseBody;
import com.nextbreakpoint.flinkclient1_15.model.JobIdsWithStatusOverview;
import com.nextbreakpoint.flinkclient1_15.model.JobPlanInfo;
import com.nextbreakpoint.flinkclient1_15.model.JobSubmitRequestBody;
import com.nextbreakpoint.flinkclient1_15.model.JobSubmitResponseBody;
import com.nextbreakpoint.flinkclient1_15.model.JobVertexAccumulatorsInfo;
import com.nextbreakpoint.flinkclient1_15.model.JobVertexBackPressureInfo;
import com.nextbreakpoint.flinkclient1_15.model.JobVertexDetailsInfo;
import com.nextbreakpoint.flinkclient1_15.model.JobVertexFlameGraph;
import com.nextbreakpoint.flinkclient1_15.model.JobVertexTaskManagersInfo;
import com.nextbreakpoint.flinkclient1_15.model.LogListInfo;
import com.nextbreakpoint.flinkclient1_15.model.MetricCollectionResponseBody;
import com.nextbreakpoint.flinkclient1_15.model.MultipleJobsDetails;
import com.nextbreakpoint.flinkclient1_15.model.SavepointDisposalRequest;
import com.nextbreakpoint.flinkclient1_15.model.SavepointTriggerRequestBody;
import com.nextbreakpoint.flinkclient1_15.model.StopWithSavepointRequestBody;
import com.nextbreakpoint.flinkclient1_15.model.SubtaskExecutionAttemptAccumulatorsInfo;
import com.nextbreakpoint.flinkclient1_15.model.SubtaskExecutionAttemptDetailsInfo;
import com.nextbreakpoint.flinkclient1_15.model.SubtasksAllAccumulatorsInfo;
import com.nextbreakpoint.flinkclient1_15.model.SubtasksTimesInfo;
import com.nextbreakpoint.flinkclient1_15.model.TaskCheckpointStatisticsWithSubtaskDetails;
import com.nextbreakpoint.flinkclient1_15.model.TaskManagerDetailsInfo;
import com.nextbreakpoint.flinkclient1_15.model.TaskManagersInfo;
import com.nextbreakpoint.flinkclient1_15.model.ThreadDumpInfo;
import com.nextbreakpoint.flinkclient1_15.model.TriggerResponse;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for clusterDelete
     * 
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call clusterDeleteCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/cluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call clusterDeleteValidateBeforeCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        com.squareup.okhttp.Call call = clusterDeleteCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Shuts down the cluster
     * 
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public void clusterDelete() throws ApiException {
        clusterDeleteWithHttpInfo();
    }

    /**
     * 
     * Shuts down the cluster
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<Void> clusterDeleteWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = clusterDeleteValidateBeforeCall(null, null);
        return apiClient.execute(call);
    }

    /**
     * (asynchronously) Shuts down the cluster
     * 
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call clusterDeleteAsync(final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = clusterDeleteValidateBeforeCall(progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for configGet
     * 
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call configGetCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call configGetValidateBeforeCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        com.squareup.okhttp.Call call = configGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the configuration of the WebUI.
     * 
     * @return DashboardConfiguration
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public DashboardConfiguration configGet() throws ApiException {
        ApiResponse<DashboardConfiguration> resp = configGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Returns the configuration of the WebUI.
     * 
     * @return ApiResponse&lt;DashboardConfiguration&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<DashboardConfiguration> configGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = configGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<DashboardConfiguration>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns the configuration of the WebUI.
     * 
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call configGetAsync(final ApiCallback<DashboardConfiguration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = configGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DashboardConfiguration>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for datasetsDatasetidDelete
     * 
     * @param datasetid
     *            32-character hexadecimal string value that identifies a
     *            cluster data set. (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call datasetsDatasetidDeleteCall(
            String datasetid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/{datasetid}".replaceAll("\\{" + "datasetid" + "\\}",
                apiClient.escapeString(datasetid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call datasetsDatasetidDeleteValidateBeforeCall(
            String datasetid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'datasetid' is set
        if (datasetid == null) {
            throw new ApiException("Missing the required parameter 'datasetid' when calling datasetsDatasetidDelete(Async)");
        }

        com.squareup.okhttp.Call call = datasetsDatasetidDeleteCall(datasetid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Triggers the deletion of a cluster data set. This async operation would
     * return a &#x27;triggerid&#x27; for further query identifier.
     * 
     * @param datasetid
     *            32-character hexadecimal string value that identifies a
     *            cluster data set. (required)
     * @return TriggerResponse
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public TriggerResponse datasetsDatasetidDelete(String datasetid) throws ApiException {
        ApiResponse<TriggerResponse> resp = datasetsDatasetidDeleteWithHttpInfo(datasetid);
        return resp.getData();
    }

    /**
     * 
     * Triggers the deletion of a cluster data set. This async operation would
     * return a &#x27;triggerid&#x27; for further query identifier.
     * 
     * @param datasetid
     *            32-character hexadecimal string value that identifies a
     *            cluster data set. (required)
     * @return ApiResponse&lt;TriggerResponse&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<TriggerResponse> datasetsDatasetidDeleteWithHttpInfo(String datasetid) throws ApiException {
        com.squareup.okhttp.Call call = datasetsDatasetidDeleteValidateBeforeCall(datasetid, null, null);
        Type localVarReturnType = new TypeToken<TriggerResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Triggers the deletion of a cluster data set. This async
     * operation would return a &#x27;triggerid&#x27; for further query
     * identifier.
     * 
     * @param datasetid
     *            32-character hexadecimal string value that identifies a
     *            cluster data set. (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call datasetsDatasetidDeleteAsync(String datasetid, final ApiCallback<TriggerResponse> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = datasetsDatasetidDeleteValidateBeforeCall(datasetid, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<TriggerResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for datasetsDeleteTriggeridGet
     * 
     * @param triggerid
     *            32-character hexadecimal string that identifies an
     *            asynchronous operation trigger ID. The ID was returned then
     *            the operation was triggered. (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call datasetsDeleteTriggeridGetCall(
            String triggerid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets/delete/{triggerid}".replaceAll("\\{" + "triggerid" + "\\}",
                apiClient.escapeString(triggerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call datasetsDeleteTriggeridGetValidateBeforeCall(
            String triggerid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'triggerid' is set
        if (triggerid == null) {
            throw new ApiException("Missing the required parameter 'triggerid' when calling datasetsDeleteTriggeridGet(Async)");
        }

        com.squareup.okhttp.Call call = datasetsDeleteTriggeridGetCall(triggerid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the status for the delete operation of a cluster data set.
     * 
     * @param triggerid
     *            32-character hexadecimal string that identifies an
     *            asynchronous operation trigger ID. The ID was returned then
     *            the operation was triggered. (required)
     * @return AsynchronousOperationResult
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public AsynchronousOperationResult datasetsDeleteTriggeridGet(String triggerid) throws ApiException {
        ApiResponse<AsynchronousOperationResult> resp = datasetsDeleteTriggeridGetWithHttpInfo(triggerid);
        return resp.getData();
    }

    /**
     * 
     * Returns the status for the delete operation of a cluster data set.
     * 
     * @param triggerid
     *            32-character hexadecimal string that identifies an
     *            asynchronous operation trigger ID. The ID was returned then
     *            the operation was triggered. (required)
     * @return ApiResponse&lt;AsynchronousOperationResult&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<AsynchronousOperationResult> datasetsDeleteTriggeridGetWithHttpInfo(String triggerid) throws ApiException {
        com.squareup.okhttp.Call call = datasetsDeleteTriggeridGetValidateBeforeCall(triggerid, null, null);
        Type localVarReturnType = new TypeToken<AsynchronousOperationResult>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns the status for the delete operation of a cluster
     * data set.
     * 
     * @param triggerid
     *            32-character hexadecimal string that identifies an
     *            asynchronous operation trigger ID. The ID was returned then
     *            the operation was triggered. (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call datasetsDeleteTriggeridGetAsync(
            String triggerid,
            final ApiCallback<AsynchronousOperationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = datasetsDeleteTriggeridGetValidateBeforeCall(triggerid, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<AsynchronousOperationResult>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for datasetsGet
     * 
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call datasetsGetCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/datasets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call datasetsGetValidateBeforeCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        com.squareup.okhttp.Call call = datasetsGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns all cluster data sets.
     * 
     * @return ClusterDataSetListResponseBody
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ClusterDataSetListResponseBody datasetsGet() throws ApiException {
        ApiResponse<ClusterDataSetListResponseBody> resp = datasetsGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Returns all cluster data sets.
     * 
     * @return ApiResponse&lt;ClusterDataSetListResponseBody&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<ClusterDataSetListResponseBody> datasetsGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = datasetsGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ClusterDataSetListResponseBody>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns all cluster data sets.
     * 
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call datasetsGetAsync(final ApiCallback<ClusterDataSetListResponseBody> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = datasetsGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterDataSetListResponseBody>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jarsGet
     * 
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jarsGetCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jars";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jarsGetValidateBeforeCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        com.squareup.okhttp.Call call = jarsGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns a list of all jars previously uploaded via
     * &#x27;/jars/upload&#x27;.
     * 
     * @return JarListInfo
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public JarListInfo jarsGet() throws ApiException {
        ApiResponse<JarListInfo> resp = jarsGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Returns a list of all jars previously uploaded via
     * &#x27;/jars/upload&#x27;.
     * 
     * @return ApiResponse&lt;JarListInfo&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<JarListInfo> jarsGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = jarsGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<JarListInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns a list of all jars previously uploaded via
     * &#x27;/jars/upload&#x27;.
     * 
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jarsGetAsync(final ApiCallback<JarListInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jarsGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JarListInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jarsJaridDelete
     * 
     * @param jarid
     *            String value that identifies a jar. When uploading the jar a
     *            path is returned, where the filename is the ID. This value is
     *            equivalent to the &#x60;id&#x60; field in the list of uploaded
     *            jars (/jars). (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jarsJaridDeleteCall(
            String jarid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jars/{jarid}".replaceAll("\\{" + "jarid" + "\\}", apiClient.escapeString(jarid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jarsJaridDeleteValidateBeforeCall(
            String jarid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jarid' is set
        if (jarid == null) {
            throw new ApiException("Missing the required parameter 'jarid' when calling jarsJaridDelete(Async)");
        }

        com.squareup.okhttp.Call call = jarsJaridDeleteCall(jarid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Deletes a jar previously uploaded via &#x27;/jars/upload&#x27;.
     * 
     * @param jarid
     *            String value that identifies a jar. When uploading the jar a
     *            path is returned, where the filename is the ID. This value is
     *            equivalent to the &#x60;id&#x60; field in the list of uploaded
     *            jars (/jars). (required)
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public void jarsJaridDelete(String jarid) throws ApiException {
        jarsJaridDeleteWithHttpInfo(jarid);
    }

    /**
     * 
     * Deletes a jar previously uploaded via &#x27;/jars/upload&#x27;.
     * 
     * @param jarid
     *            String value that identifies a jar. When uploading the jar a
     *            path is returned, where the filename is the ID. This value is
     *            equivalent to the &#x60;id&#x60; field in the list of uploaded
     *            jars (/jars). (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<Void> jarsJaridDeleteWithHttpInfo(String jarid) throws ApiException {
        com.squareup.okhttp.Call call = jarsJaridDeleteValidateBeforeCall(jarid, null, null);
        return apiClient.execute(call);
    }

    /**
     * (asynchronously) Deletes a jar previously uploaded via
     * &#x27;/jars/upload&#x27;.
     * 
     * @param jarid
     *            String value that identifies a jar. When uploading the jar a
     *            path is returned, where the filename is the ID. This value is
     *            equivalent to the &#x60;id&#x60; field in the list of uploaded
     *            jars (/jars). (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jarsJaridDeleteAsync(String jarid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jarsJaridDeleteValidateBeforeCall(jarid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for jarsJaridPlanGet
     * 
     * @param jarid
     *            String value that identifies a jar. When uploading the jar a
     *            path is returned, where the filename is the ID. This value is
     *            equivalent to the &#x60;id&#x60; field in the list of uploaded
     *            jars (/jars). (required)
     * @param programArgs
     *            Deprecated, please use &#x27;programArg&#x27; instead. String
     *            value that specifies the arguments for the program or plan
     *            (optional)
     * @param programArg
     *            Comma-separated list of program arguments. (optional)
     * @param entryClass
     *            String value that specifies the fully qualified name of the
     *            entry point class. Overrides the class defined in the jar file
     *            manifest. (optional)
     * @param parallelism
     *            Positive integer value that specifies the desired parallelism
     *            for the job. (optional)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jarsJaridPlanGetCall(
            String jarid,
            String programArgs,
            String programArg,
            String entryClass,
            Integer parallelism,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jars/{jarid}/plan".replaceAll("\\{" + "jarid" + "\\}", apiClient.escapeString(jarid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (programArgs != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("program-args", programArgs));
        if (programArg != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("programArg", programArg));
        if (entryClass != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("entry-class", entryClass));
        if (parallelism != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("parallelism", parallelism));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jarsJaridPlanGetValidateBeforeCall(
            String jarid,
            String programArgs,
            String programArg,
            String entryClass,
            Integer parallelism,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jarid' is set
        if (jarid == null) {
            throw new ApiException("Missing the required parameter 'jarid' when calling jarsJaridPlanGet(Async)");
        }

        com.squareup.okhttp.Call call = jarsJaridPlanGetCall(jarid, programArgs, programArg, entryClass, parallelism,
                progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the dataflow plan of a job contained in a jar previously uploaded
     * via &#x27;/jars/upload&#x27;. Program arguments can be passed both via
     * the JSON request (recommended) or query parameters.
     * 
     * @param jarid
     *            String value that identifies a jar. When uploading the jar a
     *            path is returned, where the filename is the ID. This value is
     *            equivalent to the &#x60;id&#x60; field in the list of uploaded
     *            jars (/jars). (required)
     * @param programArgs
     *            Deprecated, please use &#x27;programArg&#x27; instead. String
     *            value that specifies the arguments for the program or plan
     *            (optional)
     * @param programArg
     *            Comma-separated list of program arguments. (optional)
     * @param entryClass
     *            String value that specifies the fully qualified name of the
     *            entry point class. Overrides the class defined in the jar file
     *            manifest. (optional)
     * @param parallelism
     *            Positive integer value that specifies the desired parallelism
     *            for the job. (optional)
     * @return JobPlanInfo
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public JobPlanInfo jarsJaridPlanGet(
            String jarid,
            String programArgs,
            String programArg,
            String entryClass,
            Integer parallelism) throws ApiException {
        ApiResponse<JobPlanInfo> resp = jarsJaridPlanGetWithHttpInfo(jarid, programArgs, programArg, entryClass, parallelism);
        return resp.getData();
    }

    /**
     * 
     * Returns the dataflow plan of a job contained in a jar previously uploaded
     * via &#x27;/jars/upload&#x27;. Program arguments can be passed both via
     * the JSON request (recommended) or query parameters.
     * 
     * @param jarid
     *            String value that identifies a jar. When uploading the jar a
     *            path is returned, where the filename is the ID. This value is
     *            equivalent to the &#x60;id&#x60; field in the list of uploaded
     *            jars (/jars). (required)
     * @param programArgs
     *            Deprecated, please use &#x27;programArg&#x27; instead. String
     *            value that specifies the arguments for the program or plan
     *            (optional)
     * @param programArg
     *            Comma-separated list of program arguments. (optional)
     * @param entryClass
     *            String value that specifies the fully qualified name of the
     *            entry point class. Overrides the class defined in the jar file
     *            manifest. (optional)
     * @param parallelism
     *            Positive integer value that specifies the desired parallelism
     *            for the job. (optional)
     * @return ApiResponse&lt;JobPlanInfo&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<JobPlanInfo> jarsJaridPlanGetWithHttpInfo(
            String jarid,
            String programArgs,
            String programArg,
            String entryClass,
            Integer parallelism) throws ApiException {
        com.squareup.okhttp.Call call = jarsJaridPlanGetValidateBeforeCall(jarid, programArgs, programArg, entryClass,
                parallelism, null, null);
        Type localVarReturnType = new TypeToken<JobPlanInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns the dataflow plan of a job contained in a jar
     * previously uploaded via &#x27;/jars/upload&#x27;. Program arguments can
     * be passed both via the JSON request (recommended) or query parameters.
     * 
     * @param jarid
     *            String value that identifies a jar. When uploading the jar a
     *            path is returned, where the filename is the ID. This value is
     *            equivalent to the &#x60;id&#x60; field in the list of uploaded
     *            jars (/jars). (required)
     * @param programArgs
     *            Deprecated, please use &#x27;programArg&#x27; instead. String
     *            value that specifies the arguments for the program or plan
     *            (optional)
     * @param programArg
     *            Comma-separated list of program arguments. (optional)
     * @param entryClass
     *            String value that specifies the fully qualified name of the
     *            entry point class. Overrides the class defined in the jar file
     *            manifest. (optional)
     * @param parallelism
     *            Positive integer value that specifies the desired parallelism
     *            for the job. (optional)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jarsJaridPlanGetAsync(
            String jarid,
            String programArgs,
            String programArg,
            String entryClass,
            Integer parallelism,
            final ApiCallback<JobPlanInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jarsJaridPlanGetValidateBeforeCall(jarid, programArgs, programArg, entryClass,
                parallelism, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobPlanInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jarsJaridPlanPost
     * 
     * @param jarid
     *            String value that identifies a jar. When uploading the jar a
     *            path is returned, where the filename is the ID. This value is
     *            equivalent to the &#x60;id&#x60; field in the list of uploaded
     *            jars (/jars). (required)
     * @param body
     *            (optional)
     * @param programArgs
     *            Deprecated, please use &#x27;programArg&#x27; instead. String
     *            value that specifies the arguments for the program or plan
     *            (optional)
     * @param programArg
     *            Comma-separated list of program arguments. (optional)
     * @param entryClass
     *            String value that specifies the fully qualified name of the
     *            entry point class. Overrides the class defined in the jar file
     *            manifest. (optional)
     * @param parallelism
     *            Positive integer value that specifies the desired parallelism
     *            for the job. (optional)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jarsJaridPlanPostCall(
            String jarid,
            JarPlanRequestBody body,
            String programArgs,
            String programArg,
            String entryClass,
            Integer parallelism,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/jars/{jarid}/plan".replaceAll("\\{" + "jarid" + "\\}", apiClient.escapeString(jarid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (programArgs != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("program-args", programArgs));
        if (programArg != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("programArg", programArg));
        if (entryClass != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("entry-class", entryClass));
        if (parallelism != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("parallelism", parallelism));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = { "application/json" };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jarsJaridPlanPostValidateBeforeCall(
            String jarid,
            JarPlanRequestBody body,
            String programArgs,
            String programArg,
            String entryClass,
            Integer parallelism,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jarid' is set
        if (jarid == null) {
            throw new ApiException("Missing the required parameter 'jarid' when calling jarsJaridPlanPost(Async)");
        }

        com.squareup.okhttp.Call call = jarsJaridPlanPostCall(jarid, body, programArgs, programArg, entryClass, parallelism,
                progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the dataflow plan of a job contained in a jar previously uploaded
     * via &#x27;/jars/upload&#x27;. Program arguments can be passed both via
     * the JSON request (recommended) or query parameters.
     * 
     * @param jarid
     *            String value that identifies a jar. When uploading the jar a
     *            path is returned, where the filename is the ID. This value is
     *            equivalent to the &#x60;id&#x60; field in the list of uploaded
     *            jars (/jars). (required)
     * @param body
     *            (optional)
     * @param programArgs
     *            Deprecated, please use &#x27;programArg&#x27; instead. String
     *            value that specifies the arguments for the program or plan
     *            (optional)
     * @param programArg
     *            Comma-separated list of program arguments. (optional)
     * @param entryClass
     *            String value that specifies the fully qualified name of the
     *            entry point class. Overrides the class defined in the jar file
     *            manifest. (optional)
     * @param parallelism
     *            Positive integer value that specifies the desired parallelism
     *            for the job. (optional)
     * @return JobPlanInfo
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public JobPlanInfo jarsJaridPlanPost(
            String jarid,
            JarPlanRequestBody body,
            String programArgs,
            String programArg,
            String entryClass,
            Integer parallelism) throws ApiException {
        ApiResponse<JobPlanInfo> resp = jarsJaridPlanPostWithHttpInfo(jarid, body, programArgs, programArg, entryClass,
                parallelism);
        return resp.getData();
    }

    /**
     * 
     * Returns the dataflow plan of a job contained in a jar previously uploaded
     * via &#x27;/jars/upload&#x27;. Program arguments can be passed both via
     * the JSON request (recommended) or query parameters.
     * 
     * @param jarid
     *            String value that identifies a jar. When uploading the jar a
     *            path is returned, where the filename is the ID. This value is
     *            equivalent to the &#x60;id&#x60; field in the list of uploaded
     *            jars (/jars). (required)
     * @param body
     *            (optional)
     * @param programArgs
     *            Deprecated, please use &#x27;programArg&#x27; instead. String
     *            value that specifies the arguments for the program or plan
     *            (optional)
     * @param programArg
     *            Comma-separated list of program arguments. (optional)
     * @param entryClass
     *            String value that specifies the fully qualified name of the
     *            entry point class. Overrides the class defined in the jar file
     *            manifest. (optional)
     * @param parallelism
     *            Positive integer value that specifies the desired parallelism
     *            for the job. (optional)
     * @return ApiResponse&lt;JobPlanInfo&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<JobPlanInfo> jarsJaridPlanPostWithHttpInfo(
            String jarid,
            JarPlanRequestBody body,
            String programArgs,
            String programArg,
            String entryClass,
            Integer parallelism) throws ApiException {
        com.squareup.okhttp.Call call = jarsJaridPlanPostValidateBeforeCall(jarid, body, programArgs, programArg, entryClass,
                parallelism, null, null);
        Type localVarReturnType = new TypeToken<JobPlanInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns the dataflow plan of a job contained in a jar
     * previously uploaded via &#x27;/jars/upload&#x27;. Program arguments can
     * be passed both via the JSON request (recommended) or query parameters.
     * 
     * @param jarid
     *            String value that identifies a jar. When uploading the jar a
     *            path is returned, where the filename is the ID. This value is
     *            equivalent to the &#x60;id&#x60; field in the list of uploaded
     *            jars (/jars). (required)
     * @param body
     *            (optional)
     * @param programArgs
     *            Deprecated, please use &#x27;programArg&#x27; instead. String
     *            value that specifies the arguments for the program or plan
     *            (optional)
     * @param programArg
     *            Comma-separated list of program arguments. (optional)
     * @param entryClass
     *            String value that specifies the fully qualified name of the
     *            entry point class. Overrides the class defined in the jar file
     *            manifest. (optional)
     * @param parallelism
     *            Positive integer value that specifies the desired parallelism
     *            for the job. (optional)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jarsJaridPlanPostAsync(
            String jarid,
            JarPlanRequestBody body,
            String programArgs,
            String programArg,
            String entryClass,
            Integer parallelism,
            final ApiCallback<JobPlanInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jarsJaridPlanPostValidateBeforeCall(jarid, body, programArgs, programArg, entryClass,
                parallelism, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobPlanInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jarsJaridRunPost
     * 
     * @param jarid
     *            String value that identifies a jar. When uploading the jar a
     *            path is returned, where the filename is the ID. This value is
     *            equivalent to the &#x60;id&#x60; field in the list of uploaded
     *            jars (/jars). (required)
     * @param body
     *            (optional)
     * @param allowNonRestoredState
     *            Boolean value that specifies whether the job submission should
     *            be rejected if the savepoint contains state that cannot be
     *            mapped back to the job. (optional)
     * @param savepointPath
     *            String value that specifies the path of the savepoint to
     *            restore the job from. (optional)
     * @param programArgs
     *            Deprecated, please use &#x27;programArg&#x27; instead. String
     *            value that specifies the arguments for the program or plan
     *            (optional)
     * @param programArg
     *            Comma-separated list of program arguments. (optional)
     * @param entryClass
     *            String value that specifies the fully qualified name of the
     *            entry point class. Overrides the class defined in the jar file
     *            manifest. (optional)
     * @param parallelism
     *            Positive integer value that specifies the desired parallelism
     *            for the job. (optional)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jarsJaridRunPostCall(
            String jarid,
            JarRunRequestBody body,
            Boolean allowNonRestoredState,
            String savepointPath,
            String programArgs,
            String programArg,
            String entryClass,
            Integer parallelism,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/jars/{jarid}/run".replaceAll("\\{" + "jarid" + "\\}", apiClient.escapeString(jarid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (allowNonRestoredState != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("allowNonRestoredState", allowNonRestoredState));
        if (savepointPath != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("savepointPath", savepointPath));
        if (programArgs != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("program-args", programArgs));
        if (programArg != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("programArg", programArg));
        if (entryClass != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("entry-class", entryClass));
        if (parallelism != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("parallelism", parallelism));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = { "application/json" };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jarsJaridRunPostValidateBeforeCall(
            String jarid,
            JarRunRequestBody body,
            Boolean allowNonRestoredState,
            String savepointPath,
            String programArgs,
            String programArg,
            String entryClass,
            Integer parallelism,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jarid' is set
        if (jarid == null) {
            throw new ApiException("Missing the required parameter 'jarid' when calling jarsJaridRunPost(Async)");
        }

        com.squareup.okhttp.Call call = jarsJaridRunPostCall(jarid, body, allowNonRestoredState, savepointPath, programArgs,
                programArg, entryClass, parallelism, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Submits a job by running a jar previously uploaded via
     * &#x27;/jars/upload&#x27;. Program arguments can be passed both via the
     * JSON request (recommended) or query parameters.
     * 
     * @param jarid
     *            String value that identifies a jar. When uploading the jar a
     *            path is returned, where the filename is the ID. This value is
     *            equivalent to the &#x60;id&#x60; field in the list of uploaded
     *            jars (/jars). (required)
     * @param body
     *            (optional)
     * @param allowNonRestoredState
     *            Boolean value that specifies whether the job submission should
     *            be rejected if the savepoint contains state that cannot be
     *            mapped back to the job. (optional)
     * @param savepointPath
     *            String value that specifies the path of the savepoint to
     *            restore the job from. (optional)
     * @param programArgs
     *            Deprecated, please use &#x27;programArg&#x27; instead. String
     *            value that specifies the arguments for the program or plan
     *            (optional)
     * @param programArg
     *            Comma-separated list of program arguments. (optional)
     * @param entryClass
     *            String value that specifies the fully qualified name of the
     *            entry point class. Overrides the class defined in the jar file
     *            manifest. (optional)
     * @param parallelism
     *            Positive integer value that specifies the desired parallelism
     *            for the job. (optional)
     * @return JarRunResponseBody
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public JarRunResponseBody jarsJaridRunPost(
            String jarid,
            JarRunRequestBody body,
            Boolean allowNonRestoredState,
            String savepointPath,
            String programArgs,
            String programArg,
            String entryClass,
            Integer parallelism) throws ApiException {
        ApiResponse<JarRunResponseBody> resp = jarsJaridRunPostWithHttpInfo(jarid, body, allowNonRestoredState, savepointPath,
                programArgs, programArg, entryClass, parallelism);
        return resp.getData();
    }

    /**
     * 
     * Submits a job by running a jar previously uploaded via
     * &#x27;/jars/upload&#x27;. Program arguments can be passed both via the
     * JSON request (recommended) or query parameters.
     * 
     * @param jarid
     *            String value that identifies a jar. When uploading the jar a
     *            path is returned, where the filename is the ID. This value is
     *            equivalent to the &#x60;id&#x60; field in the list of uploaded
     *            jars (/jars). (required)
     * @param body
     *            (optional)
     * @param allowNonRestoredState
     *            Boolean value that specifies whether the job submission should
     *            be rejected if the savepoint contains state that cannot be
     *            mapped back to the job. (optional)
     * @param savepointPath
     *            String value that specifies the path of the savepoint to
     *            restore the job from. (optional)
     * @param programArgs
     *            Deprecated, please use &#x27;programArg&#x27; instead. String
     *            value that specifies the arguments for the program or plan
     *            (optional)
     * @param programArg
     *            Comma-separated list of program arguments. (optional)
     * @param entryClass
     *            String value that specifies the fully qualified name of the
     *            entry point class. Overrides the class defined in the jar file
     *            manifest. (optional)
     * @param parallelism
     *            Positive integer value that specifies the desired parallelism
     *            for the job. (optional)
     * @return ApiResponse&lt;JarRunResponseBody&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<JarRunResponseBody> jarsJaridRunPostWithHttpInfo(
            String jarid,
            JarRunRequestBody body,
            Boolean allowNonRestoredState,
            String savepointPath,
            String programArgs,
            String programArg,
            String entryClass,
            Integer parallelism) throws ApiException {
        com.squareup.okhttp.Call call = jarsJaridRunPostValidateBeforeCall(jarid, body, allowNonRestoredState, savepointPath,
                programArgs, programArg, entryClass, parallelism, null, null);
        Type localVarReturnType = new TypeToken<JarRunResponseBody>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Submits a job by running a jar previously uploaded via
     * &#x27;/jars/upload&#x27;. Program arguments can be passed both via the
     * JSON request (recommended) or query parameters.
     * 
     * @param jarid
     *            String value that identifies a jar. When uploading the jar a
     *            path is returned, where the filename is the ID. This value is
     *            equivalent to the &#x60;id&#x60; field in the list of uploaded
     *            jars (/jars). (required)
     * @param body
     *            (optional)
     * @param allowNonRestoredState
     *            Boolean value that specifies whether the job submission should
     *            be rejected if the savepoint contains state that cannot be
     *            mapped back to the job. (optional)
     * @param savepointPath
     *            String value that specifies the path of the savepoint to
     *            restore the job from. (optional)
     * @param programArgs
     *            Deprecated, please use &#x27;programArg&#x27; instead. String
     *            value that specifies the arguments for the program or plan
     *            (optional)
     * @param programArg
     *            Comma-separated list of program arguments. (optional)
     * @param entryClass
     *            String value that specifies the fully qualified name of the
     *            entry point class. Overrides the class defined in the jar file
     *            manifest. (optional)
     * @param parallelism
     *            Positive integer value that specifies the desired parallelism
     *            for the job. (optional)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jarsJaridRunPostAsync(
            String jarid,
            JarRunRequestBody body,
            Boolean allowNonRestoredState,
            String savepointPath,
            String programArgs,
            String programArg,
            String entryClass,
            Integer parallelism,
            final ApiCallback<JarRunResponseBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jarsJaridRunPostValidateBeforeCall(jarid, body, allowNonRestoredState, savepointPath,
                programArgs, programArg, entryClass, parallelism, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JarRunResponseBody>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jarsUploadPost
     * 
     * @param body
     *            (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jarsUploadPostCall(
            Object body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/jars/upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        // [BEGIN] Fix bug for upload bad request
        localVarFormParams.put("file", localVarPostBody);
        // [END]

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        // final String[] localVarContentTypes = { "application/x-java-archive"
        // };
        // final String localVarContentType =
        // apiClient.selectHeaderContentType(localVarContentTypes);
        // [BEGIN] Fix bug for upload bad request
        localVarHeaderParams.put("Content-Type", "multipart/form-data");
        // [END]

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jarsUploadPostValidateBeforeCall(
            Object body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling jarsUploadPost(Async)");
        }

        com.squareup.okhttp.Call call = jarsUploadPostCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Uploads a jar to the cluster. The jar must be sent as multi-part data.
     * Make sure that the \&quot;Content-Type\&quot; header is set to
     * \&quot;application/x-java-archive\&quot;, as some http libraries do not
     * add the header by default. Using &#x27;curl&#x27; you can upload a jar
     * via &#x27;curl -X POST -H \&quot;Expect:\&quot; -F
     * \&quot;jarfile&#x3D;@path/to/flink-job.jar\&quot;
     * http://hostname:port/jars/upload&#x27;.
     * 
     * @param body
     *            (required)
     * @return JarUploadResponseBody
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public JarUploadResponseBody jarsUploadPost(Object body) throws ApiException {
        ApiResponse<JarUploadResponseBody> resp = jarsUploadPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * Uploads a jar to the cluster. The jar must be sent as multi-part data.
     * Make sure that the \&quot;Content-Type\&quot; header is set to
     * \&quot;application/x-java-archive\&quot;, as some http libraries do not
     * add the header by default. Using &#x27;curl&#x27; you can upload a jar
     * via &#x27;curl -X POST -H \&quot;Expect:\&quot; -F
     * \&quot;jarfile&#x3D;@path/to/flink-job.jar\&quot;
     * http://hostname:port/jars/upload&#x27;.
     * 
     * @param body
     *            (required)
     * @return ApiResponse&lt;JarUploadResponseBody&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<JarUploadResponseBody> jarsUploadPostWithHttpInfo(Object body) throws ApiException {
        com.squareup.okhttp.Call call = jarsUploadPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<JarUploadResponseBody>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Uploads a jar to the cluster. The jar must be sent as
     * multi-part data. Make sure that the \&quot;Content-Type\&quot; header is
     * set to \&quot;application/x-java-archive\&quot;, as some http libraries
     * do not add the header by default. Using &#x27;curl&#x27; you can upload a
     * jar via &#x27;curl -X POST -H \&quot;Expect:\&quot; -F
     * \&quot;jarfile&#x3D;@path/to/flink-job.jar\&quot;
     * http://hostname:port/jars/upload&#x27;.
     * 
     * @param body
     *            (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jarsUploadPostAsync(Object body, final ApiCallback<JarUploadResponseBody> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jarsUploadPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JarUploadResponseBody>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobmanagerConfigGet
     * 
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobmanagerConfigGetCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobmanager/config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobmanagerConfigGetValidateBeforeCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        com.squareup.okhttp.Call call = jobmanagerConfigGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the cluster configuration.
     * 
     * @return List&lt;ClusterConfigurationInfoEntry&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public List<ClusterConfigurationInfoEntry> jobmanagerConfigGet() throws ApiException {
        ApiResponse<List<ClusterConfigurationInfoEntry>> resp = jobmanagerConfigGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Returns the cluster configuration.
     * 
     * @return ApiResponse&lt;List&lt;ClusterConfigurationInfoEntry&gt;&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<List<ClusterConfigurationInfoEntry>> jobmanagerConfigGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = jobmanagerConfigGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<ClusterConfigurationInfoEntry>>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns the cluster configuration.
     * 
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobmanagerConfigGetAsync(final ApiCallback<List<ClusterConfigurationInfoEntry>> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobmanagerConfigGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ClusterConfigurationInfoEntry>>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobmanagerLogsGet
     * 
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobmanagerLogsGetCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobmanager/logs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobmanagerLogsGetValidateBeforeCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        com.squareup.okhttp.Call call = jobmanagerLogsGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the list of log files on the JobManager.
     * 
     * @return LogListInfo
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public LogListInfo jobmanagerLogsGet() throws ApiException {
        ApiResponse<LogListInfo> resp = jobmanagerLogsGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Returns the list of log files on the JobManager.
     * 
     * @return ApiResponse&lt;LogListInfo&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<LogListInfo> jobmanagerLogsGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = jobmanagerLogsGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<LogListInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns the list of log files on the JobManager.
     * 
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobmanagerLogsGetAsync(final ApiCallback<LogListInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobmanagerLogsGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LogListInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobmanagerMetricsGet
     * 
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobmanagerMetricsGetCall(
            String get,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobmanager/metrics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (get != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("get", get));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobmanagerMetricsGetValidateBeforeCall(
            String get,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        com.squareup.okhttp.Call call = jobmanagerMetricsGetCall(get, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Provides access to job manager metrics.
     * 
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @return MetricCollectionResponseBody
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public MetricCollectionResponseBody jobmanagerMetricsGet(String get) throws ApiException {
        ApiResponse<MetricCollectionResponseBody> resp = jobmanagerMetricsGetWithHttpInfo(get);
        return resp.getData();
    }

    /**
     * 
     * Provides access to job manager metrics.
     * 
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @return ApiResponse&lt;MetricCollectionResponseBody&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<MetricCollectionResponseBody> jobmanagerMetricsGetWithHttpInfo(String get) throws ApiException {
        com.squareup.okhttp.Call call = jobmanagerMetricsGetValidateBeforeCall(get, null, null);
        Type localVarReturnType = new TypeToken<MetricCollectionResponseBody>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Provides access to job manager metrics.
     * 
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobmanagerMetricsGetAsync(
            String get,
            final ApiCallback<MetricCollectionResponseBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobmanagerMetricsGetValidateBeforeCall(get, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MetricCollectionResponseBody>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobmanagerThreadDumpGet
     * 
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobmanagerThreadDumpGetCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobmanager/thread-dump";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobmanagerThreadDumpGetValidateBeforeCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        com.squareup.okhttp.Call call = jobmanagerThreadDumpGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the thread dump of the JobManager.
     * 
     * @return ThreadDumpInfo
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ThreadDumpInfo jobmanagerThreadDumpGet() throws ApiException {
        ApiResponse<ThreadDumpInfo> resp = jobmanagerThreadDumpGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Returns the thread dump of the JobManager.
     * 
     * @return ApiResponse&lt;ThreadDumpInfo&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<ThreadDumpInfo> jobmanagerThreadDumpGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = jobmanagerThreadDumpGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ThreadDumpInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns the thread dump of the JobManager.
     * 
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobmanagerThreadDumpGetAsync(final ApiCallback<ThreadDumpInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobmanagerThreadDumpGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ThreadDumpInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsGet
     * 
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsGetCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsGetValidateBeforeCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        com.squareup.okhttp.Call call = jobsGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns an overview over all jobs and their current state.
     * 
     * @return JobIdsWithStatusOverview
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public JobIdsWithStatusOverview jobsGet() throws ApiException {
        ApiResponse<JobIdsWithStatusOverview> resp = jobsGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Returns an overview over all jobs and their current state.
     * 
     * @return ApiResponse&lt;JobIdsWithStatusOverview&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<JobIdsWithStatusOverview> jobsGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = jobsGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<JobIdsWithStatusOverview>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns an overview over all jobs and their current
     * state.
     * 
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsGetAsync(final ApiCallback<JobIdsWithStatusOverview> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobIdsWithStatusOverview>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidAccumulatorsGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param includeSerializedValue
     *            Boolean value that specifies whether serialized user task
     *            accumulators should be included in the response. (optional)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidAccumulatorsGetCall(
            String jobid,
            Boolean includeSerializedValue,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/accumulators".replaceAll("\\{" + "jobid" + "\\}",
                apiClient.escapeString(jobid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeSerializedValue != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("includeSerializedValue", includeSerializedValue));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidAccumulatorsGetValidateBeforeCall(
            String jobid,
            Boolean includeSerializedValue,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling jobsJobidAccumulatorsGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidAccumulatorsGetCall(jobid, includeSerializedValue, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the accumulators for all tasks of a job, aggregated across the
     * respective subtasks.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param includeSerializedValue
     *            Boolean value that specifies whether serialized user task
     *            accumulators should be included in the response. (optional)
     * @return JobAccumulatorsInfo
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public JobAccumulatorsInfo jobsJobidAccumulatorsGet(String jobid, Boolean includeSerializedValue) throws ApiException {
        ApiResponse<JobAccumulatorsInfo> resp = jobsJobidAccumulatorsGetWithHttpInfo(jobid, includeSerializedValue);
        return resp.getData();
    }

    /**
     * 
     * Returns the accumulators for all tasks of a job, aggregated across the
     * respective subtasks.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param includeSerializedValue
     *            Boolean value that specifies whether serialized user task
     *            accumulators should be included in the response. (optional)
     * @return ApiResponse&lt;JobAccumulatorsInfo&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<JobAccumulatorsInfo> jobsJobidAccumulatorsGetWithHttpInfo(String jobid, Boolean includeSerializedValue)
            throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidAccumulatorsGetValidateBeforeCall(jobid, includeSerializedValue, null, null);
        Type localVarReturnType = new TypeToken<JobAccumulatorsInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns the accumulators for all tasks of a job,
     * aggregated across the respective subtasks.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param includeSerializedValue
     *            Boolean value that specifies whether serialized user task
     *            accumulators should be included in the response. (optional)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidAccumulatorsGetAsync(
            String jobid,
            Boolean includeSerializedValue,
            final ApiCallback<JobAccumulatorsInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidAccumulatorsGetValidateBeforeCall(jobid, includeSerializedValue,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobAccumulatorsInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidCheckpointsConfigGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidCheckpointsConfigGetCall(
            String jobid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/checkpoints/config".replaceAll("\\{" + "jobid" + "\\}",
                apiClient.escapeString(jobid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidCheckpointsConfigGetValidateBeforeCall(
            String jobid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling jobsJobidCheckpointsConfigGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidCheckpointsConfigGetCall(jobid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the checkpointing configuration.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @return CheckpointConfigInfo
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public CheckpointConfigInfo jobsJobidCheckpointsConfigGet(String jobid) throws ApiException {
        ApiResponse<CheckpointConfigInfo> resp = jobsJobidCheckpointsConfigGetWithHttpInfo(jobid);
        return resp.getData();
    }

    /**
     * 
     * Returns the checkpointing configuration.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @return ApiResponse&lt;CheckpointConfigInfo&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<CheckpointConfigInfo> jobsJobidCheckpointsConfigGetWithHttpInfo(String jobid) throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidCheckpointsConfigGetValidateBeforeCall(jobid, null, null);
        Type localVarReturnType = new TypeToken<CheckpointConfigInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns the checkpointing configuration.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidCheckpointsConfigGetAsync(
            String jobid,
            final ApiCallback<CheckpointConfigInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidCheckpointsConfigGetValidateBeforeCall(jobid, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<CheckpointConfigInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidCheckpointsDetailsCheckpointidGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param checkpointid
     *            Long value that identifies a checkpoint. (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidCheckpointsDetailsCheckpointidGetCall(
            String jobid,
            Long checkpointid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/checkpoints/details/{checkpointid}"
                .replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()))
                .replaceAll("\\{" + "checkpointid" + "\\}", apiClient.escapeString(checkpointid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidCheckpointsDetailsCheckpointidGetValidateBeforeCall(
            String jobid,
            Long checkpointid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException(
                    "Missing the required parameter 'jobid' when calling jobsJobidCheckpointsDetailsCheckpointidGet(Async)");
        }
        // verify the required parameter 'checkpointid' is set
        if (checkpointid == null) {
            throw new ApiException(
                    "Missing the required parameter 'checkpointid' when calling jobsJobidCheckpointsDetailsCheckpointidGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidCheckpointsDetailsCheckpointidGetCall(jobid, checkpointid, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns details for a checkpoint.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param checkpointid
     *            Long value that identifies a checkpoint. (required)
     * @return CheckpointStatistics
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public CheckpointStatistics jobsJobidCheckpointsDetailsCheckpointidGet(String jobid, Long checkpointid) throws ApiException {
        ApiResponse<CheckpointStatistics> resp = jobsJobidCheckpointsDetailsCheckpointidGetWithHttpInfo(jobid, checkpointid);
        return resp.getData();
    }

    /**
     * 
     * Returns details for a checkpoint.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param checkpointid
     *            Long value that identifies a checkpoint. (required)
     * @return ApiResponse&lt;CheckpointStatistics&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<CheckpointStatistics> jobsJobidCheckpointsDetailsCheckpointidGetWithHttpInfo(
            String jobid,
            Long checkpointid) throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidCheckpointsDetailsCheckpointidGetValidateBeforeCall(jobid, checkpointid, null,
                null);
        Type localVarReturnType = new TypeToken<CheckpointStatistics>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns details for a checkpoint.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param checkpointid
     *            Long value that identifies a checkpoint. (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidCheckpointsDetailsCheckpointidGetAsync(
            String jobid,
            Long checkpointid,
            final ApiCallback<CheckpointStatistics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidCheckpointsDetailsCheckpointidGetValidateBeforeCall(jobid, checkpointid,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CheckpointStatistics>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidCheckpointsDetailsCheckpointidSubtasksVertexidGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param checkpointid
     *            Long value that identifies a checkpoint. (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidCheckpointsDetailsCheckpointidSubtasksVertexidGetCall(
            String jobid,
            Long checkpointid,
            String vertexid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/checkpoints/details/{checkpointid}/subtasks/{vertexid}"
                .replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()))
                .replaceAll("\\{" + "checkpointid" + "\\}", apiClient.escapeString(checkpointid.toString()))
                .replaceAll("\\{" + "vertexid" + "\\}", apiClient.escapeString(vertexid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidCheckpointsDetailsCheckpointidSubtasksVertexidGetValidateBeforeCall(
            String jobid,
            Long checkpointid,
            String vertexid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException(
                    "Missing the required parameter 'jobid' when calling jobsJobidCheckpointsDetailsCheckpointidSubtasksVertexidGet(Async)");
        }
        // verify the required parameter 'checkpointid' is set
        if (checkpointid == null) {
            throw new ApiException(
                    "Missing the required parameter 'checkpointid' when calling jobsJobidCheckpointsDetailsCheckpointidSubtasksVertexidGet(Async)");
        }
        // verify the required parameter 'vertexid' is set
        if (vertexid == null) {
            throw new ApiException(
                    "Missing the required parameter 'vertexid' when calling jobsJobidCheckpointsDetailsCheckpointidSubtasksVertexidGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidCheckpointsDetailsCheckpointidSubtasksVertexidGetCall(jobid, checkpointid,
                vertexid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns checkpoint statistics for a task and its subtasks.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param checkpointid
     *            Long value that identifies a checkpoint. (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @return TaskCheckpointStatisticsWithSubtaskDetails
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public TaskCheckpointStatisticsWithSubtaskDetails jobsJobidCheckpointsDetailsCheckpointidSubtasksVertexidGet(
            String jobid,
            Long checkpointid,
            String vertexid) throws ApiException {
        ApiResponse<TaskCheckpointStatisticsWithSubtaskDetails> resp = jobsJobidCheckpointsDetailsCheckpointidSubtasksVertexidGetWithHttpInfo(
                jobid, checkpointid, vertexid);
        return resp.getData();
    }

    /**
     * 
     * Returns checkpoint statistics for a task and its subtasks.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param checkpointid
     *            Long value that identifies a checkpoint. (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @return ApiResponse&lt;TaskCheckpointStatisticsWithSubtaskDetails&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<TaskCheckpointStatisticsWithSubtaskDetails> jobsJobidCheckpointsDetailsCheckpointidSubtasksVertexidGetWithHttpInfo(
            String jobid,
            Long checkpointid,
            String vertexid) throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidCheckpointsDetailsCheckpointidSubtasksVertexidGetValidateBeforeCall(jobid,
                checkpointid, vertexid, null, null);
        Type localVarReturnType = new TypeToken<TaskCheckpointStatisticsWithSubtaskDetails>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns checkpoint statistics for a task and its
     * subtasks.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param checkpointid
     *            Long value that identifies a checkpoint. (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidCheckpointsDetailsCheckpointidSubtasksVertexidGetAsync(
            String jobid,
            Long checkpointid,
            String vertexid,
            final ApiCallback<TaskCheckpointStatisticsWithSubtaskDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidCheckpointsDetailsCheckpointidSubtasksVertexidGetValidateBeforeCall(jobid,
                checkpointid, vertexid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskCheckpointStatisticsWithSubtaskDetails>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidCheckpointsGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidCheckpointsGetCall(
            String jobid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/checkpoints".replaceAll("\\{" + "jobid" + "\\}",
                apiClient.escapeString(jobid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidCheckpointsGetValidateBeforeCall(
            String jobid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling jobsJobidCheckpointsGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidCheckpointsGetCall(jobid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns checkpointing statistics for a job.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @return CheckpointingStatistics
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public CheckpointingStatistics jobsJobidCheckpointsGet(String jobid) throws ApiException {
        ApiResponse<CheckpointingStatistics> resp = jobsJobidCheckpointsGetWithHttpInfo(jobid);
        return resp.getData();
    }

    /**
     * 
     * Returns checkpointing statistics for a job.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @return ApiResponse&lt;CheckpointingStatistics&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<CheckpointingStatistics> jobsJobidCheckpointsGetWithHttpInfo(String jobid) throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidCheckpointsGetValidateBeforeCall(jobid, null, null);
        Type localVarReturnType = new TypeToken<CheckpointingStatistics>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns checkpointing statistics for a job.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidCheckpointsGetAsync(
            String jobid,
            final ApiCallback<CheckpointingStatistics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidCheckpointsGetValidateBeforeCall(jobid, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<CheckpointingStatistics>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidConfigGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidConfigGetCall(
            String jobid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/config".replaceAll("\\{" + "jobid" + "\\}",
                apiClient.escapeString(jobid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidConfigGetValidateBeforeCall(
            String jobid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling jobsJobidConfigGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidConfigGetCall(jobid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the configuration of a job.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @return JobConfigInfo
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public JobConfigInfo jobsJobidConfigGet(String jobid) throws ApiException {
        ApiResponse<JobConfigInfo> resp = jobsJobidConfigGetWithHttpInfo(jobid);
        return resp.getData();
    }

    /**
     * 
     * Returns the configuration of a job.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @return ApiResponse&lt;JobConfigInfo&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<JobConfigInfo> jobsJobidConfigGetWithHttpInfo(String jobid) throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidConfigGetValidateBeforeCall(jobid, null, null);
        Type localVarReturnType = new TypeToken<JobConfigInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns the configuration of a job.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidConfigGetAsync(String jobid, final ApiCallback<JobConfigInfo> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidConfigGetValidateBeforeCall(jobid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobConfigInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidExceptionsGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param maxExceptions
     *            Comma-separated list of integer values that specifies the
     *            upper limit of exceptions to return. (optional)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidExceptionsGetCall(
            String jobid,
            Integer maxExceptions,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/exceptions".replaceAll("\\{" + "jobid" + "\\}",
                apiClient.escapeString(jobid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (maxExceptions != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("maxExceptions", maxExceptions));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidExceptionsGetValidateBeforeCall(
            String jobid,
            Integer maxExceptions,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling jobsJobidExceptionsGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidExceptionsGetCall(jobid, maxExceptions, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the most recent exceptions that have been handled by Flink for
     * this job. The &#x27;exceptionHistory.truncated&#x27; flag defines whether
     * exceptions were filtered out through the GET parameter. The backend
     * collects only a specific amount of most recent exceptions per job. This
     * can be configured through web.exception-history-size in the Flink
     * configuration. The following first-level members are deprecated:
     * &#x27;root-exception&#x27;, &#x27;timestamp&#x27;,
     * &#x27;all-exceptions&#x27;, and &#x27;truncated&#x27;. Use the data
     * provided through &#x27;exceptionHistory&#x27;, instead.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param maxExceptions
     *            Comma-separated list of integer values that specifies the
     *            upper limit of exceptions to return. (optional)
     * @return JobExceptionsInfoWithHistory
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public JobExceptionsInfoWithHistory jobsJobidExceptionsGet(String jobid, Integer maxExceptions) throws ApiException {
        ApiResponse<JobExceptionsInfoWithHistory> resp = jobsJobidExceptionsGetWithHttpInfo(jobid, maxExceptions);
        return resp.getData();
    }

    /**
     * 
     * Returns the most recent exceptions that have been handled by Flink for
     * this job. The &#x27;exceptionHistory.truncated&#x27; flag defines whether
     * exceptions were filtered out through the GET parameter. The backend
     * collects only a specific amount of most recent exceptions per job. This
     * can be configured through web.exception-history-size in the Flink
     * configuration. The following first-level members are deprecated:
     * &#x27;root-exception&#x27;, &#x27;timestamp&#x27;,
     * &#x27;all-exceptions&#x27;, and &#x27;truncated&#x27;. Use the data
     * provided through &#x27;exceptionHistory&#x27;, instead.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param maxExceptions
     *            Comma-separated list of integer values that specifies the
     *            upper limit of exceptions to return. (optional)
     * @return ApiResponse&lt;JobExceptionsInfoWithHistory&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<JobExceptionsInfoWithHistory> jobsJobidExceptionsGetWithHttpInfo(String jobid, Integer maxExceptions)
            throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidExceptionsGetValidateBeforeCall(jobid, maxExceptions, null, null);
        Type localVarReturnType = new TypeToken<JobExceptionsInfoWithHistory>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns the most recent exceptions that have been
     * handled by Flink for this job. The &#x27;exceptionHistory.truncated&#x27;
     * flag defines whether exceptions were filtered out through the GET
     * parameter. The backend collects only a specific amount of most recent
     * exceptions per job. This can be configured through
     * web.exception-history-size in the Flink configuration. The following
     * first-level members are deprecated: &#x27;root-exception&#x27;,
     * &#x27;timestamp&#x27;, &#x27;all-exceptions&#x27;, and
     * &#x27;truncated&#x27;. Use the data provided through
     * &#x27;exceptionHistory&#x27;, instead.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param maxExceptions
     *            Comma-separated list of integer values that specifies the
     *            upper limit of exceptions to return. (optional)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidExceptionsGetAsync(
            String jobid,
            Integer maxExceptions,
            final ApiCallback<JobExceptionsInfoWithHistory> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidExceptionsGetValidateBeforeCall(jobid, maxExceptions, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<JobExceptionsInfoWithHistory>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidExecutionResultGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidExecutionResultGetCall(
            String jobid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/execution-result".replaceAll("\\{" + "jobid" + "\\}",
                apiClient.escapeString(jobid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidExecutionResultGetValidateBeforeCall(
            String jobid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling jobsJobidExecutionResultGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidExecutionResultGetCall(jobid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the result of a job execution. Gives access to the execution time
     * of the job and to all accumulators created by this job.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @return JobExecutionResultResponseBody
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public JobExecutionResultResponseBody jobsJobidExecutionResultGet(String jobid) throws ApiException {
        ApiResponse<JobExecutionResultResponseBody> resp = jobsJobidExecutionResultGetWithHttpInfo(jobid);
        return resp.getData();
    }

    /**
     * 
     * Returns the result of a job execution. Gives access to the execution time
     * of the job and to all accumulators created by this job.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @return ApiResponse&lt;JobExecutionResultResponseBody&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<JobExecutionResultResponseBody> jobsJobidExecutionResultGetWithHttpInfo(String jobid) throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidExecutionResultGetValidateBeforeCall(jobid, null, null);
        Type localVarReturnType = new TypeToken<JobExecutionResultResponseBody>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns the result of a job execution. Gives access to
     * the execution time of the job and to all accumulators created by this
     * job.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidExecutionResultGetAsync(
            String jobid,
            final ApiCallback<JobExecutionResultResponseBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidExecutionResultGetValidateBeforeCall(jobid, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<JobExecutionResultResponseBody>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidGetCall(
            String jobid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}".replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidGetValidateBeforeCall(
            String jobid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling jobsJobidGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidGetCall(jobid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns details of a job.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @return JobDetailsInfo
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public JobDetailsInfo jobsJobidGet(String jobid) throws ApiException {
        ApiResponse<JobDetailsInfo> resp = jobsJobidGetWithHttpInfo(jobid);
        return resp.getData();
    }

    /**
     * 
     * Returns details of a job.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @return ApiResponse&lt;JobDetailsInfo&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<JobDetailsInfo> jobsJobidGetWithHttpInfo(String jobid) throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidGetValidateBeforeCall(jobid, null, null);
        Type localVarReturnType = new TypeToken<JobDetailsInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns details of a job.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidGetAsync(String jobid, final ApiCallback<JobDetailsInfo> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidGetValidateBeforeCall(jobid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobDetailsInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidMetricsGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidMetricsGetCall(
            String jobid,
            String get,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/metrics".replaceAll("\\{" + "jobid" + "\\}",
                apiClient.escapeString(jobid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (get != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("get", get));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidMetricsGetValidateBeforeCall(
            String jobid,
            String get,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling jobsJobidMetricsGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidMetricsGetCall(jobid, get, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Provides access to job metrics.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @return MetricCollectionResponseBody
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public MetricCollectionResponseBody jobsJobidMetricsGet(String jobid, String get) throws ApiException {
        ApiResponse<MetricCollectionResponseBody> resp = jobsJobidMetricsGetWithHttpInfo(jobid, get);
        return resp.getData();
    }

    /**
     * 
     * Provides access to job metrics.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @return ApiResponse&lt;MetricCollectionResponseBody&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<MetricCollectionResponseBody> jobsJobidMetricsGetWithHttpInfo(String jobid, String get)
            throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidMetricsGetValidateBeforeCall(jobid, get, null, null);
        Type localVarReturnType = new TypeToken<MetricCollectionResponseBody>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Provides access to job metrics.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidMetricsGetAsync(
            String jobid,
            String get,
            final ApiCallback<MetricCollectionResponseBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidMetricsGetValidateBeforeCall(jobid, get, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<MetricCollectionResponseBody>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidPatch
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param mode
     *            String value that specifies the termination mode. The only
     *            supported value is: \&quot;cancel\&quot;. (optional)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidPatchCall(
            String jobid,
            String mode,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}".replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (mode != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("mode", mode));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {

        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidPatchValidateBeforeCall(
            String jobid,
            String mode,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling jobsJobidPatch(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidPatchCall(jobid, mode, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Terminates a job.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param mode
     *            String value that specifies the termination mode. The only
     *            supported value is: \&quot;cancel\&quot;. (optional)
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public void jobsJobidPatch(String jobid, String mode) throws ApiException {
        jobsJobidPatchWithHttpInfo(jobid, mode);
    }

    /**
     * 
     * Terminates a job.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param mode
     *            String value that specifies the termination mode. The only
     *            supported value is: \&quot;cancel\&quot;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<Void> jobsJobidPatchWithHttpInfo(String jobid, String mode) throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidPatchValidateBeforeCall(jobid, mode, null, null);
        return apiClient.execute(call);
    }

    /**
     * (asynchronously) Terminates a job.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param mode
     *            String value that specifies the termination mode. The only
     *            supported value is: \&quot;cancel\&quot;. (optional)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidPatchAsync(String jobid, String mode, final ApiCallback<Void> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidPatchValidateBeforeCall(jobid, mode, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }

    /**
     * Build call for jobsJobidPlanGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidPlanGetCall(
            String jobid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/plan".replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidPlanGetValidateBeforeCall(
            String jobid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling jobsJobidPlanGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidPlanGetCall(jobid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the dataflow plan of a job.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @return JobPlanInfo
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public JobPlanInfo jobsJobidPlanGet(String jobid) throws ApiException {
        ApiResponse<JobPlanInfo> resp = jobsJobidPlanGetWithHttpInfo(jobid);
        return resp.getData();
    }

    /**
     * 
     * Returns the dataflow plan of a job.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @return ApiResponse&lt;JobPlanInfo&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<JobPlanInfo> jobsJobidPlanGetWithHttpInfo(String jobid) throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidPlanGetValidateBeforeCall(jobid, null, null);
        Type localVarReturnType = new TypeToken<JobPlanInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns the dataflow plan of a job.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidPlanGetAsync(String jobid, final ApiCallback<JobPlanInfo> callback)
            throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidPlanGetValidateBeforeCall(jobid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobPlanInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidRescalingPatch
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param parallelism
     *            Positive integer value that specifies the desired parallelism.
     *            (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidRescalingPatchCall(
            String jobid,
            Integer parallelism,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/rescaling".replaceAll("\\{" + "jobid" + "\\}",
                apiClient.escapeString(jobid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (parallelism != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("parallelism", parallelism));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidRescalingPatchValidateBeforeCall(
            String jobid,
            Integer parallelism,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling jobsJobidRescalingPatch(Async)");
        }
        // verify the required parameter 'parallelism' is set
        if (parallelism == null) {
            throw new ApiException("Missing the required parameter 'parallelism' when calling jobsJobidRescalingPatch(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidRescalingPatchCall(jobid, parallelism, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * 
     * Triggers the rescaling of a job. This async operation would return a
     * &#x27;triggerid&#x27; for further query identifier.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param parallelism
     *            Positive integer value that specifies the desired parallelism.
     *            (required)
     * @return TriggerResponse
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public TriggerResponse jobsJobidRescalingPatch(String jobid, Integer parallelism) throws ApiException {
        ApiResponse<TriggerResponse> resp = jobsJobidRescalingPatchWithHttpInfo(jobid, parallelism);
        return resp.getData();
    }

    /**
     * 
     * Triggers the rescaling of a job. This async operation would return a
     * &#x27;triggerid&#x27; for further query identifier.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param parallelism
     *            Positive integer value that specifies the desired parallelism.
     *            (required)
     * @return ApiResponse&lt;TriggerResponse&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<TriggerResponse> jobsJobidRescalingPatchWithHttpInfo(String jobid, Integer parallelism)
            throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidRescalingPatchValidateBeforeCall(jobid, parallelism, null, null);
        Type localVarReturnType = new TypeToken<TriggerResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Triggers the rescaling of a job. This async operation
     * would return a &#x27;triggerid&#x27; for further query identifier.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param parallelism
     *            Positive integer value that specifies the desired parallelism.
     *            (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidRescalingPatchAsync(
            String jobid,
            Integer parallelism,
            final ApiCallback<TriggerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidRescalingPatchValidateBeforeCall(jobid, parallelism, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<TriggerResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidRescalingTriggeridGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param triggerid
     *            32-character hexadecimal string that identifies an
     *            asynchronous operation trigger ID. The ID was returned then
     *            the operation was triggered. (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidRescalingTriggeridGetCall(
            String jobid,
            String triggerid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/rescaling/{triggerid}"
                .replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()))
                .replaceAll("\\{" + "triggerid" + "\\}", apiClient.escapeString(triggerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidRescalingTriggeridGetValidateBeforeCall(
            String jobid,
            String triggerid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling jobsJobidRescalingTriggeridGet(Async)");
        }
        // verify the required parameter 'triggerid' is set
        if (triggerid == null) {
            throw new ApiException(
                    "Missing the required parameter 'triggerid' when calling jobsJobidRescalingTriggeridGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidRescalingTriggeridGetCall(jobid, triggerid, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the status of a rescaling operation.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param triggerid
     *            32-character hexadecimal string that identifies an
     *            asynchronous operation trigger ID. The ID was returned then
     *            the operation was triggered. (required)
     * @return AsynchronousOperationResult
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public AsynchronousOperationResult jobsJobidRescalingTriggeridGet(String jobid, String triggerid) throws ApiException {
        ApiResponse<AsynchronousOperationResult> resp = jobsJobidRescalingTriggeridGetWithHttpInfo(jobid, triggerid);
        return resp.getData();
    }

    /**
     * 
     * Returns the status of a rescaling operation.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param triggerid
     *            32-character hexadecimal string that identifies an
     *            asynchronous operation trigger ID. The ID was returned then
     *            the operation was triggered. (required)
     * @return ApiResponse&lt;AsynchronousOperationResult&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<AsynchronousOperationResult> jobsJobidRescalingTriggeridGetWithHttpInfo(String jobid, String triggerid)
            throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidRescalingTriggeridGetValidateBeforeCall(jobid, triggerid, null, null);
        Type localVarReturnType = new TypeToken<AsynchronousOperationResult>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns the status of a rescaling operation.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param triggerid
     *            32-character hexadecimal string that identifies an
     *            asynchronous operation trigger ID. The ID was returned then
     *            the operation was triggered. (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidRescalingTriggeridGetAsync(
            String jobid,
            String triggerid,
            final ApiCallback<AsynchronousOperationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidRescalingTriggeridGetValidateBeforeCall(jobid, triggerid, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<AsynchronousOperationResult>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidSavepointsPost
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param body
     *            (optional)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidSavepointsPostCall(
            String jobid,
            SavepointTriggerRequestBody body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/savepoints".replaceAll("\\{" + "jobid" + "\\}",
                apiClient.escapeString(jobid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = { "application/json" };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidSavepointsPostValidateBeforeCall(
            String jobid,
            SavepointTriggerRequestBody body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling jobsJobidSavepointsPost(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidSavepointsPostCall(jobid, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Triggers a savepoint, and optionally cancels the job afterwards. This
     * async operation would return a &#x27;triggerid&#x27; for further query
     * identifier.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param body
     *            (optional)
     * @return TriggerResponse
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public TriggerResponse jobsJobidSavepointsPost(String jobid, SavepointTriggerRequestBody body) throws ApiException {
        ApiResponse<TriggerResponse> resp = jobsJobidSavepointsPostWithHttpInfo(jobid, body);
        return resp.getData();
    }

    /**
     * 
     * Triggers a savepoint, and optionally cancels the job afterwards. This
     * async operation would return a &#x27;triggerid&#x27; for further query
     * identifier.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param body
     *            (optional)
     * @return ApiResponse&lt;TriggerResponse&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<TriggerResponse> jobsJobidSavepointsPostWithHttpInfo(String jobid, SavepointTriggerRequestBody body)
            throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidSavepointsPostValidateBeforeCall(jobid, body, null, null);
        Type localVarReturnType = new TypeToken<TriggerResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Triggers a savepoint, and optionally cancels the job
     * afterwards. This async operation would return a &#x27;triggerid&#x27; for
     * further query identifier.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param body
     *            (optional)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidSavepointsPostAsync(
            String jobid,
            SavepointTriggerRequestBody body,
            final ApiCallback<TriggerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidSavepointsPostValidateBeforeCall(jobid, body, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<TriggerResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidSavepointsTriggeridGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param triggerid
     *            32-character hexadecimal string that identifies an
     *            asynchronous operation trigger ID. The ID was returned then
     *            the operation was triggered. (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidSavepointsTriggeridGetCall(
            String jobid,
            String triggerid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/savepoints/{triggerid}"
                .replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()))
                .replaceAll("\\{" + "triggerid" + "\\}", apiClient.escapeString(triggerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidSavepointsTriggeridGetValidateBeforeCall(
            String jobid,
            String triggerid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling jobsJobidSavepointsTriggeridGet(Async)");
        }
        // verify the required parameter 'triggerid' is set
        if (triggerid == null) {
            throw new ApiException(
                    "Missing the required parameter 'triggerid' when calling jobsJobidSavepointsTriggeridGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidSavepointsTriggeridGetCall(jobid, triggerid, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the status of a savepoint operation.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param triggerid
     *            32-character hexadecimal string that identifies an
     *            asynchronous operation trigger ID. The ID was returned then
     *            the operation was triggered. (required)
     * @return AsynchronousOperationResult
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public AsynchronousOperationResult jobsJobidSavepointsTriggeridGet(String jobid, String triggerid) throws ApiException {
        ApiResponse<AsynchronousOperationResult> resp = jobsJobidSavepointsTriggeridGetWithHttpInfo(jobid, triggerid);
        return resp.getData();
    }

    /**
     * 
     * Returns the status of a savepoint operation.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param triggerid
     *            32-character hexadecimal string that identifies an
     *            asynchronous operation trigger ID. The ID was returned then
     *            the operation was triggered. (required)
     * @return ApiResponse&lt;AsynchronousOperationResult&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<AsynchronousOperationResult> jobsJobidSavepointsTriggeridGetWithHttpInfo(String jobid, String triggerid)
            throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidSavepointsTriggeridGetValidateBeforeCall(jobid, triggerid, null, null);
        Type localVarReturnType = new TypeToken<AsynchronousOperationResult>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns the status of a savepoint operation.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param triggerid
     *            32-character hexadecimal string that identifies an
     *            asynchronous operation trigger ID. The ID was returned then
     *            the operation was triggered. (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidSavepointsTriggeridGetAsync(
            String jobid,
            String triggerid,
            final ApiCallback<AsynchronousOperationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidSavepointsTriggeridGetValidateBeforeCall(jobid, triggerid, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<AsynchronousOperationResult>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidStopPost
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param body
     *            (optional)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidStopPostCall(
            String jobid,
            StopWithSavepointRequestBody body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/stop".replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = { "application/json" };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidStopPostValidateBeforeCall(
            String jobid,
            StopWithSavepointRequestBody body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling jobsJobidStopPost(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidStopPostCall(jobid, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Stops a job with a savepoint. Optionally, it can also emit a
     * MAX_WATERMARK before taking the savepoint to flush out any state waiting
     * for timers to fire. This async operation would return a
     * &#x27;triggerid&#x27; for further query identifier.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param body
     *            (optional)
     * @return TriggerResponse
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public TriggerResponse jobsJobidStopPost(String jobid, StopWithSavepointRequestBody body) throws ApiException {
        ApiResponse<TriggerResponse> resp = jobsJobidStopPostWithHttpInfo(jobid, body);
        return resp.getData();
    }

    /**
     * 
     * Stops a job with a savepoint. Optionally, it can also emit a
     * MAX_WATERMARK before taking the savepoint to flush out any state waiting
     * for timers to fire. This async operation would return a
     * &#x27;triggerid&#x27; for further query identifier.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param body
     *            (optional)
     * @return ApiResponse&lt;TriggerResponse&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<TriggerResponse> jobsJobidStopPostWithHttpInfo(String jobid, StopWithSavepointRequestBody body)
            throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidStopPostValidateBeforeCall(jobid, body, null, null);
        Type localVarReturnType = new TypeToken<TriggerResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Stops a job with a savepoint. Optionally, it can also
     * emit a MAX_WATERMARK before taking the savepoint to flush out any state
     * waiting for timers to fire. This async operation would return a
     * &#x27;triggerid&#x27; for further query identifier.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param body
     *            (optional)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidStopPostAsync(
            String jobid,
            StopWithSavepointRequestBody body,
            final ApiCallback<TriggerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidStopPostValidateBeforeCall(jobid, body, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<TriggerResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidVerticesVertexidAccumulatorsGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidAccumulatorsGetCall(
            String jobid,
            String vertexid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/vertices/{vertexid}/accumulators"
                .replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()))
                .replaceAll("\\{" + "vertexid" + "\\}", apiClient.escapeString(vertexid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidVerticesVertexidAccumulatorsGetValidateBeforeCall(
            String jobid,
            String vertexid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException(
                    "Missing the required parameter 'jobid' when calling jobsJobidVerticesVertexidAccumulatorsGet(Async)");
        }
        // verify the required parameter 'vertexid' is set
        if (vertexid == null) {
            throw new ApiException(
                    "Missing the required parameter 'vertexid' when calling jobsJobidVerticesVertexidAccumulatorsGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidAccumulatorsGetCall(jobid, vertexid, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns user-defined accumulators of a task, aggregated across all
     * subtasks.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @return JobVertexAccumulatorsInfo
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public JobVertexAccumulatorsInfo jobsJobidVerticesVertexidAccumulatorsGet(String jobid, String vertexid) throws ApiException {
        ApiResponse<JobVertexAccumulatorsInfo> resp = jobsJobidVerticesVertexidAccumulatorsGetWithHttpInfo(jobid, vertexid);
        return resp.getData();
    }

    /**
     * 
     * Returns user-defined accumulators of a task, aggregated across all
     * subtasks.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @return ApiResponse&lt;JobVertexAccumulatorsInfo&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<JobVertexAccumulatorsInfo> jobsJobidVerticesVertexidAccumulatorsGetWithHttpInfo(
            String jobid,
            String vertexid) throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidAccumulatorsGetValidateBeforeCall(jobid, vertexid, null, null);
        Type localVarReturnType = new TypeToken<JobVertexAccumulatorsInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns user-defined accumulators of a task, aggregated
     * across all subtasks.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidAccumulatorsGetAsync(
            String jobid,
            String vertexid,
            final ApiCallback<JobVertexAccumulatorsInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidAccumulatorsGetValidateBeforeCall(jobid, vertexid,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobVertexAccumulatorsInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidVerticesVertexidBackpressureGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidBackpressureGetCall(
            String jobid,
            String vertexid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/vertices/{vertexid}/backpressure"
                .replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()))
                .replaceAll("\\{" + "vertexid" + "\\}", apiClient.escapeString(vertexid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidVerticesVertexidBackpressureGetValidateBeforeCall(
            String jobid,
            String vertexid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException(
                    "Missing the required parameter 'jobid' when calling jobsJobidVerticesVertexidBackpressureGet(Async)");
        }
        // verify the required parameter 'vertexid' is set
        if (vertexid == null) {
            throw new ApiException(
                    "Missing the required parameter 'vertexid' when calling jobsJobidVerticesVertexidBackpressureGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidBackpressureGetCall(jobid, vertexid, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns back-pressure information for a job, and may initiate
     * back-pressure sampling if necessary.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @return JobVertexBackPressureInfo
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public JobVertexBackPressureInfo jobsJobidVerticesVertexidBackpressureGet(String jobid, String vertexid) throws ApiException {
        ApiResponse<JobVertexBackPressureInfo> resp = jobsJobidVerticesVertexidBackpressureGetWithHttpInfo(jobid, vertexid);
        return resp.getData();
    }

    /**
     * 
     * Returns back-pressure information for a job, and may initiate
     * back-pressure sampling if necessary.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @return ApiResponse&lt;JobVertexBackPressureInfo&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<JobVertexBackPressureInfo> jobsJobidVerticesVertexidBackpressureGetWithHttpInfo(
            String jobid,
            String vertexid) throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidBackpressureGetValidateBeforeCall(jobid, vertexid, null, null);
        Type localVarReturnType = new TypeToken<JobVertexBackPressureInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns back-pressure information for a job, and may
     * initiate back-pressure sampling if necessary.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidBackpressureGetAsync(
            String jobid,
            String vertexid,
            final ApiCallback<JobVertexBackPressureInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidBackpressureGetValidateBeforeCall(jobid, vertexid,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobVertexBackPressureInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidVerticesVertexidFlamegraphGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param type
     *            String value that specifies the Flame Graph type. Supported
     *            options are: \&quot;[FULL, ON_CPU, OFF_CPU]\&quot;. (optional)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidFlamegraphGetCall(
            String jobid,
            String vertexid,
            String type,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/vertices/{vertexid}/flamegraph"
                .replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()))
                .replaceAll("\\{" + "vertexid" + "\\}", apiClient.escapeString(vertexid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidVerticesVertexidFlamegraphGetValidateBeforeCall(
            String jobid,
            String vertexid,
            String type,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException(
                    "Missing the required parameter 'jobid' when calling jobsJobidVerticesVertexidFlamegraphGet(Async)");
        }
        // verify the required parameter 'vertexid' is set
        if (vertexid == null) {
            throw new ApiException(
                    "Missing the required parameter 'vertexid' when calling jobsJobidVerticesVertexidFlamegraphGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidFlamegraphGetCall(jobid, vertexid, type, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns flame graph information for a vertex, and may initiate flame
     * graph sampling if necessary.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param type
     *            String value that specifies the Flame Graph type. Supported
     *            options are: \&quot;[FULL, ON_CPU, OFF_CPU]\&quot;. (optional)
     * @return JobVertexFlameGraph
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public JobVertexFlameGraph jobsJobidVerticesVertexidFlamegraphGet(String jobid, String vertexid, String type)
            throws ApiException {
        ApiResponse<JobVertexFlameGraph> resp = jobsJobidVerticesVertexidFlamegraphGetWithHttpInfo(jobid, vertexid, type);
        return resp.getData();
    }

    /**
     * 
     * Returns flame graph information for a vertex, and may initiate flame
     * graph sampling if necessary.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param type
     *            String value that specifies the Flame Graph type. Supported
     *            options are: \&quot;[FULL, ON_CPU, OFF_CPU]\&quot;. (optional)
     * @return ApiResponse&lt;JobVertexFlameGraph&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<JobVertexFlameGraph> jobsJobidVerticesVertexidFlamegraphGetWithHttpInfo(
            String jobid,
            String vertexid,
            String type) throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidFlamegraphGetValidateBeforeCall(jobid, vertexid, type, null,
                null);
        Type localVarReturnType = new TypeToken<JobVertexFlameGraph>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns flame graph information for a vertex, and may
     * initiate flame graph sampling if necessary.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param type
     *            String value that specifies the Flame Graph type. Supported
     *            options are: \&quot;[FULL, ON_CPU, OFF_CPU]\&quot;. (optional)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidFlamegraphGetAsync(
            String jobid,
            String vertexid,
            String type,
            final ApiCallback<JobVertexFlameGraph> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidFlamegraphGetValidateBeforeCall(jobid, vertexid, type,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobVertexFlameGraph>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidVerticesVertexidGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidGetCall(
            String jobid,
            String vertexid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/vertices/{vertexid}"
                .replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()))
                .replaceAll("\\{" + "vertexid" + "\\}", apiClient.escapeString(vertexid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidVerticesVertexidGetValidateBeforeCall(
            String jobid,
            String vertexid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException("Missing the required parameter 'jobid' when calling jobsJobidVerticesVertexidGet(Async)");
        }
        // verify the required parameter 'vertexid' is set
        if (vertexid == null) {
            throw new ApiException("Missing the required parameter 'vertexid' when calling jobsJobidVerticesVertexidGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidGetCall(jobid, vertexid, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns details for a task, with a summary for each of its subtasks.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @return JobVertexDetailsInfo
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public JobVertexDetailsInfo jobsJobidVerticesVertexidGet(String jobid, String vertexid) throws ApiException {
        ApiResponse<JobVertexDetailsInfo> resp = jobsJobidVerticesVertexidGetWithHttpInfo(jobid, vertexid);
        return resp.getData();
    }

    /**
     * 
     * Returns details for a task, with a summary for each of its subtasks.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @return ApiResponse&lt;JobVertexDetailsInfo&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<JobVertexDetailsInfo> jobsJobidVerticesVertexidGetWithHttpInfo(String jobid, String vertexid)
            throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidGetValidateBeforeCall(jobid, vertexid, null, null);
        Type localVarReturnType = new TypeToken<JobVertexDetailsInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns details for a task, with a summary for each of
     * its subtasks.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidGetAsync(
            String jobid,
            String vertexid,
            final ApiCallback<JobVertexDetailsInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidGetValidateBeforeCall(jobid, vertexid, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<JobVertexDetailsInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidVerticesVertexidMetricsGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidMetricsGetCall(
            String jobid,
            String vertexid,
            String get,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/vertices/{vertexid}/metrics"
                .replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()))
                .replaceAll("\\{" + "vertexid" + "\\}", apiClient.escapeString(vertexid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (get != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("get", get));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidVerticesVertexidMetricsGetValidateBeforeCall(
            String jobid,
            String vertexid,
            String get,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException(
                    "Missing the required parameter 'jobid' when calling jobsJobidVerticesVertexidMetricsGet(Async)");
        }
        // verify the required parameter 'vertexid' is set
        if (vertexid == null) {
            throw new ApiException(
                    "Missing the required parameter 'vertexid' when calling jobsJobidVerticesVertexidMetricsGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidMetricsGetCall(jobid, vertexid, get, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * 
     * Provides access to task metrics.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @return MetricCollectionResponseBody
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public MetricCollectionResponseBody jobsJobidVerticesVertexidMetricsGet(String jobid, String vertexid, String get)
            throws ApiException {
        ApiResponse<MetricCollectionResponseBody> resp = jobsJobidVerticesVertexidMetricsGetWithHttpInfo(jobid, vertexid, get);
        return resp.getData();
    }

    /**
     * 
     * Provides access to task metrics.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @return ApiResponse&lt;MetricCollectionResponseBody&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<MetricCollectionResponseBody> jobsJobidVerticesVertexidMetricsGetWithHttpInfo(
            String jobid,
            String vertexid,
            String get) throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidMetricsGetValidateBeforeCall(jobid, vertexid, get, null, null);
        Type localVarReturnType = new TypeToken<MetricCollectionResponseBody>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Provides access to task metrics.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidMetricsGetAsync(
            String jobid,
            String vertexid,
            String get,
            final ApiCallback<MetricCollectionResponseBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidMetricsGetValidateBeforeCall(jobid, vertexid, get,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MetricCollectionResponseBody>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidVerticesVertexidSubtasksAccumulatorsGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidSubtasksAccumulatorsGetCall(
            String jobid,
            String vertexid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/vertices/{vertexid}/subtasks/accumulators"
                .replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()))
                .replaceAll("\\{" + "vertexid" + "\\}", apiClient.escapeString(vertexid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidVerticesVertexidSubtasksAccumulatorsGetValidateBeforeCall(
            String jobid,
            String vertexid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException(
                    "Missing the required parameter 'jobid' when calling jobsJobidVerticesVertexidSubtasksAccumulatorsGet(Async)");
        }
        // verify the required parameter 'vertexid' is set
        if (vertexid == null) {
            throw new ApiException(
                    "Missing the required parameter 'vertexid' when calling jobsJobidVerticesVertexidSubtasksAccumulatorsGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidSubtasksAccumulatorsGetCall(jobid, vertexid, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns all user-defined accumulators for all subtasks of a task.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @return SubtasksAllAccumulatorsInfo
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public SubtasksAllAccumulatorsInfo jobsJobidVerticesVertexidSubtasksAccumulatorsGet(String jobid, String vertexid)
            throws ApiException {
        ApiResponse<SubtasksAllAccumulatorsInfo> resp = jobsJobidVerticesVertexidSubtasksAccumulatorsGetWithHttpInfo(jobid,
                vertexid);
        return resp.getData();
    }

    /**
     * 
     * Returns all user-defined accumulators for all subtasks of a task.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @return ApiResponse&lt;SubtasksAllAccumulatorsInfo&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<SubtasksAllAccumulatorsInfo> jobsJobidVerticesVertexidSubtasksAccumulatorsGetWithHttpInfo(
            String jobid,
            String vertexid) throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidSubtasksAccumulatorsGetValidateBeforeCall(jobid, vertexid, null,
                null);
        Type localVarReturnType = new TypeToken<SubtasksAllAccumulatorsInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns all user-defined accumulators for all subtasks
     * of a task.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidSubtasksAccumulatorsGetAsync(
            String jobid,
            String vertexid,
            final ApiCallback<SubtasksAllAccumulatorsInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidSubtasksAccumulatorsGetValidateBeforeCall(jobid, vertexid,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubtasksAllAccumulatorsInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidVerticesVertexidSubtasksMetricsGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @param agg
     *            Comma-separated list of aggregation modes which should be
     *            calculated. Available aggregations are: \&quot;min, max, sum,
     *            avg\&quot;. (optional)
     * @param subtasks
     *            Comma-separated list of integer ranges (e.g.
     *            \&quot;1,3,5-9\&quot;) to select specific subtasks. (optional)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidSubtasksMetricsGetCall(
            String jobid,
            String vertexid,
            String get,
            String agg,
            String subtasks,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/vertices/{vertexid}/subtasks/metrics"
                .replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()))
                .replaceAll("\\{" + "vertexid" + "\\}", apiClient.escapeString(vertexid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (get != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("get", get));
        if (agg != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("agg", agg));
        if (subtasks != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("subtasks", subtasks));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidVerticesVertexidSubtasksMetricsGetValidateBeforeCall(
            String jobid,
            String vertexid,
            String get,
            String agg,
            String subtasks,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException(
                    "Missing the required parameter 'jobid' when calling jobsJobidVerticesVertexidSubtasksMetricsGet(Async)");
        }
        // verify the required parameter 'vertexid' is set
        if (vertexid == null) {
            throw new ApiException(
                    "Missing the required parameter 'vertexid' when calling jobsJobidVerticesVertexidSubtasksMetricsGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidSubtasksMetricsGetCall(jobid, vertexid, get, agg, subtasks,
                progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Provides access to aggregated subtask metrics.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @param agg
     *            Comma-separated list of aggregation modes which should be
     *            calculated. Available aggregations are: \&quot;min, max, sum,
     *            avg\&quot;. (optional)
     * @param subtasks
     *            Comma-separated list of integer ranges (e.g.
     *            \&quot;1,3,5-9\&quot;) to select specific subtasks. (optional)
     * @return AggregatedMetricsResponseBody
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public AggregatedMetricsResponseBody jobsJobidVerticesVertexidSubtasksMetricsGet(
            String jobid,
            String vertexid,
            String get,
            String agg,
            String subtasks) throws ApiException {
        ApiResponse<AggregatedMetricsResponseBody> resp = jobsJobidVerticesVertexidSubtasksMetricsGetWithHttpInfo(jobid, vertexid,
                get, agg, subtasks);
        return resp.getData();
    }

    /**
     * 
     * Provides access to aggregated subtask metrics.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @param agg
     *            Comma-separated list of aggregation modes which should be
     *            calculated. Available aggregations are: \&quot;min, max, sum,
     *            avg\&quot;. (optional)
     * @param subtasks
     *            Comma-separated list of integer ranges (e.g.
     *            \&quot;1,3,5-9\&quot;) to select specific subtasks. (optional)
     * @return ApiResponse&lt;AggregatedMetricsResponseBody&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<AggregatedMetricsResponseBody> jobsJobidVerticesVertexidSubtasksMetricsGetWithHttpInfo(
            String jobid,
            String vertexid,
            String get,
            String agg,
            String subtasks) throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidSubtasksMetricsGetValidateBeforeCall(jobid, vertexid, get, agg,
                subtasks, null, null);
        Type localVarReturnType = new TypeToken<AggregatedMetricsResponseBody>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Provides access to aggregated subtask metrics.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @param agg
     *            Comma-separated list of aggregation modes which should be
     *            calculated. Available aggregations are: \&quot;min, max, sum,
     *            avg\&quot;. (optional)
     * @param subtasks
     *            Comma-separated list of integer ranges (e.g.
     *            \&quot;1,3,5-9\&quot;) to select specific subtasks. (optional)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidSubtasksMetricsGetAsync(
            String jobid,
            String vertexid,
            String get,
            String agg,
            String subtasks,
            final ApiCallback<AggregatedMetricsResponseBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidSubtasksMetricsGetValidateBeforeCall(jobid, vertexid, get, agg,
                subtasks, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AggregatedMetricsResponseBody>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for
     * jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptAccumulatorsGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param subtaskindex
     *            Positive integer value that identifies a subtask. (required)
     * @param attempt
     *            Positive integer value that identifies an execution attempt.
     *            (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptAccumulatorsGetCall(
            String jobid,
            String vertexid,
            Integer subtaskindex,
            Integer attempt,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/vertices/{vertexid}/subtasks/{subtaskindex}/attempts/{attempt}/accumulators"
                .replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()))
                .replaceAll("\\{" + "vertexid" + "\\}", apiClient.escapeString(vertexid.toString()))
                .replaceAll("\\{" + "subtaskindex" + "\\}", apiClient.escapeString(subtaskindex.toString()))
                .replaceAll("\\{" + "attempt" + "\\}", apiClient.escapeString(attempt.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptAccumulatorsGetValidateBeforeCall(
            String jobid,
            String vertexid,
            Integer subtaskindex,
            Integer attempt,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException(
                    "Missing the required parameter 'jobid' when calling jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptAccumulatorsGet(Async)");
        }
        // verify the required parameter 'vertexid' is set
        if (vertexid == null) {
            throw new ApiException(
                    "Missing the required parameter 'vertexid' when calling jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptAccumulatorsGet(Async)");
        }
        // verify the required parameter 'subtaskindex' is set
        if (subtaskindex == null) {
            throw new ApiException(
                    "Missing the required parameter 'subtaskindex' when calling jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptAccumulatorsGet(Async)");
        }
        // verify the required parameter 'attempt' is set
        if (attempt == null) {
            throw new ApiException(
                    "Missing the required parameter 'attempt' when calling jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptAccumulatorsGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptAccumulatorsGetCall(jobid,
                vertexid, subtaskindex, attempt, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the accumulators of an execution attempt of a subtask. Multiple
     * execution attempts happen in case of failure/recovery.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param subtaskindex
     *            Positive integer value that identifies a subtask. (required)
     * @param attempt
     *            Positive integer value that identifies an execution attempt.
     *            (required)
     * @return SubtaskExecutionAttemptAccumulatorsInfo
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public SubtaskExecutionAttemptAccumulatorsInfo jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptAccumulatorsGet(
            String jobid,
            String vertexid,
            Integer subtaskindex,
            Integer attempt) throws ApiException {
        ApiResponse<SubtaskExecutionAttemptAccumulatorsInfo> resp = jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptAccumulatorsGetWithHttpInfo(
                jobid, vertexid, subtaskindex, attempt);
        return resp.getData();
    }

    /**
     * 
     * Returns the accumulators of an execution attempt of a subtask. Multiple
     * execution attempts happen in case of failure/recovery.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param subtaskindex
     *            Positive integer value that identifies a subtask. (required)
     * @param attempt
     *            Positive integer value that identifies an execution attempt.
     *            (required)
     * @return ApiResponse&lt;SubtaskExecutionAttemptAccumulatorsInfo&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<SubtaskExecutionAttemptAccumulatorsInfo> jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptAccumulatorsGetWithHttpInfo(
            String jobid,
            String vertexid,
            Integer subtaskindex,
            Integer attempt) throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptAccumulatorsGetValidateBeforeCall(
                jobid, vertexid, subtaskindex, attempt, null, null);
        Type localVarReturnType = new TypeToken<SubtaskExecutionAttemptAccumulatorsInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns the accumulators of an execution attempt of a
     * subtask. Multiple execution attempts happen in case of failure/recovery.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param subtaskindex
     *            Positive integer value that identifies a subtask. (required)
     * @param attempt
     *            Positive integer value that identifies an execution attempt.
     *            (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptAccumulatorsGetAsync(
            String jobid,
            String vertexid,
            Integer subtaskindex,
            Integer attempt,
            final ApiCallback<SubtaskExecutionAttemptAccumulatorsInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptAccumulatorsGetValidateBeforeCall(
                jobid, vertexid, subtaskindex, attempt, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubtaskExecutionAttemptAccumulatorsInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for
     * jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param subtaskindex
     *            Positive integer value that identifies a subtask. (required)
     * @param attempt
     *            Positive integer value that identifies an execution attempt.
     *            (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptGetCall(
            String jobid,
            String vertexid,
            Integer subtaskindex,
            Integer attempt,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/vertices/{vertexid}/subtasks/{subtaskindex}/attempts/{attempt}"
                .replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()))
                .replaceAll("\\{" + "vertexid" + "\\}", apiClient.escapeString(vertexid.toString()))
                .replaceAll("\\{" + "subtaskindex" + "\\}", apiClient.escapeString(subtaskindex.toString()))
                .replaceAll("\\{" + "attempt" + "\\}", apiClient.escapeString(attempt.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptGetValidateBeforeCall(
            String jobid,
            String vertexid,
            Integer subtaskindex,
            Integer attempt,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException(
                    "Missing the required parameter 'jobid' when calling jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptGet(Async)");
        }
        // verify the required parameter 'vertexid' is set
        if (vertexid == null) {
            throw new ApiException(
                    "Missing the required parameter 'vertexid' when calling jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptGet(Async)");
        }
        // verify the required parameter 'subtaskindex' is set
        if (subtaskindex == null) {
            throw new ApiException(
                    "Missing the required parameter 'subtaskindex' when calling jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptGet(Async)");
        }
        // verify the required parameter 'attempt' is set
        if (attempt == null) {
            throw new ApiException(
                    "Missing the required parameter 'attempt' when calling jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptGetCall(jobid, vertexid,
                subtaskindex, attempt, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns details of an execution attempt of a subtask. Multiple execution
     * attempts happen in case of failure/recovery.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param subtaskindex
     *            Positive integer value that identifies a subtask. (required)
     * @param attempt
     *            Positive integer value that identifies an execution attempt.
     *            (required)
     * @return SubtaskExecutionAttemptDetailsInfo
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public SubtaskExecutionAttemptDetailsInfo jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptGet(
            String jobid,
            String vertexid,
            Integer subtaskindex,
            Integer attempt) throws ApiException {
        ApiResponse<SubtaskExecutionAttemptDetailsInfo> resp = jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptGetWithHttpInfo(
                jobid, vertexid, subtaskindex, attempt);
        return resp.getData();
    }

    /**
     * 
     * Returns details of an execution attempt of a subtask. Multiple execution
     * attempts happen in case of failure/recovery.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param subtaskindex
     *            Positive integer value that identifies a subtask. (required)
     * @param attempt
     *            Positive integer value that identifies an execution attempt.
     *            (required)
     * @return ApiResponse&lt;SubtaskExecutionAttemptDetailsInfo&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<SubtaskExecutionAttemptDetailsInfo> jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptGetWithHttpInfo(
            String jobid,
            String vertexid,
            Integer subtaskindex,
            Integer attempt) throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptGetValidateBeforeCall(jobid,
                vertexid, subtaskindex, attempt, null, null);
        Type localVarReturnType = new TypeToken<SubtaskExecutionAttemptDetailsInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns details of an execution attempt of a subtask.
     * Multiple execution attempts happen in case of failure/recovery.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param subtaskindex
     *            Positive integer value that identifies a subtask. (required)
     * @param attempt
     *            Positive integer value that identifies an execution attempt.
     *            (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptGetAsync(
            String jobid,
            String vertexid,
            Integer subtaskindex,
            Integer attempt,
            final ApiCallback<SubtaskExecutionAttemptDetailsInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidSubtasksSubtaskindexAttemptsAttemptGetValidateBeforeCall(jobid,
                vertexid, subtaskindex, attempt, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubtaskExecutionAttemptDetailsInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidVerticesVertexidSubtasksSubtaskindexGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param subtaskindex
     *            Positive integer value that identifies a subtask. (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidSubtasksSubtaskindexGetCall(
            String jobid,
            String vertexid,
            Integer subtaskindex,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/vertices/{vertexid}/subtasks/{subtaskindex}"
                .replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()))
                .replaceAll("\\{" + "vertexid" + "\\}", apiClient.escapeString(vertexid.toString()))
                .replaceAll("\\{" + "subtaskindex" + "\\}", apiClient.escapeString(subtaskindex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidVerticesVertexidSubtasksSubtaskindexGetValidateBeforeCall(
            String jobid,
            String vertexid,
            Integer subtaskindex,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException(
                    "Missing the required parameter 'jobid' when calling jobsJobidVerticesVertexidSubtasksSubtaskindexGet(Async)");
        }
        // verify the required parameter 'vertexid' is set
        if (vertexid == null) {
            throw new ApiException(
                    "Missing the required parameter 'vertexid' when calling jobsJobidVerticesVertexidSubtasksSubtaskindexGet(Async)");
        }
        // verify the required parameter 'subtaskindex' is set
        if (subtaskindex == null) {
            throw new ApiException(
                    "Missing the required parameter 'subtaskindex' when calling jobsJobidVerticesVertexidSubtasksSubtaskindexGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidSubtasksSubtaskindexGetCall(jobid, vertexid, subtaskindex,
                progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns details of the current or latest execution attempt of a subtask.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param subtaskindex
     *            Positive integer value that identifies a subtask. (required)
     * @return SubtaskExecutionAttemptDetailsInfo
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public SubtaskExecutionAttemptDetailsInfo jobsJobidVerticesVertexidSubtasksSubtaskindexGet(
            String jobid,
            String vertexid,
            Integer subtaskindex) throws ApiException {
        ApiResponse<SubtaskExecutionAttemptDetailsInfo> resp = jobsJobidVerticesVertexidSubtasksSubtaskindexGetWithHttpInfo(jobid,
                vertexid, subtaskindex);
        return resp.getData();
    }

    /**
     * 
     * Returns details of the current or latest execution attempt of a subtask.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param subtaskindex
     *            Positive integer value that identifies a subtask. (required)
     * @return ApiResponse&lt;SubtaskExecutionAttemptDetailsInfo&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<SubtaskExecutionAttemptDetailsInfo> jobsJobidVerticesVertexidSubtasksSubtaskindexGetWithHttpInfo(
            String jobid,
            String vertexid,
            Integer subtaskindex) throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidSubtasksSubtaskindexGetValidateBeforeCall(jobid, vertexid,
                subtaskindex, null, null);
        Type localVarReturnType = new TypeToken<SubtaskExecutionAttemptDetailsInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns details of the current or latest execution
     * attempt of a subtask.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param subtaskindex
     *            Positive integer value that identifies a subtask. (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidSubtasksSubtaskindexGetAsync(
            String jobid,
            String vertexid,
            Integer subtaskindex,
            final ApiCallback<SubtaskExecutionAttemptDetailsInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidSubtasksSubtaskindexGetValidateBeforeCall(jobid, vertexid,
                subtaskindex, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubtaskExecutionAttemptDetailsInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidVerticesVertexidSubtasksSubtaskindexMetricsGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param subtaskindex
     *            Positive integer value that identifies a subtask. (required)
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidSubtasksSubtaskindexMetricsGetCall(
            String jobid,
            String vertexid,
            Integer subtaskindex,
            String get,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/vertices/{vertexid}/subtasks/{subtaskindex}/metrics"
                .replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()))
                .replaceAll("\\{" + "vertexid" + "\\}", apiClient.escapeString(vertexid.toString()))
                .replaceAll("\\{" + "subtaskindex" + "\\}", apiClient.escapeString(subtaskindex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (get != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("get", get));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidVerticesVertexidSubtasksSubtaskindexMetricsGetValidateBeforeCall(
            String jobid,
            String vertexid,
            Integer subtaskindex,
            String get,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException(
                    "Missing the required parameter 'jobid' when calling jobsJobidVerticesVertexidSubtasksSubtaskindexMetricsGet(Async)");
        }
        // verify the required parameter 'vertexid' is set
        if (vertexid == null) {
            throw new ApiException(
                    "Missing the required parameter 'vertexid' when calling jobsJobidVerticesVertexidSubtasksSubtaskindexMetricsGet(Async)");
        }
        // verify the required parameter 'subtaskindex' is set
        if (subtaskindex == null) {
            throw new ApiException(
                    "Missing the required parameter 'subtaskindex' when calling jobsJobidVerticesVertexidSubtasksSubtaskindexMetricsGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidSubtasksSubtaskindexMetricsGetCall(jobid, vertexid, subtaskindex,
                get, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Provides access to subtask metrics.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param subtaskindex
     *            Positive integer value that identifies a subtask. (required)
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @return MetricCollectionResponseBody
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public MetricCollectionResponseBody jobsJobidVerticesVertexidSubtasksSubtaskindexMetricsGet(
            String jobid,
            String vertexid,
            Integer subtaskindex,
            String get) throws ApiException {
        ApiResponse<MetricCollectionResponseBody> resp = jobsJobidVerticesVertexidSubtasksSubtaskindexMetricsGetWithHttpInfo(
                jobid, vertexid, subtaskindex, get);
        return resp.getData();
    }

    /**
     * 
     * Provides access to subtask metrics.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param subtaskindex
     *            Positive integer value that identifies a subtask. (required)
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @return ApiResponse&lt;MetricCollectionResponseBody&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<MetricCollectionResponseBody> jobsJobidVerticesVertexidSubtasksSubtaskindexMetricsGetWithHttpInfo(
            String jobid,
            String vertexid,
            Integer subtaskindex,
            String get) throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidSubtasksSubtaskindexMetricsGetValidateBeforeCall(jobid, vertexid,
                subtaskindex, get, null, null);
        Type localVarReturnType = new TypeToken<MetricCollectionResponseBody>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Provides access to subtask metrics.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param subtaskindex
     *            Positive integer value that identifies a subtask. (required)
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidSubtasksSubtaskindexMetricsGetAsync(
            String jobid,
            String vertexid,
            Integer subtaskindex,
            String get,
            final ApiCallback<MetricCollectionResponseBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidSubtasksSubtaskindexMetricsGetValidateBeforeCall(jobid, vertexid,
                subtaskindex, get, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MetricCollectionResponseBody>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidVerticesVertexidSubtasktimesGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidSubtasktimesGetCall(
            String jobid,
            String vertexid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/vertices/{vertexid}/subtasktimes"
                .replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()))
                .replaceAll("\\{" + "vertexid" + "\\}", apiClient.escapeString(vertexid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidVerticesVertexidSubtasktimesGetValidateBeforeCall(
            String jobid,
            String vertexid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException(
                    "Missing the required parameter 'jobid' when calling jobsJobidVerticesVertexidSubtasktimesGet(Async)");
        }
        // verify the required parameter 'vertexid' is set
        if (vertexid == null) {
            throw new ApiException(
                    "Missing the required parameter 'vertexid' when calling jobsJobidVerticesVertexidSubtasktimesGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidSubtasktimesGetCall(jobid, vertexid, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns time-related information for all subtasks of a task.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @return SubtasksTimesInfo
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public SubtasksTimesInfo jobsJobidVerticesVertexidSubtasktimesGet(String jobid, String vertexid) throws ApiException {
        ApiResponse<SubtasksTimesInfo> resp = jobsJobidVerticesVertexidSubtasktimesGetWithHttpInfo(jobid, vertexid);
        return resp.getData();
    }

    /**
     * 
     * Returns time-related information for all subtasks of a task.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @return ApiResponse&lt;SubtasksTimesInfo&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<SubtasksTimesInfo> jobsJobidVerticesVertexidSubtasktimesGetWithHttpInfo(String jobid, String vertexid)
            throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidSubtasktimesGetValidateBeforeCall(jobid, vertexid, null, null);
        Type localVarReturnType = new TypeToken<SubtasksTimesInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns time-related information for all subtasks of a
     * task.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidSubtasktimesGetAsync(
            String jobid,
            String vertexid,
            final ApiCallback<SubtasksTimesInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidSubtasktimesGetValidateBeforeCall(jobid, vertexid,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SubtasksTimesInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidVerticesVertexidTaskmanagersGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidTaskmanagersGetCall(
            String jobid,
            String vertexid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/vertices/{vertexid}/taskmanagers"
                .replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()))
                .replaceAll("\\{" + "vertexid" + "\\}", apiClient.escapeString(vertexid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidVerticesVertexidTaskmanagersGetValidateBeforeCall(
            String jobid,
            String vertexid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException(
                    "Missing the required parameter 'jobid' when calling jobsJobidVerticesVertexidTaskmanagersGet(Async)");
        }
        // verify the required parameter 'vertexid' is set
        if (vertexid == null) {
            throw new ApiException(
                    "Missing the required parameter 'vertexid' when calling jobsJobidVerticesVertexidTaskmanagersGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidTaskmanagersGetCall(jobid, vertexid, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns task information aggregated by task manager.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @return JobVertexTaskManagersInfo
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public JobVertexTaskManagersInfo jobsJobidVerticesVertexidTaskmanagersGet(String jobid, String vertexid) throws ApiException {
        ApiResponse<JobVertexTaskManagersInfo> resp = jobsJobidVerticesVertexidTaskmanagersGetWithHttpInfo(jobid, vertexid);
        return resp.getData();
    }

    /**
     * 
     * Returns task information aggregated by task manager.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @return ApiResponse&lt;JobVertexTaskManagersInfo&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<JobVertexTaskManagersInfo> jobsJobidVerticesVertexidTaskmanagersGetWithHttpInfo(
            String jobid,
            String vertexid) throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidTaskmanagersGetValidateBeforeCall(jobid, vertexid, null, null);
        Type localVarReturnType = new TypeToken<JobVertexTaskManagersInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns task information aggregated by task manager.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidTaskmanagersGetAsync(
            String jobid,
            String vertexid,
            final ApiCallback<JobVertexTaskManagersInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidTaskmanagersGetValidateBeforeCall(jobid, vertexid,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobVertexTaskManagersInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsJobidVerticesVertexidWatermarksGet
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidWatermarksGetCall(
            String jobid,
            String vertexid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{jobid}/vertices/{vertexid}/watermarks"
                .replaceAll("\\{" + "jobid" + "\\}", apiClient.escapeString(jobid.toString()))
                .replaceAll("\\{" + "vertexid" + "\\}", apiClient.escapeString(vertexid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsJobidVerticesVertexidWatermarksGetValidateBeforeCall(
            String jobid,
            String vertexid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'jobid' is set
        if (jobid == null) {
            throw new ApiException(
                    "Missing the required parameter 'jobid' when calling jobsJobidVerticesVertexidWatermarksGet(Async)");
        }
        // verify the required parameter 'vertexid' is set
        if (vertexid == null) {
            throw new ApiException(
                    "Missing the required parameter 'vertexid' when calling jobsJobidVerticesVertexidWatermarksGet(Async)");
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidWatermarksGetCall(jobid, vertexid, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the watermarks for all subtasks of a task.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @return MetricCollectionResponseBody
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public MetricCollectionResponseBody jobsJobidVerticesVertexidWatermarksGet(String jobid, String vertexid)
            throws ApiException {
        ApiResponse<MetricCollectionResponseBody> resp = jobsJobidVerticesVertexidWatermarksGetWithHttpInfo(jobid, vertexid);
        return resp.getData();
    }

    /**
     * 
     * Returns the watermarks for all subtasks of a task.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @return ApiResponse&lt;MetricCollectionResponseBody&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<MetricCollectionResponseBody> jobsJobidVerticesVertexidWatermarksGetWithHttpInfo(
            String jobid,
            String vertexid) throws ApiException {
        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidWatermarksGetValidateBeforeCall(jobid, vertexid, null, null);
        Type localVarReturnType = new TypeToken<MetricCollectionResponseBody>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns the watermarks for all subtasks of a task.
     * 
     * @param jobid
     *            32-character hexadecimal string value that identifies a job.
     *            (required)
     * @param vertexid
     *            32-character hexadecimal string value that identifies a job
     *            vertex. (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsJobidVerticesVertexidWatermarksGetAsync(
            String jobid,
            String vertexid,
            final ApiCallback<MetricCollectionResponseBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsJobidVerticesVertexidWatermarksGetValidateBeforeCall(jobid, vertexid,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MetricCollectionResponseBody>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsMetricsGet
     * 
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @param agg
     *            Comma-separated list of aggregation modes which should be
     *            calculated. Available aggregations are: \&quot;min, max, sum,
     *            avg\&quot;. (optional)
     * @param jobs
     *            Comma-separated list of 32-character hexadecimal strings to
     *            select specific jobs. (optional)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsMetricsGetCall(
            String get,
            String agg,
            String jobs,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/metrics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (get != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("get", get));
        if (agg != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("agg", agg));
        if (jobs != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("jobs", jobs));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsMetricsGetValidateBeforeCall(
            String get,
            String agg,
            String jobs,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        com.squareup.okhttp.Call call = jobsMetricsGetCall(get, agg, jobs, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Provides access to aggregated job metrics.
     * 
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @param agg
     *            Comma-separated list of aggregation modes which should be
     *            calculated. Available aggregations are: \&quot;min, max, sum,
     *            avg\&quot;. (optional)
     * @param jobs
     *            Comma-separated list of 32-character hexadecimal strings to
     *            select specific jobs. (optional)
     * @return AggregatedMetricsResponseBody
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public AggregatedMetricsResponseBody jobsMetricsGet(String get, String agg, String jobs) throws ApiException {
        ApiResponse<AggregatedMetricsResponseBody> resp = jobsMetricsGetWithHttpInfo(get, agg, jobs);
        return resp.getData();
    }

    /**
     * 
     * Provides access to aggregated job metrics.
     * 
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @param agg
     *            Comma-separated list of aggregation modes which should be
     *            calculated. Available aggregations are: \&quot;min, max, sum,
     *            avg\&quot;. (optional)
     * @param jobs
     *            Comma-separated list of 32-character hexadecimal strings to
     *            select specific jobs. (optional)
     * @return ApiResponse&lt;AggregatedMetricsResponseBody&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<AggregatedMetricsResponseBody> jobsMetricsGetWithHttpInfo(String get, String agg, String jobs)
            throws ApiException {
        com.squareup.okhttp.Call call = jobsMetricsGetValidateBeforeCall(get, agg, jobs, null, null);
        Type localVarReturnType = new TypeToken<AggregatedMetricsResponseBody>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Provides access to aggregated job metrics.
     * 
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @param agg
     *            Comma-separated list of aggregation modes which should be
     *            calculated. Available aggregations are: \&quot;min, max, sum,
     *            avg\&quot;. (optional)
     * @param jobs
     *            Comma-separated list of 32-character hexadecimal strings to
     *            select specific jobs. (optional)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsMetricsGetAsync(
            String get,
            String agg,
            String jobs,
            final ApiCallback<AggregatedMetricsResponseBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsMetricsGetValidateBeforeCall(get, agg, jobs, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<AggregatedMetricsResponseBody>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsOverviewGet
     * 
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsOverviewGetCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/overview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsOverviewGetValidateBeforeCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        com.squareup.okhttp.Call call = jobsOverviewGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns an overview over all jobs.
     * 
     * @return MultipleJobsDetails
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public MultipleJobsDetails jobsOverviewGet() throws ApiException {
        ApiResponse<MultipleJobsDetails> resp = jobsOverviewGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Returns an overview over all jobs.
     * 
     * @return ApiResponse&lt;MultipleJobsDetails&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<MultipleJobsDetails> jobsOverviewGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = jobsOverviewGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<MultipleJobsDetails>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns an overview over all jobs.
     * 
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsOverviewGetAsync(final ApiCallback<MultipleJobsDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsOverviewGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MultipleJobsDetails>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for jobsPost
     * 
     * @param request
     *            (required)
     * @param filename
     *            (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jobsPostCall(
            JobSubmitRequestBody request,
            List<File> filename,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (request != null)
            localVarFormParams.put("request", request);
        if (filename != null)
            localVarFormParams.put("filename", filename);

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = { "multipart/form-data" };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call jobsPostValidateBeforeCall(
            JobSubmitRequestBody request,
            List<File> filename,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling jobsPost(Async)");
        }
        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling jobsPost(Async)");
        }

        com.squareup.okhttp.Call call = jobsPostCall(request, filename, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Submits a job. This call is primarily intended to be used by the Flink
     * client. This call expects a multipart/form-data request that consists of
     * file uploads for the serialized JobGraph, jars and distributed cache
     * artifacts and an attribute named \&quot;request\&quot; for the JSON
     * payload.
     * 
     * @param request
     *            (required)
     * @param filename
     *            (required)
     * @return JobSubmitResponseBody
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public JobSubmitResponseBody jobsPost(JobSubmitRequestBody request, List<File> filename) throws ApiException {
        ApiResponse<JobSubmitResponseBody> resp = jobsPostWithHttpInfo(request, filename);
        return resp.getData();
    }

    /**
     * 
     * Submits a job. This call is primarily intended to be used by the Flink
     * client. This call expects a multipart/form-data request that consists of
     * file uploads for the serialized JobGraph, jars and distributed cache
     * artifacts and an attribute named \&quot;request\&quot; for the JSON
     * payload.
     * 
     * @param request
     *            (required)
     * @param filename
     *            (required)
     * @return ApiResponse&lt;JobSubmitResponseBody&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<JobSubmitResponseBody> jobsPostWithHttpInfo(JobSubmitRequestBody request, List<File> filename)
            throws ApiException {
        com.squareup.okhttp.Call call = jobsPostValidateBeforeCall(request, filename, null, null);
        Type localVarReturnType = new TypeToken<JobSubmitResponseBody>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Submits a job. This call is primarily intended to be
     * used by the Flink client. This call expects a multipart/form-data request
     * that consists of file uploads for the serialized JobGraph, jars and
     * distributed cache artifacts and an attribute named \&quot;request\&quot;
     * for the JSON payload.
     * 
     * @param request
     *            (required)
     * @param filename
     *            (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call jobsPostAsync(
            JobSubmitRequestBody request,
            List<File> filename,
            final ApiCallback<JobSubmitResponseBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jobsPostValidateBeforeCall(request, filename, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JobSubmitResponseBody>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for overviewGet
     * 
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call overviewGetCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/overview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call overviewGetValidateBeforeCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        com.squareup.okhttp.Call call = overviewGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns an overview over the Flink cluster.
     * 
     * @return ClusterOverviewWithVersion
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ClusterOverviewWithVersion overviewGet() throws ApiException {
        ApiResponse<ClusterOverviewWithVersion> resp = overviewGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Returns an overview over the Flink cluster.
     * 
     * @return ApiResponse&lt;ClusterOverviewWithVersion&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<ClusterOverviewWithVersion> overviewGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = overviewGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ClusterOverviewWithVersion>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns an overview over the Flink cluster.
     * 
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call overviewGetAsync(final ApiCallback<ClusterOverviewWithVersion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = overviewGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ClusterOverviewWithVersion>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for savepointDisposalPost
     * 
     * @param body
     *            (optional)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call savepointDisposalPostCall(
            SavepointDisposalRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/savepoint-disposal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = { "application/json" };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call savepointDisposalPostValidateBeforeCall(
            SavepointDisposalRequest body,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        com.squareup.okhttp.Call call = savepointDisposalPostCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Triggers the desposal of a savepoint. This async operation would return a
     * &#x27;triggerid&#x27; for further query identifier.
     * 
     * @param body
     *            (optional)
     * @return TriggerResponse
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public TriggerResponse savepointDisposalPost(SavepointDisposalRequest body) throws ApiException {
        ApiResponse<TriggerResponse> resp = savepointDisposalPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * 
     * Triggers the desposal of a savepoint. This async operation would return a
     * &#x27;triggerid&#x27; for further query identifier.
     * 
     * @param body
     *            (optional)
     * @return ApiResponse&lt;TriggerResponse&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<TriggerResponse> savepointDisposalPostWithHttpInfo(SavepointDisposalRequest body) throws ApiException {
        com.squareup.okhttp.Call call = savepointDisposalPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<TriggerResponse>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Triggers the desposal of a savepoint. This async
     * operation would return a &#x27;triggerid&#x27; for further query
     * identifier.
     * 
     * @param body
     *            (optional)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call savepointDisposalPostAsync(
            SavepointDisposalRequest body,
            final ApiCallback<TriggerResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = savepointDisposalPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TriggerResponse>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for savepointDisposalTriggeridGet
     * 
     * @param triggerid
     *            32-character hexadecimal string that identifies an
     *            asynchronous operation trigger ID. The ID was returned then
     *            the operation was triggered. (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call savepointDisposalTriggeridGetCall(
            String triggerid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/savepoint-disposal/{triggerid}".replaceAll("\\{" + "triggerid" + "\\}",
                apiClient.escapeString(triggerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call savepointDisposalTriggeridGetValidateBeforeCall(
            String triggerid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'triggerid' is set
        if (triggerid == null) {
            throw new ApiException(
                    "Missing the required parameter 'triggerid' when calling savepointDisposalTriggeridGet(Async)");
        }

        com.squareup.okhttp.Call call = savepointDisposalTriggeridGetCall(triggerid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the status of a savepoint disposal operation.
     * 
     * @param triggerid
     *            32-character hexadecimal string that identifies an
     *            asynchronous operation trigger ID. The ID was returned then
     *            the operation was triggered. (required)
     * @return AsynchronousOperationResult
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public AsynchronousOperationResult savepointDisposalTriggeridGet(String triggerid) throws ApiException {
        ApiResponse<AsynchronousOperationResult> resp = savepointDisposalTriggeridGetWithHttpInfo(triggerid);
        return resp.getData();
    }

    /**
     * 
     * Returns the status of a savepoint disposal operation.
     * 
     * @param triggerid
     *            32-character hexadecimal string that identifies an
     *            asynchronous operation trigger ID. The ID was returned then
     *            the operation was triggered. (required)
     * @return ApiResponse&lt;AsynchronousOperationResult&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<AsynchronousOperationResult> savepointDisposalTriggeridGetWithHttpInfo(String triggerid)
            throws ApiException {
        com.squareup.okhttp.Call call = savepointDisposalTriggeridGetValidateBeforeCall(triggerid, null, null);
        Type localVarReturnType = new TypeToken<AsynchronousOperationResult>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns the status of a savepoint disposal operation.
     * 
     * @param triggerid
     *            32-character hexadecimal string that identifies an
     *            asynchronous operation trigger ID. The ID was returned then
     *            the operation was triggered. (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call savepointDisposalTriggeridGetAsync(
            String triggerid,
            final ApiCallback<AsynchronousOperationResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = savepointDisposalTriggeridGetValidateBeforeCall(triggerid, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<AsynchronousOperationResult>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for taskmanagersGet
     * 
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskmanagersGetCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taskmanagers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call taskmanagersGetValidateBeforeCall(
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        com.squareup.okhttp.Call call = taskmanagersGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns an overview over all task managers.
     * 
     * @return TaskManagersInfo
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public TaskManagersInfo taskmanagersGet() throws ApiException {
        ApiResponse<TaskManagersInfo> resp = taskmanagersGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Returns an overview over all task managers.
     * 
     * @return ApiResponse&lt;TaskManagersInfo&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<TaskManagersInfo> taskmanagersGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = taskmanagersGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<TaskManagersInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns an overview over all task managers.
     * 
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call taskmanagersGetAsync(final ApiCallback<TaskManagersInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskmanagersGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskManagersInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for taskmanagersMetricsGet
     * 
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @param agg
     *            Comma-separated list of aggregation modes which should be
     *            calculated. Available aggregations are: \&quot;min, max, sum,
     *            avg\&quot;. (optional)
     * @param taskmanagers
     *            Comma-separated list of 32-character hexadecimal strings to
     *            select specific task managers. (optional)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskmanagersMetricsGetCall(
            String get,
            String agg,
            String taskmanagers,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taskmanagers/metrics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (get != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("get", get));
        if (agg != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("agg", agg));
        if (taskmanagers != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("taskmanagers", taskmanagers));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call taskmanagersMetricsGetValidateBeforeCall(
            String get,
            String agg,
            String taskmanagers,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

        com.squareup.okhttp.Call call = taskmanagersMetricsGetCall(get, agg, taskmanagers, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * 
     * Provides access to aggregated task manager metrics.
     * 
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @param agg
     *            Comma-separated list of aggregation modes which should be
     *            calculated. Available aggregations are: \&quot;min, max, sum,
     *            avg\&quot;. (optional)
     * @param taskmanagers
     *            Comma-separated list of 32-character hexadecimal strings to
     *            select specific task managers. (optional)
     * @return AggregatedMetricsResponseBody
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public AggregatedMetricsResponseBody taskmanagersMetricsGet(String get, String agg, String taskmanagers) throws ApiException {
        ApiResponse<AggregatedMetricsResponseBody> resp = taskmanagersMetricsGetWithHttpInfo(get, agg, taskmanagers);
        return resp.getData();
    }

    /**
     * 
     * Provides access to aggregated task manager metrics.
     * 
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @param agg
     *            Comma-separated list of aggregation modes which should be
     *            calculated. Available aggregations are: \&quot;min, max, sum,
     *            avg\&quot;. (optional)
     * @param taskmanagers
     *            Comma-separated list of 32-character hexadecimal strings to
     *            select specific task managers. (optional)
     * @return ApiResponse&lt;AggregatedMetricsResponseBody&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<AggregatedMetricsResponseBody> taskmanagersMetricsGetWithHttpInfo(
            String get,
            String agg,
            String taskmanagers) throws ApiException {
        com.squareup.okhttp.Call call = taskmanagersMetricsGetValidateBeforeCall(get, agg, taskmanagers, null, null);
        Type localVarReturnType = new TypeToken<AggregatedMetricsResponseBody>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Provides access to aggregated task manager metrics.
     * 
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @param agg
     *            Comma-separated list of aggregation modes which should be
     *            calculated. Available aggregations are: \&quot;min, max, sum,
     *            avg\&quot;. (optional)
     * @param taskmanagers
     *            Comma-separated list of 32-character hexadecimal strings to
     *            select specific task managers. (optional)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call taskmanagersMetricsGetAsync(
            String get,
            String agg,
            String taskmanagers,
            final ApiCallback<AggregatedMetricsResponseBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskmanagersMetricsGetValidateBeforeCall(get, agg, taskmanagers, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<AggregatedMetricsResponseBody>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for taskmanagersTaskmanageridGet
     * 
     * @param taskmanagerid
     *            32-character hexadecimal string that identifies a task
     *            manager. (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskmanagersTaskmanageridGetCall(
            String taskmanagerid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taskmanagers/{taskmanagerid}".replaceAll("\\{" + "taskmanagerid" + "\\}",
                apiClient.escapeString(taskmanagerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call taskmanagersTaskmanageridGetValidateBeforeCall(
            String taskmanagerid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'taskmanagerid' is set
        if (taskmanagerid == null) {
            throw new ApiException(
                    "Missing the required parameter 'taskmanagerid' when calling taskmanagersTaskmanageridGet(Async)");
        }

        com.squareup.okhttp.Call call = taskmanagersTaskmanageridGetCall(taskmanagerid, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns details for a task manager.
     * \&quot;metrics.memorySegmentsAvailable\&quot; and
     * \&quot;metrics.memorySegmentsTotal\&quot; are deprecated. Please use
     * \&quot;metrics.nettyShuffleMemorySegmentsAvailable\&quot; and
     * \&quot;metrics.nettyShuffleMemorySegmentsTotal\&quot; instead.
     * 
     * @param taskmanagerid
     *            32-character hexadecimal string that identifies a task
     *            manager. (required)
     * @return TaskManagerDetailsInfo
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public TaskManagerDetailsInfo taskmanagersTaskmanageridGet(String taskmanagerid) throws ApiException {
        ApiResponse<TaskManagerDetailsInfo> resp = taskmanagersTaskmanageridGetWithHttpInfo(taskmanagerid);
        return resp.getData();
    }

    /**
     * 
     * Returns details for a task manager.
     * \&quot;metrics.memorySegmentsAvailable\&quot; and
     * \&quot;metrics.memorySegmentsTotal\&quot; are deprecated. Please use
     * \&quot;metrics.nettyShuffleMemorySegmentsAvailable\&quot; and
     * \&quot;metrics.nettyShuffleMemorySegmentsTotal\&quot; instead.
     * 
     * @param taskmanagerid
     *            32-character hexadecimal string that identifies a task
     *            manager. (required)
     * @return ApiResponse&lt;TaskManagerDetailsInfo&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<TaskManagerDetailsInfo> taskmanagersTaskmanageridGetWithHttpInfo(String taskmanagerid)
            throws ApiException {
        com.squareup.okhttp.Call call = taskmanagersTaskmanageridGetValidateBeforeCall(taskmanagerid, null, null);
        Type localVarReturnType = new TypeToken<TaskManagerDetailsInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns details for a task manager.
     * \&quot;metrics.memorySegmentsAvailable\&quot; and
     * \&quot;metrics.memorySegmentsTotal\&quot; are deprecated. Please use
     * \&quot;metrics.nettyShuffleMemorySegmentsAvailable\&quot; and
     * \&quot;metrics.nettyShuffleMemorySegmentsTotal\&quot; instead.
     * 
     * @param taskmanagerid
     *            32-character hexadecimal string that identifies a task
     *            manager. (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call taskmanagersTaskmanageridGetAsync(
            String taskmanagerid,
            final ApiCallback<TaskManagerDetailsInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskmanagersTaskmanageridGetValidateBeforeCall(taskmanagerid, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<TaskManagerDetailsInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for taskmanagersTaskmanageridLogsGet
     * 
     * @param taskmanagerid
     *            32-character hexadecimal string that identifies a task
     *            manager. (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskmanagersTaskmanageridLogsGetCall(
            String taskmanagerid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taskmanagers/{taskmanagerid}/logs".replaceAll("\\{" + "taskmanagerid" + "\\}",
                apiClient.escapeString(taskmanagerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call taskmanagersTaskmanageridLogsGetValidateBeforeCall(
            String taskmanagerid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'taskmanagerid' is set
        if (taskmanagerid == null) {
            throw new ApiException(
                    "Missing the required parameter 'taskmanagerid' when calling taskmanagersTaskmanageridLogsGet(Async)");
        }

        com.squareup.okhttp.Call call = taskmanagersTaskmanageridLogsGetCall(taskmanagerid, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the list of log files on a TaskManager.
     * 
     * @param taskmanagerid
     *            32-character hexadecimal string that identifies a task
     *            manager. (required)
     * @return LogListInfo
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public LogListInfo taskmanagersTaskmanageridLogsGet(String taskmanagerid) throws ApiException {
        ApiResponse<LogListInfo> resp = taskmanagersTaskmanageridLogsGetWithHttpInfo(taskmanagerid);
        return resp.getData();
    }

    /**
     * 
     * Returns the list of log files on a TaskManager.
     * 
     * @param taskmanagerid
     *            32-character hexadecimal string that identifies a task
     *            manager. (required)
     * @return ApiResponse&lt;LogListInfo&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<LogListInfo> taskmanagersTaskmanageridLogsGetWithHttpInfo(String taskmanagerid) throws ApiException {
        com.squareup.okhttp.Call call = taskmanagersTaskmanageridLogsGetValidateBeforeCall(taskmanagerid, null, null);
        Type localVarReturnType = new TypeToken<LogListInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns the list of log files on a TaskManager.
     * 
     * @param taskmanagerid
     *            32-character hexadecimal string that identifies a task
     *            manager. (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call taskmanagersTaskmanageridLogsGetAsync(
            String taskmanagerid,
            final ApiCallback<LogListInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskmanagersTaskmanageridLogsGetValidateBeforeCall(taskmanagerid, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<LogListInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for taskmanagersTaskmanageridMetricsGet
     * 
     * @param taskmanagerid
     *            32-character hexadecimal string that identifies a task
     *            manager. (required)
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskmanagersTaskmanageridMetricsGetCall(
            String taskmanagerid,
            String get,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taskmanagers/{taskmanagerid}/metrics".replaceAll("\\{" + "taskmanagerid" + "\\}",
                apiClient.escapeString(taskmanagerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (get != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("get", get));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call taskmanagersTaskmanageridMetricsGetValidateBeforeCall(
            String taskmanagerid,
            String get,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'taskmanagerid' is set
        if (taskmanagerid == null) {
            throw new ApiException(
                    "Missing the required parameter 'taskmanagerid' when calling taskmanagersTaskmanageridMetricsGet(Async)");
        }

        com.squareup.okhttp.Call call = taskmanagersTaskmanageridMetricsGetCall(taskmanagerid, get, progressListener,
                progressRequestListener);
        return call;

    }

    /**
     * 
     * Provides access to task manager metrics.
     * 
     * @param taskmanagerid
     *            32-character hexadecimal string that identifies a task
     *            manager. (required)
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @return MetricCollectionResponseBody
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public MetricCollectionResponseBody taskmanagersTaskmanageridMetricsGet(String taskmanagerid, String get)
            throws ApiException {
        ApiResponse<MetricCollectionResponseBody> resp = taskmanagersTaskmanageridMetricsGetWithHttpInfo(taskmanagerid, get);
        return resp.getData();
    }

    /**
     * 
     * Provides access to task manager metrics.
     * 
     * @param taskmanagerid
     *            32-character hexadecimal string that identifies a task
     *            manager. (required)
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @return ApiResponse&lt;MetricCollectionResponseBody&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<MetricCollectionResponseBody> taskmanagersTaskmanageridMetricsGetWithHttpInfo(
            String taskmanagerid,
            String get) throws ApiException {
        com.squareup.okhttp.Call call = taskmanagersTaskmanageridMetricsGetValidateBeforeCall(taskmanagerid, get, null, null);
        Type localVarReturnType = new TypeToken<MetricCollectionResponseBody>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Provides access to task manager metrics.
     * 
     * @param taskmanagerid
     *            32-character hexadecimal string that identifies a task
     *            manager. (required)
     * @param get
     *            Comma-separated list of string values to select specific
     *            metrics. (optional)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call taskmanagersTaskmanageridMetricsGetAsync(
            String taskmanagerid,
            String get,
            final ApiCallback<MetricCollectionResponseBody> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskmanagersTaskmanageridMetricsGetValidateBeforeCall(taskmanagerid, get,
                progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MetricCollectionResponseBody>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * Build call for taskmanagersTaskmanageridThreadDumpGet
     * 
     * @param taskmanagerid
     *            32-character hexadecimal string that identifies a task
     *            manager. (required)
     * @param progressListener
     *            Progress listener
     * @param progressRequestListener
     *            Progress request listener
     * @return Call to execute
     * @throws ApiException
     *             If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call taskmanagersTaskmanageridThreadDumpGetCall(
            String taskmanagerid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/taskmanagers/{taskmanagerid}/thread-dump".replaceAll("\\{" + "taskmanagerid" + "\\}",
                apiClient.escapeString(taskmanagerid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = { "application/json" };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null)
            localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {};
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody,
                localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    private com.squareup.okhttp.Call taskmanagersTaskmanageridThreadDumpGetValidateBeforeCall(
            String taskmanagerid,
            final ProgressResponseBody.ProgressListener progressListener,
            final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'taskmanagerid' is set
        if (taskmanagerid == null) {
            throw new ApiException(
                    "Missing the required parameter 'taskmanagerid' when calling taskmanagersTaskmanageridThreadDumpGet(Async)");
        }

        com.squareup.okhttp.Call call = taskmanagersTaskmanageridThreadDumpGetCall(taskmanagerid, progressListener,
                progressRequestListener);
        return call;
    }

    /**
     * 
     * Returns the thread dump of the requested TaskManager.
     * 
     * @param taskmanagerid
     *            32-character hexadecimal string that identifies a task
     *            manager. (required)
     * @return ThreadDumpInfo
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ThreadDumpInfo taskmanagersTaskmanageridThreadDumpGet(String taskmanagerid) throws ApiException {
        ApiResponse<ThreadDumpInfo> resp = taskmanagersTaskmanageridThreadDumpGetWithHttpInfo(taskmanagerid);
        return resp.getData();
    }

    /**
     * 
     * Returns the thread dump of the requested TaskManager.
     * 
     * @param taskmanagerid
     *            32-character hexadecimal string that identifies a task
     *            manager. (required)
     * @return ApiResponse&lt;ThreadDumpInfo&gt;
     * @throws ApiException
     *             If fail to call the API, e.g. server error or cannot
     *             deserialize the response body
     */
    public ApiResponse<ThreadDumpInfo> taskmanagersTaskmanageridThreadDumpGetWithHttpInfo(String taskmanagerid)
            throws ApiException {
        com.squareup.okhttp.Call call = taskmanagersTaskmanageridThreadDumpGetValidateBeforeCall(taskmanagerid, null, null);
        Type localVarReturnType = new TypeToken<ThreadDumpInfo>() {
        }.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (asynchronously) Returns the thread dump of the requested TaskManager.
     * 
     * @param taskmanagerid
     *            32-character hexadecimal string that identifies a task
     *            manager. (required)
     * @param callback
     *            The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException
     *             If fail to process the API call, e.g. serializing the request
     *             body object
     */
    public com.squareup.okhttp.Call taskmanagersTaskmanageridThreadDumpGetAsync(
            String taskmanagerid,
            final ApiCallback<ThreadDumpInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = taskmanagersTaskmanageridThreadDumpGetValidateBeforeCall(taskmanagerid, progressListener,
                progressRequestListener);
        Type localVarReturnType = new TypeToken<ThreadDumpInfo>() {
        }.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
