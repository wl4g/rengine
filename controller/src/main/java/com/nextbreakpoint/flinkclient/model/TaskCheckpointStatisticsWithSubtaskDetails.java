/*
 * Flink JobManager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1/1.15-SNAPSHOT
 * Contact: user@flink.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.nextbreakpoint.flinkclient.model;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * TaskCheckpointStatisticsWithSubtaskDetails
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
        date = "2023-04-02T23:14:46.617621+08:00[Asia/Shanghai]")
public class TaskCheckpointStatisticsWithSubtaskDetails {
    @SerializedName("id")
    private Long id = null;

    /**
     * Gets or Sets status
     */
    @JsonAdapter(StatusEnum.Adapter.class)
    public enum StatusEnum {
        IN_PROGRESS("IN_PROGRESS"), COMPLETED("COMPLETED"), FAILED("FAILED");

        private String value;

        StatusEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static StatusEnum fromValue(String text) {
            for (StatusEnum b : StatusEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<StatusEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public StatusEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return StatusEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("status")
    private StatusEnum status = null;

    @SerializedName("latest_ack_timestamp")
    private Long latestAckTimestamp = null;

    @SerializedName("state_size")
    private Long stateSize = null;

    @SerializedName("end_to_end_duration")
    private Long endToEndDuration = null;

    @SerializedName("alignment_buffered")
    private Long alignmentBuffered = null;

    @SerializedName("processed_data")
    private Long processedData = null;

    @SerializedName("persisted_data")
    private Long persistedData = null;

    @SerializedName("num_subtasks")
    private Integer numSubtasks = null;

    @SerializedName("num_acknowledged_subtasks")
    private Integer numAcknowledgedSubtasks = null;

    @SerializedName("summary")
    private Summary summary = null;

    @SerializedName("subtasks")
    private List<SubtaskCheckpointStatistics> subtasks = null;

    public TaskCheckpointStatisticsWithSubtaskDetails id(Long id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     * 
     * @return id
     **/
    @Schema(description = "")
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public TaskCheckpointStatisticsWithSubtaskDetails status(StatusEnum status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     * 
     * @return status
     **/
    @Schema(description = "")
    public StatusEnum getStatus() {
        return status;
    }

    public void setStatus(StatusEnum status) {
        this.status = status;
    }

    public TaskCheckpointStatisticsWithSubtaskDetails latestAckTimestamp(Long latestAckTimestamp) {
        this.latestAckTimestamp = latestAckTimestamp;
        return this;
    }

    /**
     * Get latestAckTimestamp
     * 
     * @return latestAckTimestamp
     **/
    @Schema(description = "")
    public Long getLatestAckTimestamp() {
        return latestAckTimestamp;
    }

    public void setLatestAckTimestamp(Long latestAckTimestamp) {
        this.latestAckTimestamp = latestAckTimestamp;
    }

    public TaskCheckpointStatisticsWithSubtaskDetails stateSize(Long stateSize) {
        this.stateSize = stateSize;
        return this;
    }

    /**
     * Get stateSize
     * 
     * @return stateSize
     **/
    @Schema(description = "")
    public Long getStateSize() {
        return stateSize;
    }

    public void setStateSize(Long stateSize) {
        this.stateSize = stateSize;
    }

    public TaskCheckpointStatisticsWithSubtaskDetails endToEndDuration(Long endToEndDuration) {
        this.endToEndDuration = endToEndDuration;
        return this;
    }

    /**
     * Get endToEndDuration
     * 
     * @return endToEndDuration
     **/
    @Schema(description = "")
    public Long getEndToEndDuration() {
        return endToEndDuration;
    }

    public void setEndToEndDuration(Long endToEndDuration) {
        this.endToEndDuration = endToEndDuration;
    }

    public TaskCheckpointStatisticsWithSubtaskDetails alignmentBuffered(Long alignmentBuffered) {
        this.alignmentBuffered = alignmentBuffered;
        return this;
    }

    /**
     * Get alignmentBuffered
     * 
     * @return alignmentBuffered
     **/
    @Schema(description = "")
    public Long getAlignmentBuffered() {
        return alignmentBuffered;
    }

    public void setAlignmentBuffered(Long alignmentBuffered) {
        this.alignmentBuffered = alignmentBuffered;
    }

    public TaskCheckpointStatisticsWithSubtaskDetails processedData(Long processedData) {
        this.processedData = processedData;
        return this;
    }

    /**
     * Get processedData
     * 
     * @return processedData
     **/
    @Schema(description = "")
    public Long getProcessedData() {
        return processedData;
    }

    public void setProcessedData(Long processedData) {
        this.processedData = processedData;
    }

    public TaskCheckpointStatisticsWithSubtaskDetails persistedData(Long persistedData) {
        this.persistedData = persistedData;
        return this;
    }

    /**
     * Get persistedData
     * 
     * @return persistedData
     **/
    @Schema(description = "")
    public Long getPersistedData() {
        return persistedData;
    }

    public void setPersistedData(Long persistedData) {
        this.persistedData = persistedData;
    }

    public TaskCheckpointStatisticsWithSubtaskDetails numSubtasks(Integer numSubtasks) {
        this.numSubtasks = numSubtasks;
        return this;
    }

    /**
     * Get numSubtasks
     * 
     * @return numSubtasks
     **/
    @Schema(description = "")
    public Integer getNumSubtasks() {
        return numSubtasks;
    }

    public void setNumSubtasks(Integer numSubtasks) {
        this.numSubtasks = numSubtasks;
    }

    public TaskCheckpointStatisticsWithSubtaskDetails numAcknowledgedSubtasks(Integer numAcknowledgedSubtasks) {
        this.numAcknowledgedSubtasks = numAcknowledgedSubtasks;
        return this;
    }

    /**
     * Get numAcknowledgedSubtasks
     * 
     * @return numAcknowledgedSubtasks
     **/
    @Schema(description = "")
    public Integer getNumAcknowledgedSubtasks() {
        return numAcknowledgedSubtasks;
    }

    public void setNumAcknowledgedSubtasks(Integer numAcknowledgedSubtasks) {
        this.numAcknowledgedSubtasks = numAcknowledgedSubtasks;
    }

    public TaskCheckpointStatisticsWithSubtaskDetails summary(Summary summary) {
        this.summary = summary;
        return this;
    }

    /**
     * Get summary
     * 
     * @return summary
     **/
    @Schema(description = "")
    public Summary getSummary() {
        return summary;
    }

    public void setSummary(Summary summary) {
        this.summary = summary;
    }

    public TaskCheckpointStatisticsWithSubtaskDetails subtasks(List<SubtaskCheckpointStatistics> subtasks) {
        this.subtasks = subtasks;
        return this;
    }

    public TaskCheckpointStatisticsWithSubtaskDetails addSubtasksItem(SubtaskCheckpointStatistics subtasksItem) {
        if (this.subtasks == null) {
            this.subtasks = new ArrayList<SubtaskCheckpointStatistics>();
        }
        this.subtasks.add(subtasksItem);
        return this;
    }

    /**
     * Get subtasks
     * 
     * @return subtasks
     **/
    @Schema(description = "")
    public List<SubtaskCheckpointStatistics> getSubtasks() {
        return subtasks;
    }

    public void setSubtasks(List<SubtaskCheckpointStatistics> subtasks) {
        this.subtasks = subtasks;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TaskCheckpointStatisticsWithSubtaskDetails taskCheckpointStatisticsWithSubtaskDetails = (TaskCheckpointStatisticsWithSubtaskDetails) o;
        return Objects.equals(this.id, taskCheckpointStatisticsWithSubtaskDetails.id)
                && Objects.equals(this.status, taskCheckpointStatisticsWithSubtaskDetails.status)
                && Objects.equals(this.latestAckTimestamp, taskCheckpointStatisticsWithSubtaskDetails.latestAckTimestamp)
                && Objects.equals(this.stateSize, taskCheckpointStatisticsWithSubtaskDetails.stateSize)
                && Objects.equals(this.endToEndDuration, taskCheckpointStatisticsWithSubtaskDetails.endToEndDuration)
                && Objects.equals(this.alignmentBuffered, taskCheckpointStatisticsWithSubtaskDetails.alignmentBuffered)
                && Objects.equals(this.processedData, taskCheckpointStatisticsWithSubtaskDetails.processedData)
                && Objects.equals(this.persistedData, taskCheckpointStatisticsWithSubtaskDetails.persistedData)
                && Objects.equals(this.numSubtasks, taskCheckpointStatisticsWithSubtaskDetails.numSubtasks)
                && Objects.equals(this.numAcknowledgedSubtasks,
                        taskCheckpointStatisticsWithSubtaskDetails.numAcknowledgedSubtasks)
                && Objects.equals(this.summary, taskCheckpointStatisticsWithSubtaskDetails.summary)
                && Objects.equals(this.subtasks, taskCheckpointStatisticsWithSubtaskDetails.subtasks);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, status, latestAckTimestamp, stateSize, endToEndDuration, alignmentBuffered, processedData,
                persistedData, numSubtasks, numAcknowledgedSubtasks, summary, subtasks);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TaskCheckpointStatisticsWithSubtaskDetails {\n");

        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    latestAckTimestamp: ").append(toIndentedString(latestAckTimestamp)).append("\n");
        sb.append("    stateSize: ").append(toIndentedString(stateSize)).append("\n");
        sb.append("    endToEndDuration: ").append(toIndentedString(endToEndDuration)).append("\n");
        sb.append("    alignmentBuffered: ").append(toIndentedString(alignmentBuffered)).append("\n");
        sb.append("    processedData: ").append(toIndentedString(processedData)).append("\n");
        sb.append("    persistedData: ").append(toIndentedString(persistedData)).append("\n");
        sb.append("    numSubtasks: ").append(toIndentedString(numSubtasks)).append("\n");
        sb.append("    numAcknowledgedSubtasks: ").append(toIndentedString(numAcknowledgedSubtasks)).append("\n");
        sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
        sb.append("    subtasks: ").append(toIndentedString(subtasks)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
