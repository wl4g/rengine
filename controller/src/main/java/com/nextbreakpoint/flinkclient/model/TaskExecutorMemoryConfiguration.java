/*
 * Flink JobManager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1/1.15-SNAPSHOT
 * Contact: user@flink.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.nextbreakpoint.flinkclient.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * TaskExecutorMemoryConfiguration
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
        date = "2023-04-02T23:14:46.617621+08:00[Asia/Shanghai]")
public class TaskExecutorMemoryConfiguration {
    @SerializedName("frameworkHeap")
    private Long frameworkHeap = null;

    @SerializedName("taskHeap")
    private Long taskHeap = null;

    @SerializedName("frameworkOffHeap")
    private Long frameworkOffHeap = null;

    @SerializedName("taskOffHeap")
    private Long taskOffHeap = null;

    @SerializedName("networkMemory")
    private Long networkMemory = null;

    @SerializedName("managedMemory")
    private Long managedMemory = null;

    @SerializedName("jvmMetaspace")
    private Long jvmMetaspace = null;

    @SerializedName("jvmOverhead")
    private Long jvmOverhead = null;

    @SerializedName("totalFlinkMemory")
    private Long totalFlinkMemory = null;

    @SerializedName("totalProcessMemory")
    private Long totalProcessMemory = null;

    public TaskExecutorMemoryConfiguration frameworkHeap(Long frameworkHeap) {
        this.frameworkHeap = frameworkHeap;
        return this;
    }

    /**
     * Get frameworkHeap
     * 
     * @return frameworkHeap
     **/
    @Schema(description = "")
    public Long getFrameworkHeap() {
        return frameworkHeap;
    }

    public void setFrameworkHeap(Long frameworkHeap) {
        this.frameworkHeap = frameworkHeap;
    }

    public TaskExecutorMemoryConfiguration taskHeap(Long taskHeap) {
        this.taskHeap = taskHeap;
        return this;
    }

    /**
     * Get taskHeap
     * 
     * @return taskHeap
     **/
    @Schema(description = "")
    public Long getTaskHeap() {
        return taskHeap;
    }

    public void setTaskHeap(Long taskHeap) {
        this.taskHeap = taskHeap;
    }

    public TaskExecutorMemoryConfiguration frameworkOffHeap(Long frameworkOffHeap) {
        this.frameworkOffHeap = frameworkOffHeap;
        return this;
    }

    /**
     * Get frameworkOffHeap
     * 
     * @return frameworkOffHeap
     **/
    @Schema(description = "")
    public Long getFrameworkOffHeap() {
        return frameworkOffHeap;
    }

    public void setFrameworkOffHeap(Long frameworkOffHeap) {
        this.frameworkOffHeap = frameworkOffHeap;
    }

    public TaskExecutorMemoryConfiguration taskOffHeap(Long taskOffHeap) {
        this.taskOffHeap = taskOffHeap;
        return this;
    }

    /**
     * Get taskOffHeap
     * 
     * @return taskOffHeap
     **/
    @Schema(description = "")
    public Long getTaskOffHeap() {
        return taskOffHeap;
    }

    public void setTaskOffHeap(Long taskOffHeap) {
        this.taskOffHeap = taskOffHeap;
    }

    public TaskExecutorMemoryConfiguration networkMemory(Long networkMemory) {
        this.networkMemory = networkMemory;
        return this;
    }

    /**
     * Get networkMemory
     * 
     * @return networkMemory
     **/
    @Schema(description = "")
    public Long getNetworkMemory() {
        return networkMemory;
    }

    public void setNetworkMemory(Long networkMemory) {
        this.networkMemory = networkMemory;
    }

    public TaskExecutorMemoryConfiguration managedMemory(Long managedMemory) {
        this.managedMemory = managedMemory;
        return this;
    }

    /**
     * Get managedMemory
     * 
     * @return managedMemory
     **/
    @Schema(description = "")
    public Long getManagedMemory() {
        return managedMemory;
    }

    public void setManagedMemory(Long managedMemory) {
        this.managedMemory = managedMemory;
    }

    public TaskExecutorMemoryConfiguration jvmMetaspace(Long jvmMetaspace) {
        this.jvmMetaspace = jvmMetaspace;
        return this;
    }

    /**
     * Get jvmMetaspace
     * 
     * @return jvmMetaspace
     **/
    @Schema(description = "")
    public Long getJvmMetaspace() {
        return jvmMetaspace;
    }

    public void setJvmMetaspace(Long jvmMetaspace) {
        this.jvmMetaspace = jvmMetaspace;
    }

    public TaskExecutorMemoryConfiguration jvmOverhead(Long jvmOverhead) {
        this.jvmOverhead = jvmOverhead;
        return this;
    }

    /**
     * Get jvmOverhead
     * 
     * @return jvmOverhead
     **/
    @Schema(description = "")
    public Long getJvmOverhead() {
        return jvmOverhead;
    }

    public void setJvmOverhead(Long jvmOverhead) {
        this.jvmOverhead = jvmOverhead;
    }

    public TaskExecutorMemoryConfiguration totalFlinkMemory(Long totalFlinkMemory) {
        this.totalFlinkMemory = totalFlinkMemory;
        return this;
    }

    /**
     * Get totalFlinkMemory
     * 
     * @return totalFlinkMemory
     **/
    @Schema(description = "")
    public Long getTotalFlinkMemory() {
        return totalFlinkMemory;
    }

    public void setTotalFlinkMemory(Long totalFlinkMemory) {
        this.totalFlinkMemory = totalFlinkMemory;
    }

    public TaskExecutorMemoryConfiguration totalProcessMemory(Long totalProcessMemory) {
        this.totalProcessMemory = totalProcessMemory;
        return this;
    }

    /**
     * Get totalProcessMemory
     * 
     * @return totalProcessMemory
     **/
    @Schema(description = "")
    public Long getTotalProcessMemory() {
        return totalProcessMemory;
    }

    public void setTotalProcessMemory(Long totalProcessMemory) {
        this.totalProcessMemory = totalProcessMemory;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TaskExecutorMemoryConfiguration taskExecutorMemoryConfiguration = (TaskExecutorMemoryConfiguration) o;
        return Objects.equals(this.frameworkHeap, taskExecutorMemoryConfiguration.frameworkHeap)
                && Objects.equals(this.taskHeap, taskExecutorMemoryConfiguration.taskHeap)
                && Objects.equals(this.frameworkOffHeap, taskExecutorMemoryConfiguration.frameworkOffHeap)
                && Objects.equals(this.taskOffHeap, taskExecutorMemoryConfiguration.taskOffHeap)
                && Objects.equals(this.networkMemory, taskExecutorMemoryConfiguration.networkMemory)
                && Objects.equals(this.managedMemory, taskExecutorMemoryConfiguration.managedMemory)
                && Objects.equals(this.jvmMetaspace, taskExecutorMemoryConfiguration.jvmMetaspace)
                && Objects.equals(this.jvmOverhead, taskExecutorMemoryConfiguration.jvmOverhead)
                && Objects.equals(this.totalFlinkMemory, taskExecutorMemoryConfiguration.totalFlinkMemory)
                && Objects.equals(this.totalProcessMemory, taskExecutorMemoryConfiguration.totalProcessMemory);
    }

    @Override
    public int hashCode() {
        return Objects.hash(frameworkHeap, taskHeap, frameworkOffHeap, taskOffHeap, networkMemory, managedMemory, jvmMetaspace,
                jvmOverhead, totalFlinkMemory, totalProcessMemory);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TaskExecutorMemoryConfiguration {\n");

        sb.append("    frameworkHeap: ").append(toIndentedString(frameworkHeap)).append("\n");
        sb.append("    taskHeap: ").append(toIndentedString(taskHeap)).append("\n");
        sb.append("    frameworkOffHeap: ").append(toIndentedString(frameworkOffHeap)).append("\n");
        sb.append("    taskOffHeap: ").append(toIndentedString(taskOffHeap)).append("\n");
        sb.append("    networkMemory: ").append(toIndentedString(networkMemory)).append("\n");
        sb.append("    managedMemory: ").append(toIndentedString(managedMemory)).append("\n");
        sb.append("    jvmMetaspace: ").append(toIndentedString(jvmMetaspace)).append("\n");
        sb.append("    jvmOverhead: ").append(toIndentedString(jvmOverhead)).append("\n");
        sb.append("    totalFlinkMemory: ").append(toIndentedString(totalFlinkMemory)).append("\n");
        sb.append("    totalProcessMemory: ").append(toIndentedString(totalProcessMemory)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
