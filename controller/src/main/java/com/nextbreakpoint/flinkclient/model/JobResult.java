/*
 * Flink JobManager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1/1.15-SNAPSHOT
 * Contact: user@flink.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.nextbreakpoint.flinkclient.model;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * JobResult
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
        date = "2023-04-02T23:14:46.617621+08:00[Asia/Shanghai]")
public class JobResult {
    @SerializedName("jobId")
    private String jobId = null;

    /**
     * Gets or Sets applicationStatus
     */
    @JsonAdapter(ApplicationStatusEnum.Adapter.class)
    public enum ApplicationStatusEnum {
        SUCCEEDED("SUCCEEDED"), FAILED("FAILED"), CANCELED("CANCELED"), UNKNOWN("UNKNOWN");

        private String value;

        ApplicationStatusEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static ApplicationStatusEnum fromValue(String text) {
            for (ApplicationStatusEnum b : ApplicationStatusEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<ApplicationStatusEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final ApplicationStatusEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public ApplicationStatusEnum read(final JsonReader jsonReader) throws IOException {
                Object value = jsonReader.nextString();
                return ApplicationStatusEnum.fromValue(String.valueOf(value));
            }
        }
    }

    @SerializedName("applicationStatus")
    private ApplicationStatusEnum applicationStatus = null;

    @SerializedName("accumulatorResults")
    private Map<String, SerializedValueOptionalFailureObject> accumulatorResults = null;

    @SerializedName("netRuntime")
    private Long netRuntime = null;

    @SerializedName("serializedThrowable")
    private SerializedThrowable serializedThrowable = null;

    @SerializedName("success")
    private Boolean success = null;

    public JobResult jobId(String jobId) {
        this.jobId = jobId;
        return this;
    }

    /**
     * Get jobId
     * 
     * @return jobId
     **/
    @Schema(description = "")
    public String getJobId() {
        return jobId;
    }

    public void setJobId(String jobId) {
        this.jobId = jobId;
    }

    public JobResult applicationStatus(ApplicationStatusEnum applicationStatus) {
        this.applicationStatus = applicationStatus;
        return this;
    }

    /**
     * Get applicationStatus
     * 
     * @return applicationStatus
     **/
    @Schema(description = "")
    public ApplicationStatusEnum getApplicationStatus() {
        return applicationStatus;
    }

    public void setApplicationStatus(ApplicationStatusEnum applicationStatus) {
        this.applicationStatus = applicationStatus;
    }

    public JobResult accumulatorResults(Map<String, SerializedValueOptionalFailureObject> accumulatorResults) {
        this.accumulatorResults = accumulatorResults;
        return this;
    }

    public JobResult putAccumulatorResultsItem(String key, SerializedValueOptionalFailureObject accumulatorResultsItem) {
        if (this.accumulatorResults == null) {
            this.accumulatorResults = new HashMap<String, SerializedValueOptionalFailureObject>();
        }
        this.accumulatorResults.put(key, accumulatorResultsItem);
        return this;
    }

    /**
     * Get accumulatorResults
     * 
     * @return accumulatorResults
     **/
    @Schema(description = "")
    public Map<String, SerializedValueOptionalFailureObject> getAccumulatorResults() {
        return accumulatorResults;
    }

    public void setAccumulatorResults(Map<String, SerializedValueOptionalFailureObject> accumulatorResults) {
        this.accumulatorResults = accumulatorResults;
    }

    public JobResult netRuntime(Long netRuntime) {
        this.netRuntime = netRuntime;
        return this;
    }

    /**
     * Get netRuntime
     * 
     * @return netRuntime
     **/
    @Schema(description = "")
    public Long getNetRuntime() {
        return netRuntime;
    }

    public void setNetRuntime(Long netRuntime) {
        this.netRuntime = netRuntime;
    }

    public JobResult serializedThrowable(SerializedThrowable serializedThrowable) {
        this.serializedThrowable = serializedThrowable;
        return this;
    }

    /**
     * Get serializedThrowable
     * 
     * @return serializedThrowable
     **/
    @Schema(description = "")
    public SerializedThrowable getSerializedThrowable() {
        return serializedThrowable;
    }

    public void setSerializedThrowable(SerializedThrowable serializedThrowable) {
        this.serializedThrowable = serializedThrowable;
    }

    public JobResult success(Boolean success) {
        this.success = success;
        return this;
    }

    /**
     * Get success
     * 
     * @return success
     **/
    @Schema(description = "")
    public Boolean isSuccess() {
        return success;
    }

    public void setSuccess(Boolean success) {
        this.success = success;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        JobResult jobResult = (JobResult) o;
        return Objects.equals(this.jobId, jobResult.jobId) && Objects.equals(this.applicationStatus, jobResult.applicationStatus)
                && Objects.equals(this.accumulatorResults, jobResult.accumulatorResults)
                && Objects.equals(this.netRuntime, jobResult.netRuntime)
                && Objects.equals(this.serializedThrowable, jobResult.serializedThrowable)
                && Objects.equals(this.success, jobResult.success);
    }

    @Override
    public int hashCode() {
        return Objects.hash(jobId, applicationStatus, accumulatorResults, netRuntime, serializedThrowable, success);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class JobResult {\n");

        sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
        sb.append("    applicationStatus: ").append(toIndentedString(applicationStatus)).append("\n");
        sb.append("    accumulatorResults: ").append(toIndentedString(accumulatorResults)).append("\n");
        sb.append("    netRuntime: ").append(toIndentedString(netRuntime)).append("\n");
        sb.append("    serializedThrowable: ").append(toIndentedString(serializedThrowable)).append("\n");
        sb.append("    success: ").append(toIndentedString(success)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
