/*
 * Flink JobManager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1/1.15-SNAPSHOT
 * Contact: user@flink.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.nextbreakpoint.flinkclient.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * ExecutionExceptionInfo
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
        date = "2023-04-02T23:14:46.617621+08:00[Asia/Shanghai]")
public class ExecutionExceptionInfo {
    @SerializedName("exception")
    private String exception = null;

    @SerializedName("task")
    private String task = null;

    @SerializedName("location")
    private String location = null;

    @SerializedName("timestamp")
    private Long timestamp = null;

    public ExecutionExceptionInfo exception(String exception) {
        this.exception = exception;
        return this;
    }

    /**
     * Get exception
     * 
     * @return exception
     **/
    @Schema(description = "")
    public String getException() {
        return exception;
    }

    public void setException(String exception) {
        this.exception = exception;
    }

    public ExecutionExceptionInfo task(String task) {
        this.task = task;
        return this;
    }

    /**
     * Get task
     * 
     * @return task
     **/
    @Schema(description = "")
    public String getTask() {
        return task;
    }

    public void setTask(String task) {
        this.task = task;
    }

    public ExecutionExceptionInfo location(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get location
     * 
     * @return location
     **/
    @Schema(description = "")
    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public ExecutionExceptionInfo timestamp(Long timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Get timestamp
     * 
     * @return timestamp
     **/
    @Schema(description = "")
    public Long getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Long timestamp) {
        this.timestamp = timestamp;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExecutionExceptionInfo executionExceptionInfo = (ExecutionExceptionInfo) o;
        return Objects.equals(this.exception, executionExceptionInfo.exception)
                && Objects.equals(this.task, executionExceptionInfo.task)
                && Objects.equals(this.location, executionExceptionInfo.location)
                && Objects.equals(this.timestamp, executionExceptionInfo.timestamp);
    }

    @Override
    public int hashCode() {
        return Objects.hash(exception, task, location, timestamp);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ExecutionExceptionInfo {\n");

        sb.append("    exception: ").append(toIndentedString(exception)).append("\n");
        sb.append("    task: ").append(toIndentedString(task)).append("\n");
        sb.append("    location: ").append(toIndentedString(location)).append("\n");
        sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
