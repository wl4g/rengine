/*
 * Flink JobManager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1/1.15-SNAPSHOT
 * Contact: user@flink.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.nextbreakpoint.flinkclient.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * CheckpointAlignment
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
        date = "2023-04-02T23:14:46.617621+08:00[Asia/Shanghai]")
public class CheckpointAlignment {
    @SerializedName("buffered")
    private Long buffered = null;

    @SerializedName("processed")
    private Long processed = null;

    @SerializedName("persisted")
    private Long persisted = null;

    @SerializedName("duration")
    private Long duration = null;

    public CheckpointAlignment buffered(Long buffered) {
        this.buffered = buffered;
        return this;
    }

    /**
     * Get buffered
     * 
     * @return buffered
     **/
    @Schema(description = "")
    public Long getBuffered() {
        return buffered;
    }

    public void setBuffered(Long buffered) {
        this.buffered = buffered;
    }

    public CheckpointAlignment processed(Long processed) {
        this.processed = processed;
        return this;
    }

    /**
     * Get processed
     * 
     * @return processed
     **/
    @Schema(description = "")
    public Long getProcessed() {
        return processed;
    }

    public void setProcessed(Long processed) {
        this.processed = processed;
    }

    public CheckpointAlignment persisted(Long persisted) {
        this.persisted = persisted;
        return this;
    }

    /**
     * Get persisted
     * 
     * @return persisted
     **/
    @Schema(description = "")
    public Long getPersisted() {
        return persisted;
    }

    public void setPersisted(Long persisted) {
        this.persisted = persisted;
    }

    public CheckpointAlignment duration(Long duration) {
        this.duration = duration;
        return this;
    }

    /**
     * Get duration
     * 
     * @return duration
     **/
    @Schema(description = "")
    public Long getDuration() {
        return duration;
    }

    public void setDuration(Long duration) {
        this.duration = duration;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CheckpointAlignment checkpointAlignment = (CheckpointAlignment) o;
        return Objects.equals(this.buffered, checkpointAlignment.buffered)
                && Objects.equals(this.processed, checkpointAlignment.processed)
                && Objects.equals(this.persisted, checkpointAlignment.persisted)
                && Objects.equals(this.duration, checkpointAlignment.duration);
    }

    @Override
    public int hashCode() {
        return Objects.hash(buffered, processed, persisted, duration);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CheckpointAlignment {\n");

        sb.append("    buffered: ").append(toIndentedString(buffered)).append("\n");
        sb.append("    processed: ").append(toIndentedString(processed)).append("\n");
        sb.append("    persisted: ").append(toIndentedString(persisted)).append("\n");
        sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
