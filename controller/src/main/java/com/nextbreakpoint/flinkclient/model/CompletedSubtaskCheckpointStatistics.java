/*
 * Flink JobManager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1/1.15-SNAPSHOT
 * Contact: user@flink.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.nextbreakpoint.flinkclient.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * CompletedSubtaskCheckpointStatistics
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
        date = "2023-04-02T23:14:46.617621+08:00[Asia/Shanghai]")
public class CompletedSubtaskCheckpointStatistics extends SubtaskCheckpointStatistics {
    @SerializedName("ack_timestamp")
    private Long ackTimestamp = null;

    @SerializedName("end_to_end_duration")
    private Long endToEndDuration = null;

    @SerializedName("state_size")
    private Long stateSize = null;

    @SerializedName("checkpoint")
    private CheckpointDuration checkpoint = null;

    @SerializedName("alignment")
    private CheckpointAlignment alignment = null;

    @SerializedName("start_delay")
    private Long startDelay = null;

    @SerializedName("unaligned_checkpoint")
    private Boolean unalignedCheckpoint = null;

    @SerializedName("aborted")
    private Boolean aborted = null;

    public CompletedSubtaskCheckpointStatistics ackTimestamp(Long ackTimestamp) {
        this.ackTimestamp = ackTimestamp;
        return this;
    }

    /**
     * Get ackTimestamp
     * 
     * @return ackTimestamp
     **/
    @Schema(description = "")
    public Long getAckTimestamp() {
        return ackTimestamp;
    }

    public void setAckTimestamp(Long ackTimestamp) {
        this.ackTimestamp = ackTimestamp;
    }

    public CompletedSubtaskCheckpointStatistics endToEndDuration(Long endToEndDuration) {
        this.endToEndDuration = endToEndDuration;
        return this;
    }

    /**
     * Get endToEndDuration
     * 
     * @return endToEndDuration
     **/
    @Schema(description = "")
    public Long getEndToEndDuration() {
        return endToEndDuration;
    }

    public void setEndToEndDuration(Long endToEndDuration) {
        this.endToEndDuration = endToEndDuration;
    }

    public CompletedSubtaskCheckpointStatistics stateSize(Long stateSize) {
        this.stateSize = stateSize;
        return this;
    }

    /**
     * Get stateSize
     * 
     * @return stateSize
     **/
    @Schema(description = "")
    public Long getStateSize() {
        return stateSize;
    }

    public void setStateSize(Long stateSize) {
        this.stateSize = stateSize;
    }

    public CompletedSubtaskCheckpointStatistics checkpoint(CheckpointDuration checkpoint) {
        this.checkpoint = checkpoint;
        return this;
    }

    /**
     * Get checkpoint
     * 
     * @return checkpoint
     **/
    @Schema(description = "")
    public CheckpointDuration getCheckpoint() {
        return checkpoint;
    }

    public void setCheckpoint(CheckpointDuration checkpoint) {
        this.checkpoint = checkpoint;
    }

    public CompletedSubtaskCheckpointStatistics alignment(CheckpointAlignment alignment) {
        this.alignment = alignment;
        return this;
    }

    /**
     * Get alignment
     * 
     * @return alignment
     **/
    @Schema(description = "")
    public CheckpointAlignment getAlignment() {
        return alignment;
    }

    public void setAlignment(CheckpointAlignment alignment) {
        this.alignment = alignment;
    }

    public CompletedSubtaskCheckpointStatistics startDelay(Long startDelay) {
        this.startDelay = startDelay;
        return this;
    }

    /**
     * Get startDelay
     * 
     * @return startDelay
     **/
    @Schema(description = "")
    public Long getStartDelay() {
        return startDelay;
    }

    public void setStartDelay(Long startDelay) {
        this.startDelay = startDelay;
    }

    public CompletedSubtaskCheckpointStatistics unalignedCheckpoint(Boolean unalignedCheckpoint) {
        this.unalignedCheckpoint = unalignedCheckpoint;
        return this;
    }

    /**
     * Get unalignedCheckpoint
     * 
     * @return unalignedCheckpoint
     **/
    @Schema(description = "")
    public Boolean isUnalignedCheckpoint() {
        return unalignedCheckpoint;
    }

    public void setUnalignedCheckpoint(Boolean unalignedCheckpoint) {
        this.unalignedCheckpoint = unalignedCheckpoint;
    }

    public CompletedSubtaskCheckpointStatistics aborted(Boolean aborted) {
        this.aborted = aborted;
        return this;
    }

    /**
     * Get aborted
     * 
     * @return aborted
     **/
    @Schema(description = "")
    public Boolean isAborted() {
        return aborted;
    }

    public void setAborted(Boolean aborted) {
        this.aborted = aborted;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CompletedSubtaskCheckpointStatistics completedSubtaskCheckpointStatistics = (CompletedSubtaskCheckpointStatistics) o;
        return Objects.equals(this.ackTimestamp, completedSubtaskCheckpointStatistics.ackTimestamp)
                && Objects.equals(this.endToEndDuration, completedSubtaskCheckpointStatistics.endToEndDuration)
                && Objects.equals(this.stateSize, completedSubtaskCheckpointStatistics.stateSize)
                && Objects.equals(this.checkpoint, completedSubtaskCheckpointStatistics.checkpoint)
                && Objects.equals(this.alignment, completedSubtaskCheckpointStatistics.alignment)
                && Objects.equals(this.startDelay, completedSubtaskCheckpointStatistics.startDelay)
                && Objects.equals(this.unalignedCheckpoint, completedSubtaskCheckpointStatistics.unalignedCheckpoint)
                && Objects.equals(this.aborted, completedSubtaskCheckpointStatistics.aborted) && super.equals(o);
    }

    @Override
    public int hashCode() {
        return Objects.hash(ackTimestamp, endToEndDuration, stateSize, checkpoint, alignment, startDelay, unalignedCheckpoint,
                aborted, super.hashCode());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CompletedSubtaskCheckpointStatistics {\n");
        sb.append("    ").append(toIndentedString(super.toString())).append("\n");
        sb.append("    ackTimestamp: ").append(toIndentedString(ackTimestamp)).append("\n");
        sb.append("    endToEndDuration: ").append(toIndentedString(endToEndDuration)).append("\n");
        sb.append("    stateSize: ").append(toIndentedString(stateSize)).append("\n");
        sb.append("    checkpoint: ").append(toIndentedString(checkpoint)).append("\n");
        sb.append("    alignment: ").append(toIndentedString(alignment)).append("\n");
        sb.append("    startDelay: ").append(toIndentedString(startDelay)).append("\n");
        sb.append("    unalignedCheckpoint: ").append(toIndentedString(unalignedCheckpoint)).append("\n");
        sb.append("    aborted: ").append(toIndentedString(aborted)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
