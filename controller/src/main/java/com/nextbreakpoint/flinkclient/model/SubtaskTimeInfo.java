/*
 * Flink JobManager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1/1.15-SNAPSHOT
 * Contact: user@flink.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.nextbreakpoint.flinkclient.model;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import com.google.gson.annotations.SerializedName;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * SubtaskTimeInfo
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
        date = "2023-04-02T23:14:46.617621+08:00[Asia/Shanghai]")
public class SubtaskTimeInfo {
    @SerializedName("subtask")
    private Integer subtask = null;

    @SerializedName("host")
    private String host = null;

    @SerializedName("duration")
    private Long duration = null;

    @SerializedName("timestamps")
    private Map<String, Long> timestamps = null;

    public SubtaskTimeInfo subtask(Integer subtask) {
        this.subtask = subtask;
        return this;
    }

    /**
     * Get subtask
     * 
     * @return subtask
     **/
    @Schema(description = "")
    public Integer getSubtask() {
        return subtask;
    }

    public void setSubtask(Integer subtask) {
        this.subtask = subtask;
    }

    public SubtaskTimeInfo host(String host) {
        this.host = host;
        return this;
    }

    /**
     * Get host
     * 
     * @return host
     **/
    @Schema(description = "")
    public String getHost() {
        return host;
    }

    public void setHost(String host) {
        this.host = host;
    }

    public SubtaskTimeInfo duration(Long duration) {
        this.duration = duration;
        return this;
    }

    /**
     * Get duration
     * 
     * @return duration
     **/
    @Schema(description = "")
    public Long getDuration() {
        return duration;
    }

    public void setDuration(Long duration) {
        this.duration = duration;
    }

    public SubtaskTimeInfo timestamps(Map<String, Long> timestamps) {
        this.timestamps = timestamps;
        return this;
    }

    public SubtaskTimeInfo putTimestampsItem(String key, Long timestampsItem) {
        if (this.timestamps == null) {
            this.timestamps = new HashMap<String, Long>();
        }
        this.timestamps.put(key, timestampsItem);
        return this;
    }

    /**
     * Get timestamps
     * 
     * @return timestamps
     **/
    @Schema(description = "")
    public Map<String, Long> getTimestamps() {
        return timestamps;
    }

    public void setTimestamps(Map<String, Long> timestamps) {
        this.timestamps = timestamps;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SubtaskTimeInfo subtaskTimeInfo = (SubtaskTimeInfo) o;
        return Objects.equals(this.subtask, subtaskTimeInfo.subtask) && Objects.equals(this.host, subtaskTimeInfo.host)
                && Objects.equals(this.duration, subtaskTimeInfo.duration)
                && Objects.equals(this.timestamps, subtaskTimeInfo.timestamps);
    }

    @Override
    public int hashCode() {
        return Objects.hash(subtask, host, duration, timestamps);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SubtaskTimeInfo {\n");

        sb.append("    subtask: ").append(toIndentedString(subtask)).append("\n");
        sb.append("    host: ").append(toIndentedString(host)).append("\n");
        sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
        sb.append("    timestamps: ").append(toIndentedString(timestamps)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
