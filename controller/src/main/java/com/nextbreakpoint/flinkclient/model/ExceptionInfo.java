/*
 * Flink JobManager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1/1.15-SNAPSHOT
 * Contact: user@flink.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.nextbreakpoint.flinkclient.model;

import java.util.Objects;

import com.google.gson.annotations.SerializedName;

import io.swagger.v3.oas.annotations.media.Schema;

/**
 * ExceptionInfo
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen",
        date = "2023-04-02T23:14:46.617621+08:00[Asia/Shanghai]")
public class ExceptionInfo {
    @SerializedName("exceptionName")
    private String exceptionName = null;

    @SerializedName("stacktrace")
    private String stacktrace = null;

    @SerializedName("timestamp")
    private Long timestamp = null;

    @SerializedName("taskName")
    private String taskName = null;

    @SerializedName("location")
    private String location = null;

    public ExceptionInfo exceptionName(String exceptionName) {
        this.exceptionName = exceptionName;
        return this;
    }

    /**
     * Get exceptionName
     * 
     * @return exceptionName
     **/
    @Schema(description = "")
    public String getExceptionName() {
        return exceptionName;
    }

    public void setExceptionName(String exceptionName) {
        this.exceptionName = exceptionName;
    }

    public ExceptionInfo stacktrace(String stacktrace) {
        this.stacktrace = stacktrace;
        return this;
    }

    /**
     * Get stacktrace
     * 
     * @return stacktrace
     **/
    @Schema(description = "")
    public String getStacktrace() {
        return stacktrace;
    }

    public void setStacktrace(String stacktrace) {
        this.stacktrace = stacktrace;
    }

    public ExceptionInfo timestamp(Long timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Get timestamp
     * 
     * @return timestamp
     **/
    @Schema(description = "")
    public Long getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Long timestamp) {
        this.timestamp = timestamp;
    }

    public ExceptionInfo taskName(String taskName) {
        this.taskName = taskName;
        return this;
    }

    /**
     * Get taskName
     * 
     * @return taskName
     **/
    @Schema(description = "")
    public String getTaskName() {
        return taskName;
    }

    public void setTaskName(String taskName) {
        this.taskName = taskName;
    }

    public ExceptionInfo location(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get location
     * 
     * @return location
     **/
    @Schema(description = "")
    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExceptionInfo exceptionInfo = (ExceptionInfo) o;
        return Objects.equals(this.exceptionName, exceptionInfo.exceptionName)
                && Objects.equals(this.stacktrace, exceptionInfo.stacktrace)
                && Objects.equals(this.timestamp, exceptionInfo.timestamp)
                && Objects.equals(this.taskName, exceptionInfo.taskName) && Objects.equals(this.location, exceptionInfo.location);
    }

    @Override
    public int hashCode() {
        return Objects.hash(exceptionName, stacktrace, timestamp, taskName, location);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ExceptionInfo {\n");

        sb.append("    exceptionName: ").append(toIndentedString(exceptionName)).append("\n");
        sb.append("    stacktrace: ").append(toIndentedString(stacktrace)).append("\n");
        sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
        sb.append("    taskName: ").append(toIndentedString(taskName)).append("\n");
        sb.append("    location: ").append(toIndentedString(location)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
