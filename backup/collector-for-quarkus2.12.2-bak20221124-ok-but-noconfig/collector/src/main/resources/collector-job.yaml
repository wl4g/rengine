# Copyright (c) 2017 ~ 2025, the original authors individual Inc,
# All rights reserved. Contact us James Wong <jameswong1376@gmail.com>
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# #### Collector Job configuration. ####
#

rengine:
  collector:
    zookeeper:
      #serverLists: "#{T(java.net.InetAddress).getLocalHost().getHostName()}:2181"
      serverLists: localhost:2181
      namespace: rengine
      baseSleepTimeMilliseconds: 1000
      maxSleepTimeMilliseconds: 3000
      maxRetries: 3
      sessionTimeoutMilliseconds: 0
      connectionTimeoutMilliseconds: 5
      #digest:
    tracing:
      type: RDB
      includeJobNames: []
      excludeJobNames: []
    dump:
      enabled: true
      port: 9888
    globalScrapeJobConfig:
      ## The custom event type, which should correspond to Rengine manager, evaluator, jobs.
      eventType: PROM
      ## The custom event attached properties such as labels for Prometheus scraping jobs.
      eventAttributes:
        foo: bar
      disabled: false ## Default by false
      overwrite: true ## Default by true
      monitorExecution: true ## Default by true
      failover: false ## Default by false
      misfire: false ## Default by false
      cron: "0/10 * * * * ?"
      timeZone: GMT+08:00
      maxTimeDiffSeconds: -1
      reconcileIntervalMinutes: 0
      ## When setup true, the shardingTotalCount will be ignored, and the will be automatically allocated according to the number of cluster nodes priority.
      autoShardingTotalCount: true
      shardingTotalCount: 1
      shardingItemParameters: 0=Beijing,1=Shanghai
      jobShardingStrategyType: ""
      jobExecutorServiceHandlerType: ""
      jobErrorHandlerType: ""
      jobListenerTypes: []
      description: The job that scrapes events remote over HTTP/TCP/SSH/Redis/JDBC etc.
      ## The define global variables of SPEL expression, which can be used for job dynamic input arguemnts.
      ## see:com.wl4g.rengine.client.collector.job.CollectJobExecutor#resolveVariables()
      ## Note: If you run in grailvm native image mode, you can only call META-INF/native-image/reflect-config.json defined fields and methods,
      ## because the SPEL needs reflection calls, or the user-defined extension reflect-config.json recompiles and packages.
      jobVariables:
        yesterday: "#{T(com.wl4g.infra.common.lang.DateUtils2).getDateOf(5,-1,\"yyyy-MM-dd\")}"
      ## The define default/fallback job params configuration properties.
      jobParamConfigs:
        simpleHttp:
          url: http://localhost:8080/event
          method: GET
          headers:
            Content-Type: "text/html"
            X-Foo: Bar
          body: ""
          connectTimeoutMs: 3000
          readTimeoutMs: 5000
        simpleJdbc:
          ## If this variable is false, we will throw exceptions on SQL warnings.
          ignoreWarnings: true
          ## If this variable is set to a non-negative value, it will be used for setting the fetchSize property 
          ## on statements used for query processing.
          fetchSize: -1
          ## If this variable is set to a non-negative value, it will be used for setting the maxRows property on
          ## statements used for query processing.
          maxRows: -1
          ## If this variable is set to a non-negative value, it will be used for setting the queryTimeout property
          ## on statements used for query processing.
          queryTimeout: -1
          ## If this variable is set to true, then all results checking will be bypassed for any callable statement
          ## processing. This can be used to avoid a bug in some older Oracle JDBC drivers like 10.1.0.2.
          skipResultsProcessing: false
          ## If this variable is set to true then all results from a stored procedure call that don't have a 
          ## corresponding SqlOutParameter declaration will be bypassed. All other results processing will 
          ## be take place unless the variable skipResultsProcessing is set true
          skipUndeclaredResults: false
          ## If this variable is set to true then execution of a CallableStatement will return the results in a Map
          ## that uses case-insensitive names for the parameters.
          resultsMapCaseInsensitive: false
          sql: "SELECT 1" ## The collect to target JDBC SQL.
          ## The properties for HikariConfig
          hikariConfig:
            #jdbcUrl: ""
            #username: ""
            #password: ""
            connectionTimeout: 30000
            idleTimeout: 600000
            initializationFailTimeout: 1
            minimumIdle: 1
            maxLifetime: 1800000
            maximumPoolSize: 1
            validationTimeout: 5000
            leakDetectionThreshold: 0
        simpleRedis:
          jedisConfig:
            nodes: [localhost:6379,localhost:6380,localhost:6381,localhost:7379,localhost:7380,localhost:7381]
            passwd: 'zzx!@#$%'
            #clientName: 
            connTimeout: 10000
            soTimeout: 10000
            maxAttempts: 20
            database:  0
          #luaScript: "return 'hello'"
          #luaKeys: ["mykey1"]
          #luaArgs: ["myarg1"]
        simpleTcp:
          #host: "localhost"
          #port: 1883
          base64Message: "SGVsbG8K"
        simpleSsh:
          #host: "localhost"
          port: 22
          #user: "root"
          #password: ""
          #privateKey:
          #command: "echo 'hello'"
    scrapeJobConfigs:
      - !PROMETHEUS
        name: node-example-job
        jobParams:
          - name: node-local
            url: http://localhost:9100/metrics
      - !PROMETHEUS
        name: rengine-jmx-job
        jobParams:
          - name: rengine-manager-local
            url: http://localhost:10108/actuator/metrics
          - name: rengine-evaluator-local
            url: http://localhost:28002/metrics
          - name: rengine-collect-local
            url: http://localhost:10108/actuator/metrics
      - !SIMPLE_JDBC
        name: jdbc-example-job
        jobParams:
          - name: mysql-local
            hikariConfig:
              jdbcUrl: "jdbc:mysql://localhost:3306/rengine?useunicode=true&serverTimezone=Asia/Shanghai&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true&autoReconnect=true"
              username: rengine
              password: rengine
            sql: "SELECT NOW()"
      - !SIMPLE_REDIS
        name: redis-example-job
        jobParams:
          - name: redis-local
            jedisConfig:
              nodes: [localhost:6379,localhost:6380,localhost:6381,localhost:7379,localhost:7380,localhost:7381]
              passwd: 'zzx!@#$%'
            ## see:https://redis.io/docs/manual/programmability/eval-intro/
            luaScript: |-
              local testKey = KEYS[1]
              local defaultVal = tonumber(ARGV[1])
              local yesterday = ARGV[2]
              local ttl = tonumber(ARGV[3])
              local message = string.format('Hello, yesterday is: %s', yesterday)
              local value = tonumber(redis.call("get", testKey))
              if value == nil then
                value = defaultVal
              end
              value = value * 2.0
              redis.call("setex", testKey, ttl, value)
              return { message, value }
            luaKeys: ["test:pi"]
            luaArgs: ["3.141592653", "{{getDate('')}}", "60"]
      - !SIMPLE_SSH
        name: ssh-example-job
        jobParams:
          - name: ssh-local
            host: localhost
            port: 22
            user: rengine
            password: 12345678
            #privateKey:
            command: "echo 'hello'"
