{{- $webApp := "apiserver" }}
{{- $secretName := printf "%s%s" .Release.Name "-init-secret" -}}
{{- $initUserName := "root" }}

{{- $apiserverBaselineTag := index .Values "apiserver" "image" "baselineTag" }}
{{- $firstCustomHost := index .Values "apiserver" "governance" "istio" "ingress" "customHosts" 0 }}

{{- if eq (index .Values $webApp "governance" "provider") "Istio" }}
    {{- $domain := index .Values $webApp "governance" "istio" "ingress" "domain" }}
+ Add istio injection label:

    kubectl label ns {{ .Release.Namespace }} istio-injection=enabled --overwrite

+ Generating self credentials:

    openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -subj '/O=wl4g Inc./CN=*.{{ $domain }}' -keyout {{ $domain }}.key -out {{ $domain }}.crt
    kubectl create -n istio-system secret tls wl4g-credential --key={{ $domain }}.key --cert={{ $domain }}.crt

+ Try testing access requests routed through Istio-ingressgateway using NodePort:

    export nodeIP=$(ip a | grep -E '^[0-9]+: (em|eno|enp|ens|eth|wlp)+[0-9]' -A2 | grep inet | awk -F ' ' '{print $2}' | cut -f1 -d/ | head -1)
    export nodePort=$(kubectl -n istio-system get svc istio-ingressgateway -ojson | jq -r '.spec.ports[] | select (.name == "http2") | .nodePort')

    curl -vk -H 'Host: {{ $firstCustomHost }}' "${nodeIP}:${nodePort}/healthz"
    # Or
    curl -vk -H 'Host: {{ $firstCustomHost }}' "${nodeIP}:${nodePort}/metrics"
    # Or
    curl -vk -H 'Host: {{ $firstCustomHost }}' "${nodeIP}:${nodePort}/v1/user/userinfo"
{{- end }}

+ Get your '{{ $initUserName }}' user password by running:

    kubectl get secret -n {{ .Release.Namespace }} {{ $secretName }} -o jsonpath="{.data.initRootPassword}" | base64 -d; echo

+ Generate local static DNS

export UI_SVC_IP=$(kubectl -n rengine get svc/rengine-ui -o jsonpath="{.spec.clusterIP}")
export API_SVC_IP=$(kubectl -n rengine get svc/rengine-apiserver -o jsonpath="{.spec.clusterIP}")
export S3_SVC_IP=$(kubectl -n rengine get svc/rengine-minio -o jsonpath="{.spec.clusterIP}")

sudo bash -c "cat << EOF >> /etc/hosts

# Generate static dns to access the address of rengine.
${UI_SVC_IP} console.rengine.io
${API_SVC_IP} api.rengine.io
${S3_SVC_IP} s3.rengine.io
EOF"

+ Login access to http://console.rengine.io

+ Here an example of what you should execution command-line on your next grayscale upgrade (canary):

    helm -n {{ .Release.Namespace }} upgrade -i rengine ./rengine-stack --set="\
        apiserver.image.baselineTag={{ $apiserverBaselineTag }},\
        apiserver.image.upgradeTag=latest,\
        apiserver.governance.istio.ingress.http.canary.baseline.weight=80,\
        apiserver.governance.istio.ingress.http.canary.upgrade.weight=20,
        controller.image.baselineTag={{ $apiserverBaselineTag }},\
        controller.image.upgradeTag=latest,\
        controller.governance.istio.ingress.http.canary.baseline.weight=80,\
        controller.governance.istio.ingress.http.canary.upgrade.weight=20,\
        executor.image.baselineTag={{ $apiserverBaselineTag }},\
        executor.image.upgradeTag=latest,\
        executor.governance.istio.ingress.http.canary.baseline.weight=80,\
        executor.governance.istio.ingress.http.canary.upgrade.weight=20"
