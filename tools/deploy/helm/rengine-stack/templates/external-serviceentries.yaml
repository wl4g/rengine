# Copyright (c) 2017 ~ 2025, the original author James Wong individual Inc,
# All rights reserved. Contact us James Wrong <jameswong1376@gmail.com>
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

{{- $releaseNamespace := .Release.Namespace }}

{{- range $name, $app := .Values.global.components }}
{{- if $app.external.enabled }}
## see:https://developer.aliyun.com/article/772279
## see:https://istio.io/v1.14/zh/docs/tasks/traffic-management/egress/egress-control/#controlled-access-to-external-services
## see:https://istio.io/v1.14/zh/docs/reference/config/networking/service-entry/
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: {{ $name }}-serviceentry
  namespace: {{ $app.external.namespace | default $releaseNamespace }}
spec:
  hosts:
  ## Add egress external service default host.
  - {{ $name }}-headless.{{ $app.external.namespace | default $releaseNamespace }}.svc.cluster.local
  ## Add external extension hosts.
  {{- range $index1, $addr := $app.external.instanceAddresses }}
  {{- range $index2, $host := $addr.hosts }}
  - {{ $host }}
  {{- end }}
  {{- end }}
  ## see:https://istio.io/v1.14/zh/docs/reference/config/networking/service-entry/#ServiceEntry-Location
  ## Location specifies whether the service is part of Istio mesh or outside the mesh. Location determines the
  ## behavior of several features, such as service-to-service mTLS authentication, policy enforcement, etc. 
  ## When communicating with services outside the mesh, Istio mTLS authentication is disabled, and policy 
  ## enforcement is performed on the client-side as opposed to server-side.
  location: {{ $app.external.location | default "MESH_EXTERNAL" }}
  ports:
  ## Add egress external service default ports.
  {{- if empty $app.external.instancePorts }}
  - name: http-{{ $name }}
    protocol: HTTP
    number: 80
    targetPort: 80
  - name: https-{{ $name }}
    protocol: HTTPS
    number: 443
    targetPort: 443
  {{- else }}
  ## Add egress external service ports.
  {{- range $index, $port := $app.external.instancePorts }}
  - name: {{ $port.protocol | lower }}-{{ $name }}-{{ $index }}
    protocol: {{ $port.protocol | upper }}
    number: {{ $port.targetPort }}
    targetPort: {{ $port.targetPort }}
  {{- end }}
  {{- end }}
  ## Validate Error: multiple hosts provided with non-HTTP, non-TLS ports.
  ## see:https://stackoverflow.com/questions/64206521/how-the-request-is-routed-when-using-egress-gateway
  ## see:https://github.com/istio/istio/blob/1.14.3/pkg/config/validation/validation.go#L3268-L3269
  resolution: {{ $app.external.resolution | default "NONE" }}
  workloadSelector:
    labels:
      app: {{ $name }}
---
## Note: WorkloadEntry objects correspond to VMs instance one-to-one.
## see:https://istio.io/v1.14/zh/docs/reference/config/networking/workload-entry/#WorkloadEntry
{{- range $index, $addr := $app.external.instanceAddresses }}
apiVersion: networking.istio.io/v1beta1
kind: WorkloadEntry
metadata:
  name: {{ $name }}-workloadentry-{{ $index }}
  namespace: {{ $app.external.namespace | default $releaseNamespace }}
spec:
  # use of the service account indicates that the workload has a
  # sidecar proxy bootstrapped with this service account. Pods with
  # sidecars will automatically communicate with the workload using
  # istio mutual TLS.
  {{- if not (empty $app.external.serviceAccount) }}
  serviceAccount: {{ $app.external.serviceAccount }}
  {{- end}}
  address: {{ $addr.ip }}
  labels:
    app: {{ $name }}
    classify: {{ $app.external.labels.classify }}
    version: {{ $app.external.labels.version }}
---
{{- end }}

{{- end }}
{{- end }}