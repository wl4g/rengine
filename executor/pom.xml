<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <artifactId>rengine-executor</artifactId>
    <name>Rengine Executor</name>
    <description>Rengine Executor.</description>
    <organization>
        <name>wl4g</name>
        <url>https://rengine.wl4g.com</url>
    </organization>
    <licenses>
        <license>
            <name>Apache License Version 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
            <distribution>repo</distribution>
        </license>
    </licenses>
    <scm>
        <connection>scm:git:git@github.com:wl4g/rengine.git</connection>
        <developerConnection>scm:git:git@github.com:wl4g/rengine.git</developerConnection>
        <url>https://github.com/wl4g/rengine</url>
        <tag>HEAD</tag>
    </scm>
    <issueManagement>
        <system>github</system>
        <url>https://github.com/wl4g/rengine/issues</url>
    </issueManagement>
    <developers>
        <developer>
            <id>James Wong</id>
            <name>jameswong1376</name>
            <email>jameswong1376@gmail.com</email>
            <roles>
                <role>owner</role>
                <role>maintainer</role>
                <role>developer</role>
            </roles>
            <timezone>+8</timezone>
        </developer>
        <developer>
            <id>xburnerair00</id>
            <name>xburnerair00</name>
            <email>xburnerair00@163.com</email>
            <roles>
                <role>maintainer</role>
                <role>developer</role>
            </roles>
            <timezone>+8</timezone>
        </developer>
    </developers>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <metrics.version>3.2.5</metrics.version>
        <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>
        <quarkus.platform.group-id>io.quarkus</quarkus.platform.group-id>
        <!-- see:https://github.com/quarkusio/quarkus-quickstarts/blob/2.12.2.Final/getting-started/pom.xml -->
        <!-- see:ubi-quarkus-native-image:22.1-java11 -->
        <quarkus.platform.version>2.12.2.Final</quarkus.platform.version>
        <!-- see:ubi-quarkus-native-image:22.3-java11 -->
        <!-- <quarkus.platform.version>2.14.3.Final</quarkus.platform.version>-->
        <!-- <groovy.version>4.0.4</groovy.version>-->
        <!-- <graalvm.version>22.1.0</graalvm.version>-->
        <compiler-plugin.version>3.8.1</compiler-plugin.version>
        <surefire-plugin.version>3.0.0-M7</surefire-plugin.version>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <maven.compiler.parameters>true</maven.compiler.parameters>
        <final.name>rengine-executor</final.name>
    </properties>
    <parent>
        <groupId>com.wl4g</groupId>
        <artifactId>rengine-parent</artifactId>
        <version>1.0.0</version>
    </parent>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.wl4g</groupId>
                <artifactId>rengine-bom</artifactId>
                <version>${project.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>${quarkus.platform.group-id}</groupId>
                <artifactId>${quarkus.platform.artifact-id}</artifactId>
                <version>${quarkus.platform.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>com.wl4g</groupId>
            <artifactId>rengine-common</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>io.netty</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.wl4g</groupId>
            <artifactId>infra-common-java11</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>io.netty</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- DB -->
        <dependency>
            <groupId>commons-dbutils</groupId>
            <artifactId>commons-dbutils</artifactId>
        </dependency>
        <dependency>
            <groupId>com.zaxxer</groupId>
            <artifactId>HikariCP</artifactId>
        </dependency>
        <!-- Fix for native image building: Fatal error: org.graalvm.compiler.debug.GraalError: com.oracle.graal.pointsto.constraints.UnsupportedFeatureException:
        Detected a started Thread in the image heap. Threads running in the image generator are no longer running at image runtime. 
        To see how this object got instantiated use -trace-object-instantiation=java.lang.Thread. The object was probably created by a class
        initializer and is reachable from a static field. You can request class initialization at image runtime by using the option 
        -initialize-at-run-time=<class-name>. Or you can write your own initialization methods and call them explicitly from your main entry point. -->
        <!-- MySQL -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-jdbc-mysql-deployment</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-jdbc-mysql</artifactId>
        </dependency>
        <!-- PostgreSQL -->
        <!-- <dependency>-->
        <!--     <groupId>io.quarkus</groupId>-->
        <!--     <artifactId>quarkus-jdbc-postgresql-deployment</artifactId>-->
        <!-- </dependency>-->
        <!-- <dependency>-->
        <!--     <groupId>io.quarkus</groupId>-->
        <!--     <artifactId>quarkus-jdbc-postgresql</artifactId>-->
        <!-- </dependency>-->
        <!-- Oracle -->
        <!-- <dependency>-->
        <!--     <groupId>io.quarkus</groupId>-->
        <!--     <artifactId>quarkus-jdbc-oracle-deployment</artifactId>-->
        <!-- </dependency>-->
        <!-- <dependency>-->
        <!--     <groupId>io.quarkus</groupId>-->
        <!--     <artifactId>quarkus-jdbc-oracle</artifactId>-->
        <!-- </dependency>-->
        <!-- DB2 -->
        <!-- <dependency>-->
        <!--     <groupId>io.quarkus</groupId>-->
        <!--     <artifactId>quarkus-jdbc-db2-deployment</artifactId>-->
        <!-- </dependency>-->
        <!-- <dependency>-->
        <!--     <groupId>io.quarkus</groupId>-->
        <!--     <artifactId>quarkus-jdbc-db2</artifactId>-->
        <!-- </dependency>-->
        <!-- SSHJ -->
        <dependency>
            <groupId>com.hierynomus</groupId>
            <artifactId>sshj</artifactId>
        </dependency>
        <!-- Commons(see:com.wl4g.infra.common.remoting.parse.FormHttpMessageParser) -->
        <dependency>
            <groupId>javax.mail</groupId>
            <artifactId>javax.mail-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.sun.mail</groupId>
            <artifactId>javax.mail</artifactId>
        </dependency>
        <!-- HikariCP depends -->
        <dependency>
            <groupId>com.codahale.metrics</groupId>
            <artifactId>metrics-core</artifactId>
            <version>3.0.2</version>
        </dependency>
        <dependency>
            <groupId>com.codahale.metrics</groupId>
            <artifactId>metrics-healthchecks</artifactId>
            <version>3.0.2</version>
        </dependency>
        <!-- Cache(Jedis) -->
        <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
        </dependency>
        <!-- Bridge for spring -->
        <!-- <dependency>-->
        <!--     <groupId>io.quarkus</groupId>-->
        <!--     <artifactId>quarkus-spring-web</artifactId>-->
        <!-- </dependency>-->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-oidc-deployment</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-oidc</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-config-yaml-deployment</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-config-yaml</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss.logmanager</groupId>
            <artifactId>log4j2-jboss-logmanager</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-logging-json-deployment</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-logging-json</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-smallrye-health</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-resteasy-reactive-deployment</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-resteasy-reactive</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-resteasy-reactive-jackson</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-rest-client-deployment</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-rest-client</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-rest-client-jackson</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-smallrye-openapi</artifactId>
        </dependency>
        <!-- see:https://github.com/quarkusio/quarkus/issues/8250 -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-hibernate-validator</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-mongodb-client-deployment</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-mongodb-client</artifactId>
        </dependency>
        <!-- <dependency>-->
        <!--     <groupId>io.quarkus</groupId>-->
        <!--     <artifactId>quarkus-mongodb-panache</artifactId>-->
        <!-- </dependency>-->
        <!-- Redis -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-redis-client-deployment</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-redis-client</artifactId>
        </dependency>
        <!-- OTEL -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-opentelemetry-exporter-otlp-deployment</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-opentelemetry-exporter-otlp</artifactId>
        </dependency>
        <!-- <dependency>-->
        <!--     <groupId>io.quarkus</groupId>-->
        <!--     <artifactId>quarkus-opentelemetry-exporter-jaeger-deployment</artifactId>-->
        <!-- </dependency>-->
        <!-- <dependency>-->
        <!--     <groupId>io.quarkus</groupId>-->
        <!--     <artifactId>quarkus-opentelemetry-exporter-jaeger</artifactId>-->
        <!-- </dependency>-->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-micrometer</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-micrometer-registry-prometheus-deployment</artifactId>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-micrometer-registry-prometheus</artifactId>
        </dependency>
        <!-- <dependency>-->
        <!--     <groupId>io.quarkus</groupId>-->
        <!--     <artifactId>quarkus-micrometer-registry-stackdriver</artifactId>-->
        <!-- </dependency>-->
        <!-- <dependency>-->
        <!--     <groupId>com.acme</groupId>-->
        <!--     <artifactId>custom-micrometer-registry</artifactId>-->
        <!-- </dependency>-->
        <!-- OSS -->
        <dependency>
            <groupId>io.minio</groupId>
            <artifactId>minio</artifactId>
        </dependency>
        <!-- START: Integration for Groovy script engine -->
        <dependency>
            <groupId>org.apache.groovy</groupId>
            <artifactId>groovy</artifactId>
        </dependency>
        <!-- fix: native build error of: org.codehaus.groovy.control.SourceUnit is registered for linking at image build time by command line ...
caused by: org.codehaus.groovy.control.XStreamUtils.serialze(String,Object) not found? see:https://github.com/quarkusio/quarkus/issues/2720
and see:https://github.com/apache/groovy/blob/GROOVY_4_0_5/build.gradle#L98 -->
        <dependency>
            <groupId>com.thoughtworks.xstream</groupId>
            <artifactId>xstream</artifactId>
            <version>1.4.19</version>
            <exclusions>
                <exclusion>
                    <groupId>xpp3</groupId>
                    <artifactId>xpp3_min</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>jmock</groupId>
                    <artifactId>jmock</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>xmlpull</groupId>
                    <artifactId>xmlpull</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- fix: native build error of: NoClassDefFoundError: jnr/unixsocket/Unix Socket -->
        <dependency>
            <groupId>com.github.jnr</groupId>
            <artifactId>jnr-unixsocket</artifactId>
            <version>0.18</version>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <!-- END: Integration for Groovy script engine -->
        <!-- START: Integration for Javascript(graal.js/nashorn) script engine -->
        <!-- see: https://github.com/graalvm/graal-js-jdk11-maven-demo/blob/master/pom.xml -->
        <dependency>
            <groupId>org.graalvm.sdk</groupId>
            <artifactId>graal-sdk</artifactId>
        </dependency>
        <dependency>
            <groupId>org.graalvm.js</groupId>
            <artifactId>js</artifactId>
        </dependency>
        <dependency>
            <groupId>org.graalvm.js</groupId>
            <artifactId>js-scriptengine</artifactId>
        </dependency>
        <dependency>
            <groupId>org.graalvm.tools</groupId>
            <artifactId>profiler</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.graalvm.tools</groupId>
            <artifactId>chromeinspector</artifactId>
            <scope>runtime</scope>
        </dependency>
        <!-- END: Integration for Javascript(graal.js/nashorn) script engine -->
        <!-- Devel tools -->
        <dependency>
            <groupId>com.github.spotbugs</groupId>
            <artifactId>spotbugs-annotations</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <!-- Fix: NoDefineClassFound:io.quarkus.bootstrap.resolver.maven.BootstrapMavenContext with io.quarkus.bootstrap.IDELauncherImpl#L84 -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-bootstrap-maven-resolver</artifactId>
        </dependency>
        <!-- Testing -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-junit5</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-junit5-mockito</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- see:https://quarkus.io/guides/mongodb#testing-helpers -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-test-mongodb</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>testcontainers</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>mongodb</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <finalName>${final.name}</finalName>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/**.yaml</include>
                    <include>**/**.yml</include>
                    <include>**/**.conf</include>
                    <include>**/**.properties</include>
                    <include>**/**.json</include>
                    <include>**/**.xml</include>
                    <include>**/**.txt</include>
                    <include>**/**.tpl</include>
                    <include>**/**.groovy</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>false</filtering>
                <includes>
                    <include>static/**</include>
                </includes>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <!-- <version>${compiler-plugin.version}</version>-->
            </plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <!-- <version>${surefire-plugin.version}</version>-->
                <configuration>
                    <systemPropertyVariables>
                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>
                        <maven.home>${maven.home}</maven.home>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
            <plugin>
                <groupId>${quarkus.platform.group-id}</groupId>
                <artifactId>quarkus-maven-plugin</artifactId>
                <version>${quarkus.platform.version}</version>
                <configuration>
                    <!-- invalid? Not really added to the JVM at compile time -->
                    <!-- see:https://stackoverflow.com/questions/69631653/quarkus-optaplanner-illegal-reflective-call -->
                    <compilerArgs>
                        <arg>--enable-preview --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.lang.reflect=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.text=ALL-UNNAMED --add-opens java.desktop/java.awt.font=ALL-UNNAMED</arg>
                    </compilerArgs>
                    <jvmArgs>--enable-preview --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.lang.reflect=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.text=ALL-UNNAMED --add-opens java.desktop/java.awt.font=ALL-UNNAMED</jvmArgs>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <profile>
            <id>build:tar</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <configuration>
                            <finalName>${final.name}-${project.version}-bin</finalName>
                            <appendAssemblyId>false</appendAssemblyId>
                            <descriptors>
                                <descriptor>src/main/assemble/package.xml</descriptor>
                            </descriptors>
                        </configuration>
                        <executions>
                            <execution>
                                <id>make-assembly</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>build:tar:docker</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <configuration>
                            <finalName>${final.name}-${project.version}-bin</finalName>
                            <appendAssemblyId>false</appendAssemblyId>
                            <descriptors>
                                <descriptor>src/main/assemble/package.xml</descriptor>
                            </descriptors>
                        </configuration>
                        <executions>
                            <execution>
                                <id>make-assembly</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- Usages examples: -->
                    <!-- export DOCKER_HOST=tcp://localhost:2375 -->
                    <!-- [build]: mvn -Pbuild:tar:docker -->
                    <!-- [push]: mvn -Pbuild:tar:docker -->
                    <!-- [push]: mvn -Pbuild:tar:docker dockerfile:build dockerfile:push -Ddockerfile.username=wl4g -Ddockerfile.password=xxx -->
                    <plugin>
                        <groupId>com.spotify</groupId>
                        <artifactId>dockerfile-maven-plugin</artifactId>
                        <version>1.4.13</version>
                        <executions>
                            <execution>
                                <id>default</id>
                                <goals>
                                    <goal>build</goal>
                                    <!-- <goal>push</goal> -->
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <!-- see:https://github.com/spotify/dockerfile-maven/issues/154 -->
                            <contextDirectory>${project.basedir}</contextDirectory>
                            <dockerfile>${project.basedir}/build/docker/Dockerfile.quarkustar</dockerfile>
                            <repository>wl4g/${project.build.finalName}</repository>
                            <useMavenSettingsForAuth>true</useMavenSettingsForAuth>
                            <tag>${project.version}</tag>
                            <readTimeoutMillis>60000</readTimeoutMillis>
                            <connectTimeoutMillis>20000</connectTimeoutMillis>
                            <buildArgs>
                                <!-- Addidtion librarys. -->
                                <!-- <ADD_LIBRARY></ADD_LIBRARY> -->
                                <APP_NAME>${project.build.finalName}</APP_NAME>
                                <APP_VERSION>${project.version}</APP_VERSION>
                                <APP_MAINCLASS>${bootstrap-classname}</APP_MAINCLASS>
                            </buildArgs>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!-- Packaging for native (The use of JVM attach(arthas) cannot be supported in native mode) -->
        <profile>
            <id>native</id>
            <activation>
                <property>
                    <name>native</name>
                </property>
            </activation>
            <properties>
                <quarkus.package.type>native</quarkus.package.type>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>${surefire-plugin.version}</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                                <configuration>
                                    <!-- see:https://stackoverflow.com/questions/69631653/quarkus-optaplanner-illegal-reflective-call -->
                                    <!-- <systemPropertyVariables>-->
                                    <!--     <native.image.path>${project.build.directory}/${project.build.finalName}-native</native.image.path>-->
                                    <!--     <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>-->
                                    <!--     <maven.home>${maven.home}</maven.home>-->
                                    <!-- </systemPropertyVariables>-->
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>with:arthas</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <dependencies>
                <!-- Arthas (The use of JVM attach(arthas) cannot be supported in native mode) -->
                <dependency>
                    <groupId>com.taobao.arthas</groupId>
                    <artifactId>arthas-agent-attach</artifactId>
                    <optional>true</optional>
                </dependency>
                <dependency>
                    <groupId>com.taobao.arthas</groupId>
                    <artifactId>arthas-packaging</artifactId>
                    <optional>true</optional>
                </dependency>
            </dependencies>
        </profile>
    </profiles>
</project>
