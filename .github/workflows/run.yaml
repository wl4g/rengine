## Copyright (c) 2017 ~ 2025, the original authors individual Inc,
## All rights reserved. Contact us James Wong <jameswong1376@gmail.com>
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
## see:https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
## see:https://github.com/apache/spark/blob/master/.github/workflows/build_and_test.yml
## see:https://github.com/quarkusio/quarkus/blob/main/.github/workflows/release-build.yml

name: Build deploy and release images

on:
  workflow_call: ## This the definition of the callee.
    inputs:
      #timeout:
      #  required: false
      #  type: number
      #  default: 10
      repository:
        required: false
        type: string
        default: wl4g/rengine
      runs-on:
        required: false
        type: string
        default: ubuntu-20.04
      java:
        required: false
        type: string
        default: 11
      branch:
        required: false
        type: string
        default: ""
      build-mvn-opts:
        required: false
        type: string
        default: ""
      enable-build:
        required: false
        type: boolean
        default: true
      enable-deploy:
        required: false
        type: boolean
        default: false
      enable-build-image-apiserver-tar:
        required: false
        type: boolean
        default: true
      enable-build-image-apiserver-springjar:
        required: false
        type: boolean
        default: false
      enable-build-image-controller-tar:
        required: false
        type: boolean
        default: true
      enable-build-image-controller-springjar:
        required: false
        type: boolean
        default: false
      enable-build-image-executor-tar:
        required: false
        type: boolean
        default: true
      enable-build-image-executor-native:
        required: false
        type: boolean
        default: false
      enable-push-image-dockerhub:
        required: false
        type: boolean
        default: true
      enable-push-image-ghcr:
        required: false
        type: boolean
        default: true
    secrets: ## see:https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-of-onworkflow_callsecrets
      PERSONAL_ACCESS_TOKEN:
        description: 'A developer personal token from the caller workflow'
        required: false
      OSSRH_USERNAME:
        description: 'A OSSRH username from the caller workflow'
        required: false
      OSSRH_TOKEN:
        description: 'A OSSRH token from the caller workflow'
        required: false
      DOCKERHUB_USERNAME:
        description: 'A image registry username from the caller workflow'
        required: false
      DOCKERHUB_TOKEN:
        description: 'A image registry password from the caller workflow'
        required: false

jobs:
  prepares:
    if: github.repository == '${{ inputs.repository }}'
    runs-on: ${{ inputs.runs-on || 'ubuntu-latest' }}
    outputs:
      pom_version: ${{ steps.build-outputs.outputs.pom_version }}
      cache_suffix: ${{ steps.build-outputs.outputs.cache_suffix }}
      repo_owner: ${{ steps.basic-outputs.outputs.repo_owner }}
      repo_name: ${{ steps.basic-outputs.outputs.repo_name }}
      repo_ref: ${{ steps.basic-outputs.outputs.repo_ref }}
      run_id_img_tag: ${{ steps.basic-outputs.outputs.run_id_img_tag }}
      commit_id_img_tag: ${{ steps.basic-outputs.outputs.commit_id_img_tag }}
      ref_img_tag: ${{ steps.basic-outputs.outputs.ref_img_tag }}
    steps:
      - name: Debugging 1
        run: |
          echo "---------- DEBUG OUTPUT. ----------"
          echo "   kernal info: \n$(uname -a)"
          echo "  memory usage: \n$(free -h)"
          echo "     cpu cores: \n$(cat /proc/cpuinfo | grep processor | wc -l)"
          echo "     cpu usage: \n$(top -n 1)"
          echo "    disk usage: \n$(df -h)"
          echo "   current dir: \n$(pwd)"
          echo " current files: \n$(ls -al ./)"
          echo "  environemnts: \n$(env)"

      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          repository: wl4g/rengine
          ref: ${{ inputs.branch || github.event.ref }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Get Maven POM version
        id: build-outputs
        run: |
          POM_VERSION=$(./tools/build/run.sh version)
          echo "DEBUG: pom_version : $POM_VERSION"
          echo "pom_version=$POM_VERSION" >> $GITHUB_OUTPUT

      ## see:https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
      - name: Generate basic Variables
        id: basic-outputs
        shell: bash
        run: |
          echo "cache_suffix=$(/bin/date -u '+%Y-%m')" >> $GITHUB_OUTPUT # Refresh cache every month to avoid unlimited growth.
          ## Convert to lowercase to meet Docker repo name requirement
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME=$(echo $REPO_OWNER | awk -F '/' '{print $3}')
          REPO_REF_NAME=$(echo "${{ github.event.ref_name }}" | tr '[:upper:]' '[:lower:]')
          REPO_REF_TYPE=$(echo "${{ github.event.ref_type }}" | tr '[:upper:]' '[:lower:]')
          ## see:https://docs.github.com/en/developers/webhooks-and-events/events/github-event-types#event-payload-object-for-pushevent
          RUN_ID_IMG_TAG=${{ github.run_id }}-$(date +%Y%m%d%H%M%S)
          COMMIT_ID_IMG_TAG=$(echo ${{ github.event.before }}|cut -c 1-12)-$(date +%Y%m%d%H%M%S)
          REF_IMG_TAG=${REPO_REF_NAME}-$(echo ${{ github.event.before }}|cut -c 1-12)
          echo "DEBUG: repo_owner : $REPO_OWNER"
          echo "DEBUG: repo_name : $REPO_NAME"
          echo "DEBUG: repo_ref_name : $REPO_REF_NAME"
          echo "DEBUG: repo_ref_type : $REPO_REF_TYPE"
          echo "DEBUG: run_id_img_tag : $RUN_ID_IMG_TAG"
          echo "DEBUG: commit_id_img_tag : $COMMIT_ID_IMG_TAG"
          echo "DEBUG: ref_img_tag : $REF_IMG_TAG"
          echo "repo_owner=$REPO_OWNER" >> $GITHUB_OUTPUT
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "repo_ref_name=$REPO_REF_NAME" >> $GITHUB_OUTPUT
          echo "repo_ref_type=$REPO_REF_TYPE" >> $GITHUB_OUTPUT
          echo "run_id_img_tag=$RUN_ID_IMG_TAG" >> $GITHUB_OUTPUT
          echo "commit_id_img_tag=$COMMIT_ID_IMG_TAG" >> $GITHUB_OUTPUT
          echo "ref_img_tag=$REF_IMG_TAG" >> $GITHUB_OUTPUT

  build-push-image:
    needs: prepares
    if: github.repository == 'wl4g/rengine'
    runs-on: ${{ inputs.runs-on || 'ubuntu-latest' }}
    permissions:
      packages: write
    timeout-minutes: 30
    env:
      JAVA_VERSION: ${{ inputs.java }}
      MAVEN_OPTS: ${{ inputs.build-mvn-opts }}
    steps:
      - name: Debugging 1
        run: |
          echo "---------- DEBUG OUTPUT. ----------"
          echo "   kernal info: \n$(uname -a)"
          echo "  memory usage: \n$(free -h)"
          echo "      cpu info: \n$(cat /proc/cpuinfo | grep processor | wc -l)"
          echo "    disk usage: \n$(df -h)"
          echo "   current dir: \n$(pwd)"
          echo " current files: \n$(ls -al ./)"
          echo "  environemnts: \n$(env)"

      ## Notice: Calling other workflows is not supported here. Different jobs will correspond 
      ## to different container spaces. For example, checkout project files cannot be shared.
      #- name: Build and test
      #  uses: './.github/workflows/build_and_test.yaml'
      #  if: github.repository == 'wl4g/rengine'
      #  with:
      #    PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          repository: wl4g/rengine
          ref: ${{ inputs.branch || github.event.ref }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      #- name: Sync the current branch with the latest in Rengine
      #  if: github.repository != 'wl4g/rengine'
      #  run: |
      #    git fetch https://github.com/$GITHUB_REPOSITORY.git ${GITHUB_REF#refs/heads/}
      #    git -c user.name='Rengine Test Account' -c user.email='renginetestacc@gmail.com' merge --no-commit --progress --squash FETCH_HEAD
      #    git -c user.name='Rengine Test Account' -c user.email='renginetestacc@gmail.com' commit -m "Merged commit" --allow-empty

      - name: Cache Maven local repository
        uses: actions/cache@v3
        if: ${{ inputs.enable-build == true }}
        with:
          path: ~/.m2/repository
          key: build-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: build-maven-${{ needs.prepares.outputs.cache_suffix }}-

      - name: Set up JDK ${{ inputs.java }}
        if: ${{ inputs.enable-build == true }}
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ inputs.java }}

      - name: Build with Maven
        if: ${{ inputs.enable-build == true }}
        run: |
          ./tools/build/run.sh build-maven

      - name: Set up Maven Central Repository
        uses: actions/setup-java@v3
        if: ${{ inputs.enable-build == true && inputs.enable-deploy == true }}
        with:
          distribution: 'adopt'
          java-version: ${{ inputs.java }}
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          #server-username: ${{ secrets.OSSRH_USERNAME }}
          #server-password: ${{ secrets.OSSRH_TOKEN }}

      - name: Deploy to Maven
        run: ./mvnw --batch-mode deploy -Prelease
        if: ${{ inputs.enable-build == true && inputs.enable-deploy == true }}
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}

      - name: Set up QEMU
        if: >-
          ${{ inputs.enable-build == true &&
               (  inputs.enable-build-image-apiserver-tar == true
               || inputs.enable-build-image-apiserver-springjar == true
               || inputs.enable-build-image-controller-tar == true
               || inputs.enable-build-image-controller-springjar == true
               || inputs.enable-build-image-executor-tar == true
               || inputs.enable-build-image-executor-native == true
             )
          }}
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        if: >-
          ${{ inputs.enable-build == true &&
               (  inputs.enable-build-image-apiserver-tar == true
               || inputs.enable-build-image-apiserver-springjar == true
               || inputs.enable-build-image-controller-tar == true
               || inputs.enable-build-image-controller-springjar == true
               || inputs.enable-build-image-executor-tar == true
               || inputs.enable-build-image-executor-native == true
             )
          }}
        uses: docker/setup-buildx-action@v2

      - name: Debugging 2
        run: |
          echo "---------- DEBUG OUTPUT. ----------"
          echo "    disk usage: \n$(df -h)"
          echo "  memory usage: \n$(free -h)"
          echo "     cpu usage: \n$(top -n 1)"
          echo "   current dir: \n$(pwd)"
          echo " current files: \n$(ls -al ./)"
          echo "        images: \n$(docker images)"
          echo "  environemnts: \n$(env)"

      ### see:https://github.com/docker/build-push-action#inputs
      #- name: Build and push
      #  id: docker_build
      #  uses: docker/build-push-action@v3
      #  with:
      #    context: "{{defaultContext}}:${{ inputs.moduleName }}"
      #    file: ./build/docker/Dockerfile.springtar
      #    platforms: linux/amd64 # linux/arm64
      #    push: true # ${{ github.ref_type == 'tag' }}
      #    # Use the infra image cache to speed up.
      #    #cache-from: type=registry,ref=wl4g-rengine-github-action-image-cache:${{ inputs.branch }}
      #    args: APP_NAME=${{ inputs.moduleName }}
      #    tags: |
      #      ghcr.io/${{ needs.prepares.outputs.image_url }}

      - name: Build image for ApiServer (tar)
        if: ${{ inputs.enable-build == true && inputs.enable-build-image-apiserver-tar == true }}
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        run: |
          ./tools/build/run.sh build-image --apiserver

      - name: Build image for ApiServer (springjar)
        if: ${{ inputs.enable-build == true && inputs.enable-build-image-apiserver-springjar == true }}
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        run: |
          echo "Unsupported build image apiserver with springjar"; exit 1

      - name: Debugging 3
        run: |
          echo "---------- DEBUG OUTPUT. ----------"
          echo "    disk usage: \n$(df -h)"
          echo "  memory usage: \n$(free -h)"
          echo "     cpu usage: \n$(top -n 1)"
          echo "        images: \n$(docker images)"

      - name: Build image for Controller (tar)
        if: ${{ inputs.enable-build == true && inputs.enable-build-image-controller-tar == true }}
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        run: |
          ./tools/build/run.sh build-image --controller

      - name: Build image for Controller (springjar)
        if: ${{ inputs.enable-build == true && inputs.enable-build-image-controller-springjar == true }}
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        run: |
          echo "Unsupported build image controller with springjar"; exit 1

      - name: Debugging 4
        run: |
          echo "---------- DEBUG OUTPUT. ----------"
          echo "    disk usage: \n$(df -h)"
          echo "  memory usage: \n$(free -h)"
          echo "     cpu usage: \n$(top -n 1)"
          echo "        images: \n$(docker images)"

      - name: Build image for Executor (tar)
        if: ${{ inputs.enable-build == true && inputs.enable-build-image-executor-tar == true }}
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        run: |
          ./tools/build/run.sh build-image --executor

      - name: Debugging 5
        run: |
          echo "---------- DEBUG OUTPUT. ----------"
          echo "    disk usage: \n$(df -h)"
          echo "  memory usage: \n$(free -h)"
          echo "        images: \n$(docker images)"

      - name: Build image for Executor (native)
        if: ${{ inputs.enable-build == true && inputs.enable-build-image-executor-native == true }}
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        run: |
          ./tools/build/run.sh build-image --executor-native

      - name: Debugging 6
        run: |
          echo "---------- DEBUG OUTPUT. ----------"
          echo "    disk usage: \n$(df -h)"
          echo "  memory usage: \n$(free -h)"
          echo "     cpu usage: \n$(top -n 1)"
          echo "        images: \n$(docker images)"

      ## see:https://docs.docker.com/build/ci/github-actions/examples/
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        if: ${{ inputs.enable-build == true && inputs.enable-push-image-dockerhub == true }}
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push image to Docker Hub Registry
        if: ${{ inputs.enable-build == true && inputs.enable-push-image-dockerhub == true }}
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          #repo_owner="${{ needs.prepares.outputs.repo_owner }}"
          #pom_version="${{ needs.prepares.outputs.pom_version }}"
          #ref_img_tag="${{ needs.prepares.outputs.ref_img_tag }}"

          if [ "${{ inputs.enable-push-image-dockerhub }}" == "true" ]; then
            if [ "${{ inputs.enable-build-image-apiserver-tar }}" == "true" ]; then
              ./tools/build/run.sh push-image --apiserver
            fi
            if [ "${{ inputs.enable-build-image-apiserver-springjar }}" == "true" ]; then
              echo "Unsupported push apiserver (springjar) to Docker Hub."; exit 1
            fi
            if [ "${{ inputs.enable-build-image-controller-tar }}" == "true" ]; then
              ./tools/build/run.sh push-image --controller
            fi
            if [ "${{ inputs.enable-build-image-controller-springjar }}" == "true" ]; then
              echo "Unsupported push controller (springjar) to Docker Hub."; exit 1
            fi
            if [ "${{ inputs.enable-build-image-executor-tar }}" == "true" ]; then
              ./tools/build/run.sh push-image --executor
            fi
            if [ "${{ inputs.enable-build-image-executor-native }}" == "true" ]; then
              ./tools/build/run.sh push-image --executor-native
            fi
          fi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: ${{ inputs.enable-build == true && inputs.enable-push-image-ghcr == true }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # github.repository_owner
          ## see:https://docs.github.com/en/actions/security-guides/automatic-token-authentication
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image to Github Container Registry
        if: ${{ inputs.enable-build == true && inputs.enable-push-image-ghcr == true }}
        run: |
          if [ "${{ inputs.enable-push-image-ghcr }}" == "true" ]; then
            if [ "${{ inputs.enable-build-image-apiserver-tar }}" == "true" ]; then
              ./tools/build/run.sh push-image --apiserver https://ghcr.io
            fi
            if [ "${{ inputs.enable-build-image-apiserver-springjar }}" == "true" ]; then
              echo "Unsupported push controller (springjar) to Github Container Registry."; exit 1
            fi
            if [ "${{ inputs.enable-build-image-controller-tar }}" == "true" ]; then
              ./tools/build/run.sh push-image --controller https://ghcr.io
            fi
            if [ "${{ inputs.enable-build-image-controller-springjar }}" == "true" ]; then
              echo "Unsupported push controller (springjar) to Github Container Registry."; exit 1
            fi
            if [ "${{ inputs.enable-build-image-executor-tar }}" == "true" ]; then
              ./tools/build/run.sh push-image --executor https://ghcr.io
            fi
            if [ "${{ inputs.enable-build-image-executor-native }}" == "true" ]; then
              ./tools/build/run.sh push-image --executor-native https://ghcr.io
            fi
          fi

      - name: Debugging 7
        run: |
          echo "---------- DEBUG OUTPUT. ----------"
          echo "    disk usage: \n$(df -h)"
          echo "  memory usage: \n$(free -h)"
          echo "     cpu usage: \n$(top -n 1)"
          echo "        images: \n$(docker images)"
